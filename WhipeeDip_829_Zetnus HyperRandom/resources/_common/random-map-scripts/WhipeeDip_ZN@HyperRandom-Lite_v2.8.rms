/* HyperRandom */
/* Compatibility: Definitive Edition */
/*
by Zetnus
zetnus@outlook.com

v2.8
-re-enabled dolphins, since they are fixed in DE now
-fixed monument resources being blocked by the TC

v2.7
-fixed a few typos
-disabled dolphins, since they unfortunately are buggy (sorry about that, I honestly did not know that)
-removed duplicated resources on nomad starts


Most recent update 	29 May 2020

The goal of HyperRandom is to provide a lot of variation, while still making it reasonably fair, by providing the same variation, and balanced map layouts whenever possible.
HyperRandom will generate maps that seem similar to standard maps, but does so totally at random.
HyperRandom is not like MegaRandom. There are no individual maps to choose from; it is one giant script that generates many types of maps, rather than picking from a huge pack.

You can customize HyperRandom to your own preferences, by commenting or uncommenting definitions below. I have also made an effort to put descriptive comments in the body of the script, in case you want to dig deeper.
I provide two presets:
ZN@HyperRandom has most of the random features enabled, at the cost of making things somewhat less fair, and certainly less predictable.
ZN@HyperRandom-Lite disables some randomization in an effort to provide an experience that might be more suitable for competitive gameplay, and more aligned with the standard maps.
	You won't share islands with enemies, map resources and starting units are standard, there is no water elevation, etc.

This map script should run on all versions of the game:
AoC, AoC+UserPatch, WololoKingdoms, HD Editions with and without DLC, and the Definitive Edition
The biomes will look best in the Definitive Edition, because there are more terrains to choose from.



This map can be downloaded from the following links
https://aok.heavengames.com/blacksmith/showfile.php?fileid=13407
https://aoe2map.net/map/39db0813-3550-40fa-8a8b-c0a074362066
https://steamcommunity.com/sharedfiles/filedetails/?id=1940139270
https://www.ageofempires.com/mods/details/829/


More information:
http://aok.heavengames.com/cgi-bin/forums/display.cgi?action=ct&f=28,44641,,365

*/

/* =================================================================================================== */
/* tweak the script to your liking */

/* comment out to prevent weather effects (rain, snow, thunderstorms) when using UserPatch 1.5 */
	/* #define ALLOW_UP_WEATHER */
/* comment out to prevent UserPatch 1.5 terrain shading - which can look bad on streams or recordings */
/*	#define ALLOW_UP_TERRAIN_SHADING	*/

/* modify how often you want to have a nomad start (no town center) */
/* start_random
	percent_chance 0	#define USE_NOMAD_SETUP
end_random */

/* If the "team together" box is ticked, there is a chance of being grouped very closely to team members in one part of the map */
if FIXED_POSITIONS
	start_random
		percent_chance 100	#define USE_TEAM_GROUPING
	end_random
endif

/* allow player lands to ignore the usual circle placement - this makes it much more random, but considerably less fair */
/* only works in DE, because it is using a DE bug */
/* highly experimental! */
/* buggy in the scenario editor */
/*	#define ALLOW_FULL_RANDOM_PLACEMENT		*/

/* use these If you want land maps only */
/* islands, rivers, coastal, continental, yucatan, classic nomad, are examples of water-based map styles */
/* baltic, mediteranean, oasis, cross, four lakes, acropolis are examples of map styles with lakes */
/* arabia, gold rush, black forest are examples of maps that have small ponds */
	#define NO_WATER_BASED_MAPS
	#define NO_LAKES
	/* #define NO_SMALL_PONDS */

/* comment this out If you do not want random zone assignment to be an option for player lands. ie. you might share an island with an enemy If you allow this */
/* also determines If unequal corners are allowed; comment out to ensure there are either 4 or 0 corner lands */
/*	#define ALLOW_RANDOM_ZONES	*/

/* comment out If you don't want the option of hilly water - even then, hilly water may sometimes still occur at the edges of lands */
/*	#define ALLOW_WATER_ELEVATION	*/

/* force standard starting units and buildings, otherwise you might get extra villagers, buildings and/or a different kind of scout */
	#define USE_STANDARD_STARTING_UNITS

/* this enables the chance to choose a scout entirely at random, from all possible units in game.  Will only happen when standard starting units are disabled.  Some units are incredibly over-powered! */
/*	#define ALLOW_RANDOM_SCOUT	*/

/* force standard starting and map resources - otherwise, resources clumps may be larger or smaller and may contain variable amount of resources */
	#define USE_STANDARD_RESOURCES

/* allow gold/stone/boar/deer/forage -rush syle - i.e. large amounts of one of these resources might be placed on the center land, If there is one (and/or possibly in all 4 corners) */
	#define ALLOW_CENTER_RUSH_RESOURCES
/*	#define ALLOW_CORNER_RUSH_RESOURCES	*/
	#define ALLOW_RELIC_RUSH
	#define ALLOW_NEUTRAL_MARKET

/* pick one of these
random gives a randomized relic count, but still evenly spaced
DE balance is 5 on smaller maps and more on larger maps
5 relics always gives 5 relics
even spacing will give as many as fit on the map, but with a large spacing so the amount will not be excessive */
/*	#define USE_RANDOM_RELIC_COUNT	*/
	#define USE_DE_RELIC_BALANCE
/*	#define USE_5_RELICS */
/*	#define USE_EVENLY_SPACED_RELICS */

/* additionally, and independent of what you choose above, you can choose to allow the possibility that players start with a relic at their base */
/* this will always occur on island and michi maps, but with this setting you can choose to allow it to happen at random on any map */
	/* #define ALLOW_PERSONAL_RELIC */

/* prevent custom wall types that AIs may have difficulty with  */
if AI_PLAYERS	#define ONLY_STANDARD_WALL_TYPES
endif



/* =================================================================================================== */
/*  Script below */


/* the base terrain is either land, water or forest */
/* ratios can be tweaked */
if NO_WATER_BASED_MAPS
	start_random
		percent_chance 75	#define LAND_BASED_MAP
		percent_chance 25	#define FOREST_BASED_MAP
	end_random
else
	start_random
		percent_chance 40	#define LAND_BASED_MAP		/* arabia, mongolia, baltic, ghost lake, acropolis, land nomad, are examples of land-based maps */
		percent_chance 40	#define WATER_BASED_MAP		/* islands, rivers, coastal, continental, yucatan, classic nomad, are examples of water-based maps */
		percent_chance 20	#define FOREST_BASED_MAP	/* black forest, arena, michi, are examples of forest-based maps */
	end_random
endif
if FOREST_BASED_MAP
	start_random
		percent_chance 10	#define USE_MICHI_STYLE    /* forest completely separating players - probability is (forest chance)x(michi chance) - currently 2% */  /* effective chance is even lower due interference from center land and zones */
	end_random
elseif WATER_BASED_MAP
	start_random
		percent_chance 60	#define USE_ISLANDS_STYLE   /* water completely separating players - probability is (water chance)x(islands chance) - currently 24%  -  actual chance is lower due to zones central land */
	end_random
endif

/* version checking */
if DE_AVAILABLE #define DLC #define DLC_NO_WK
elseif DLC_TIGER #define DLC  /* could be WK or HD dlc */
	if UP_EXTENSION #define WOLOLOKINGDOMS
	else #define HD_EDITION_DLC #define DLC_NO_WK
	endif
elseif DLC_COW #define HD_EDITION_BASE
elseif UP_EXTENSION #define USERPATCH_1.5
elseif UP_AVAILABLE #define USERPATCH_1.4
else #define CONQUERORS_CD
endif

if UP_EXTENSION #define RND_AVAILABLE
elseif DE_AVAILABLE #define RND_AVAILABLE
endif

if DE_AVAILABLE
else #define NOT_DE
endif

/* =================================================================================================== */
/* biomes */

/* a biome consists of:
#const LAND_A	base for the map and lands
#const LAND_X	alternative base that can be used for the central land, If there is one
#const LAND_B	large patches of this on the primary terrain  (layered underneath primary terrain in DE)
#const LAND_C	small patches on the secondary terrain 	(layered underneath secondary terrain in DE)
#const LAND_D	small patches on the primary terrain (layered above primary terrain in DE)
#const LAND_Z	terrain that cannot be built on (rock/quicksand/bogland)
#const ROAD_A	used for connecting team members

#const FOREST_A		main forest - could be map base terrain
#const FOREST_B		mixer for the main forest
#const FOREST_C		mixer for the main forest
#const FOREST_FILLER	tree type to fill forests with that are not 100% dense

#const WATER_A		usually standard shallow water
#const WATER_B		mixer for primary water - usually medium water
#const WATER_C		mixer for secondary water - usually deep water
#const SHALLOWS_A	usually shallows, sometimes ice or mangroveshallows
#const BEACH_A		usually beach

#const STRAGGLER_A
#const STRAGGLER_B
#const STRAGGLER_C

and an animal biome group, which will cover the following:
#const BERRY_TYPE
#const SHEEP_TYPE
#const BOAR_TYPE
#const DEER_TYPE
#const PREDATOR_TYPE
#const BIRD_TYPE
#const FISH_A
#const FISH_B
#const SHOREFISH_C
#const DEEPFISH_D

and a color correction (for DE only)
and a weather-type profile (for UP only)
*/

/*
Polar - all snow, water maybe frozen, snow pines
	Tundra - all snow, water not frozen, snow pines (now part of polar)
Taiga - snow with patches of grass and leaves, snow pines
	Frozen-taiga - like taiga, but water frozen (now part of taiga)
	Boreal-swamp - taiga with extra shallows (now part of taiga)
Alpine - grass with snow patches, pines and snow pines
Highland - pine with oak, more dirt
	Asian-highland - bamboo with pine  (now part of highland)
Temperate - oak with pine, more grass
	Asian-temperate - bamboo with oak (now part of temperate)
	Temperate-swamp - temperate with extra shallows, dlc adds mangroveshallows (now part of temperate)
	Mediteranean - mediteranean forest (part of temperate; only in DE)
	Bush forest - part of temperate; only in DE
Autumn - temperate with DE autumn trees
Autumn-snow - snowy temperate with DE snowy autumn trees
Jungle - only jungle and rainforest
	Asian-jungle - bamboo with jungle (now part of jungle)
	Temperate-jungle - jungle with oak (now part of jungle)
	Jungle-swamp - jungle with extra shallows, dlc adds mangroves (now part of jungle)
Tropical - palms and jungle, grass and sand and bright water
	Tropical-swamp - tropical with extra shallows, dlc mangroveshallows (now part of tropical) (can be reeds in DE)
Savannah - african forests, dirt and dry grass
Desert - maybe less water, lots of sandy desert, sandy connections (can be reeds in DE)
High-desert - like desert, pines and lots of dirt,
	Gravel-desert - DE only
Mangrove-swamp - mangroves, use jungle and shallows in vanilla aoc
	Reed-swamp - DE only
Wasteland - bonus biome; leaves, dead trees, dead farms, snow blends in DE
*/

start_random
	percent_chance 5	#define POLAR_BIOME
	percent_chance 10	#define TAIGA_BIOME
	percent_chance 10	#define ALPINE_BIOME /* +5 */
	percent_chance 10	#define HIGHLAND_BIOME
	percent_chance 10	#define TEMPERATE_BIOME
	percent_chance 10	#define AUTUMN_TEMPERATE_BIOME /* +5 */
	percent_chance 5	#define AUTUMN_SNOW_BIOME
	percent_chance 10	#define JUNGLE_BIOME
	percent_chance 9	#define TROPICAL_BIOME
	percent_chance 10	#define SAVANNAH_BIOME
	percent_chance 5	#define DESERT_BIOME
	percent_chance 5	#define HIGH_DESERT_BIOME
	percent_chance 0	#define MANGROVE_SWAMP_BIOME
	percent_chance 1	#define WASTELAND_BIOME
end_random


/* the actual biomes are handled here */
if POLAR_BIOME
	#define ARCTIC_ANIMALS

	if DE_AVAILABLE
		#const LAND_A 32	/* snow */
		#const LAND_X 73	/* snow weak layering */
		#const LAND_B 72	/* snow underbrush */
		#const LAND_C 74	/* snow strong layering */
		#const LAND_D 70	/* gravel */
		#const ROAD_A 38	/* road snow */
		#const FOREST_A 106	/* dead forest */
		#const FOREST_B 21	/* snow pine */
		#const FOREST_C 105	/* autumn snow */
		#const FOREST_FILLER 1054	/* snow bush */
	else
		if WOLOLOKINGDOMS
			#const LAND_B 36	/* dirt snow */
			#const LAND_D 36	/* dirt snow */
			#const ROAD_A 33	/* road snow */
		else
			#const LAND_B 33	/* dirt snow */
			#const LAND_D 33	/* dirt snow */
			#const ROAD_A 38	/* road snow */
		endif
		#const LAND_A 32	/* snow */
		#const LAND_X 32	/* snow */
		#const LAND_C 34	/* grass snow */
		#const FOREST_A 21	/* snow pine */
		#const FOREST_B 21	/* snow pine */
		#const FOREST_C 21	/* snow pine */
		#const FOREST_FILLER 413	/* snow pine */
	endif

	start_random
		percent_chance 33 #define FREEZE_ALL_WATER
		percent_chance 33 #define FREEZE_PRIMARY_AND_SECONDARY_WATER
	end_random

	if FREEZE_ALL_WATER
		#const WATER_A 35	/* ice */
		#const WATER_B 35	/* ice */
		#const WATER_C 35	/* ice */
		#const LAND_Z 35	/* ice */
	elseif FREEZE_PRIMARY_AND_SECONDARY_WATER
		if DLC_NO_WK
			start_random
				percent_chance 50	#const WATER_C 1	/* water */
				percent_chance 50	#const WATER_C 58	/* azure water */
			end_random
		else	#const WATER_C 1	/* water */	endif
		#const WATER_A 35	/* ice */
		#const WATER_B 35	/* ice */
		#const LAND_Z 40	/* road koth */
	else
		#define USE_DEFAULT_WATER
		#const LAND_Z 35	/* ice */
	endif

	#const SHALLOWS_A 26	/* ice shallows */
	#const BEACH_A 37	/* ice beach */

	if DE_AVAILABLE
		#const STRAGGLER_A 1250	/* dead tree */
		#const STRAGGLER_B 413	/* snow pine */
		#const STRAGGLER_C 1054	/* snowy bush */
	elseif DLC
		#const STRAGGLER_A 413	/* snow pine */
		#const STRAGGLER_B 413	/* snow pine */
		#const STRAGGLER_C 1054	/* snowy bush */
	else
		#const STRAGGLER_A 413	/* snow pine */
		#const STRAGGLER_B 413	/* snow pine */
		#const STRAGGLER_C 413	/* snow pine */
	endif

	start_random
		percent_chance 10	#define SUNNY_WEATHER
		percent_chance 10	#define CLOUDY_WEATHER
		percent_chance 20	#define FOGGY_WEATHER
		percent_chance 0	#define RAINY_WEATHER
		percent_chance 0	#define THUNDERSTORM_WEATHER
		percent_chance 40	#define SNOWY_WEATHER
		percent_chance 0	#define FOGGY_RAINY_WEATHER
		percent_chance 20	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random


elseif TAIGA_BIOME
	#define SNOW_ANIMALS

	#const LAND_A 32	/* snow */
	if DE_AVAILABLE #const LAND_X 72	/* underbrush snow */	elseif WOLOLOKINGDOMS #const LAND_X 36 else #const LAND_X 33	/* dirt snow */ endif
	#const LAND_B 34	/* grass snow */
	#const LAND_C 5	/* leaves */
	#const LAND_D 5	/* grass snow */
	if WOLOLOKINGDOMS #const ROAD_A 33 else #const ROAD_A 38	/* road snow */	endif

	#const FOREST_A 21	/* snow pine */
	if DE_AVAILABLE #const FOREST_B 105	/* autumn snow */ else #const FOREST_B 21	/* snow pine */ endif
	#const FOREST_C 21	/* snow pine */
	#const FOREST_FILLER 413	/* snow pine */

	start_random
		percent_chance 33 #define FREEZE_PRIMARY_WATER
		percent_chance 33 #define SWAMP
	end_random
	if FREEZE_PRIMARY_WATER
		if DLC_NO_WK
			start_random
				percent_chance 50	#const WATER_B 1	/* water */
				percent_chance 50	#const WATER_B 58	/* water azure */
			end_random
			start_random
				percent_chance 50	#const WATER_C 22	/* deep water */
				percent_chance 50	#const WATER_C 57	/* very deep water */
			end_random
		else
			#const WATER_B 1	/* ´water */
			#const WATER_C 22	/* deep water */
		endif
		#define USE_RANDOM_SHALLOWS
		#const WATER_A 35	/* ice */
		#const LAND_Z 40	/* road koth */
	elseif SWAMP
		#const WATER_A 4	/* shallows */
		#const WATER_B 4	/* shallows */
		#const WATER_C 1	/* water */
		#const SHALLOWS_A 26	/* ice shallows */
		#const LAND_Z 35	/* ice */
	else
		#define USE_DEFAULT_WATER
		#define USE_RANDOM_SHALLOWS
		#const LAND_Z 35	/* ice */
	endif

	#const BEACH_A 37	/* ice beach */

	if DE_AVAILABLE
		#const STRAGGLER_A 413	/* snow pine */
		#const STRAGGLER_B 1249	/* autumn snow tree */
		#const STRAGGLER_C 1250	/* dead tree */
	elseif DLC
		#const STRAGGLER_A 413	/* snow pine */
		#const STRAGGLER_B 413	/* snow pine */
		#const STRAGGLER_C 1054	/* snowy bush */
	else
		#const STRAGGLER_A 413	/* snow pine */
		#const STRAGGLER_B 413	/* snow pine */
		#const STRAGGLER_C 413	/* snow pine */
	endif

	start_random
		percent_chance 10	#define SUNNY_WEATHER
		percent_chance 10	#define CLOUDY_WEATHER
		percent_chance 15	#define FOGGY_WEATHER
		percent_chance 5	#define RAINY_WEATHER
		percent_chance 5	#define THUNDERSTORM_WEATHER
		percent_chance 30	#define SNOWY_WEATHER
		percent_chance 5	#define FOGGY_RAINY_WEATHER
		percent_chance 20	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif ALPINE_BIOME
	#define ALPINE_ANIMALS

	if DE_AVAILABLE
		#const LAND_A 100	/* drygrass */
		#const LAND_X 33	/* dirt snow */
		#const LAND_B 32	/* snow */
		#const LAND_C 32	/* snow */
		#const LAND_D 73	/* snow weak layering */
		#const ROAD_A 38	/* road snow */
	else
		#const LAND_A 9	/* grass 3 */
		if WOLOLOKINGDOMS #const LAND_X 36 else #const LAND_X 33	/* dirt snow */ endif
		#const LAND_B 34  /* grass snow */
		#const LAND_C 32 /* snow */
		#const LAND_D 3 /* dirt 3 */
		if WOLOLOKINGDOMS #const ROAD_A 33 else #const ROAD_A 38	/* road snow */	endif
	endif
	#const LAND_Z 35	/* ice */

	#const FOREST_A 19	/* pine */
	#const FOREST_B 21	/* snow pine */
	#const FOREST_C 19	/* pine */
	#const FOREST_FILLER 413	/* snow pine */

	#define USE_DEFAULT_WATER
	#define USE_RANDOM_SHALLOWS
	#define USE_RANDOM_BEACHES

	if DE_AVAILABLE
		#const STRAGGLER_A 350	/* pine */
		#const STRAGGLER_B 1249	/* autumn snow tree */
		#const STRAGGLER_C 413	/* snow pine */
	elseif DLC
		#const STRAGGLER_A 350	/* pine */
		#const STRAGGLER_B 1053	/* bush */
		#const STRAGGLER_C 413	/* snow pine */
	else
		#const STRAGGLER_A 350	/* pine */
		#const STRAGGLER_B 350	/* pine */
		#const STRAGGLER_C 413	/* snow pine */
	endif

	start_random
		percent_chance 30	#define SUNNY_WEATHER
		percent_chance 10	#define CLOUDY_WEATHER
		percent_chance 10	#define FOGGY_WEATHER
		percent_chance 10	#define RAINY_WEATHER
		percent_chance 10	#define THUNDERSTORM_WEATHER
		percent_chance 10	#define SNOWY_WEATHER
		percent_chance 10	#define FOGGY_RAINY_WEATHER
		percent_chance 10	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif HIGHLAND_BIOME
	#define TEMPERATE_ANIMALS

	#const LAND_A 9	/* grass 3 */
	#const LAND_X 3 /* dirt3 */
	if WOLOLOKINGDOMS #const LAND_B 27 else #const LAND_B 11	/* dirt grass */ endif
	#const LAND_D 0	/* grass3 */
	#const ROAD_A 39	/* road fungus */

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const LAND_Z 101	/* bogland */
			percent_chance 50	#const LAND_Z 40	/* rock */
		end_random
		start_random
			percent_chance 50	#const LAND_C 100	/* grass dry */
			percent_chance 50	#const LAND_C 0	/* grass */
		end_random
	else
		#const LAND_Z 40	/* rock */
		#const LAND_C 0	/* grass */
	endif

	start_random
		percent_chance 50
			#const FOREST_A 19	/* pine */
			#const FOREST_B 10	/* (oak) forest */
			#const FOREST_C 19	/* pine */
			#const FOREST_FILLER 350	/* pine */
		percent_chance 25
			#const FOREST_A 18	/* bamboo */
			#const FOREST_B 19	/* pine */
			#const FOREST_C 18	/* bamboo */
			#const FOREST_FILLER 350	/* pine */
		percent_chance 25
			#const FOREST_A 18 /* bamboo */
			if DE_AVAILABLE #const FOREST_B 92	/* reed forest */ else #const FOREST_B 19	/* pine */ endif
			if DE_AVAILABLE #const FOREST_C 19	/* pine */ else #const FOREST_C 18	/* bamboo */ endif
			#const FOREST_FILLER 350	/* pine */
	end_random

	#define USE_DEFAULT_WATER
	#define USE_RANDOM_SHALLOWS
	#define USE_RANDOM_BEACHES

	if DLC
		#const STRAGGLER_A 350	/* pine */
		#const STRAGGLER_B 349	/* oak */
		#const STRAGGLER_C 1053	/* bush */
	else
		#const STRAGGLER_A 350	/* pine */
		#const STRAGGLER_B 349	/* oak */
		#const STRAGGLER_C 411	/* forest(oak) */
	endif


	start_random
		percent_chance 30	#define SUNNY_WEATHER
		percent_chance 10	#define CLOUDY_WEATHER
		percent_chance 10	#define FOGGY_WEATHER
		percent_chance 20	#define RAINY_WEATHER
		percent_chance 20	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 10	#define FOGGY_RAINY_WEATHER
		percent_chance 0	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif TEMPERATE_BIOME
	#define TEMPERATE_ANIMALS

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const LAND_X 6	/* dirt 1 */
			percent_chance 50	#const LAND_X 45	/* cracked */
		end_random
		start_random
			percent_chance 50	#const LAND_Z 101	/* bogland */
			percent_chance 50	#const LAND_Z 40	/* rock */
		end_random
	elseif DLC_NO_WK
		start_random
			percent_chance 50	#const LAND_X 6	/* dirt 1 */
			percent_chance 50	#const LAND_X 45	/* cracked */
		end_random
		#const LAND_Z 40	/* rock */
	elseif WOLOLOKINGDOMS
		start_random
			percent_chance 50	#const LAND_X 6	/* dirt 1 */
			percent_chance 50	#const LAND_X 38	/* cracked */
		end_random
		#const LAND_Z 40	/* rock */
	else
		#const LAND_X 6	/* dirt 1 */
		#const LAND_Z 40	/* rock */
	endif

	#const LAND_A 0	/* grass 1 */
	#const LAND_B 9	/*  grass 3 */
	if WOLOLOKINGDOMS #const LAND_C 27 else #const LAND_C 11	/* dirt 2 */ endif
	#const LAND_D 12	/* grass 2 */
	#const ROAD_A 39	/* road fungus */

	if DE_AVAILABLE
		start_random
			percent_chance 25	/* default */
				#const FOREST_A 20	/* oak bush */
				#const FOREST_B 10	/* oak */
				#const FOREST_C 19	/* pine */
				#const FOREST_FILLER 349	/* oak */
			percent_chance 25	/* mediteranean */
				#const FOREST_A 88	/* mediteranean */
				#const FOREST_B 20	/* oak bush */
				#const FOREST_C 19	/* pine */
				#const FOREST_FILLER 351	/* palm */
			percent_chance 25	/* asian */
				#const FOREST_A 18	/* bamboo */
				#const FOREST_B 92	/* reeds */
				#const FOREST_C 20	/* oak bush */
				#const FOREST_FILLER 349	/* oak */
			percent_chance 25	/* bush forest */
				#const FOREST_A 89	/* bush forest */
				#const FOREST_B 20	/* oak bush */
				#const FOREST_C 10	/* oak forest */
				#const FOREST_FILLER 349	/* oak */
		end_random
	else
		start_random
			percent_chance 50
				if WOLOLOKINGDOMS #const FOREST_A 10 else #const FOREST_A 20	/* oak forest */ endif
				#const FOREST_B 19	/* pine forest */
				#const FOREST_C 10	/* forest (also oak) */
				#const FOREST_FILLER 349	/* oak */
			percent_chance 50	/* asian */
				#const FOREST_A 18	/* bamboo */
				#const FOREST_B 10	/* oak */
				#const FOREST_C 18	/* bamboo */
				#const FOREST_FILLER 349	/* oak */
		end_random
	endif

	start_random
		percent_chance 30 #define SWAMP
	end_random
	if SWAMP
		if DLC_NO_WK
			#const WATER_A 54	/* mangrove shallows */
			#const WATER_B 54	/* mangrove shallows */
			#const WATER_C 55	/* mangrove forest */
			#const SHALLOWS_A 54	/* mangrove shallows */
		elseif WOLOLOKINGDOMS
			#const WATER_A 11	/* mangrove shallows */
			#const WATER_B 11	/* mangrove shallows */
			#const WATER_C 20	/* mangrove forest */
			#const SHALLOWS_A 11	/* mangrove shallows */
		else
			#const WATER_A 4	/* shallows */
			#const WATER_B 4	/* shallows */
			#const WATER_C 1	/* water */
			#const SHALLOWS_A 4	/* shallows */
		endif
	else /* not swamp */
		#define USE_DEFAULT_WATER
		#define USE_RANDOM_SHALLOWS
	endif

	#define USE_RANDOM_BEACHES

	if DLC
		#const STRAGGLER_A 349	/* oak */
		#const STRAGGLER_B 1053	/* bush */
		#const STRAGGLER_C 350	/* pine */
	else
		#const STRAGGLER_A 349	/* oak */
		#const STRAGGLER_B 350	/* pine */
		#const STRAGGLER_C 411	/* forest(oak) */
	endif

	start_random
		percent_chance 30	#define SUNNY_WEATHER
		percent_chance 10	#define CLOUDY_WEATHER
		percent_chance 10	#define FOGGY_WEATHER
		percent_chance 20	#define RAINY_WEATHER
		percent_chance 20	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 10	#define FOGGY_RAINY_WEATHER
		percent_chance 0	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif AUTUMN_TEMPERATE_BIOME
	#define TEMPERATE_ANIMALS

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const LAND_A 100	/* grass dry */
			percent_chance 50	#const LAND_A 9	/* grass 3 */
		end_random
		start_random
			percent_chance 50	#const LAND_Z 101	/* bogland */
			percent_chance 50	#const LAND_Z 40	/* rock */
		end_random
	else
		#const LAND_A 9	/* grass 3 */
		#const LAND_Z 40	/* rock */
	endif
	#const LAND_X 6	/* dirt 1 */
	#const LAND_B 5	/*  leaves */
	if WOLOLOKINGDOMS #const LAND_C 27 else #const LAND_C 11	/* dirt 2 */ endif
	#const LAND_D 5	/* leaves */
	#const ROAD_A 39	/* road fungus */

	if DE_AVAILABLE
		#const FOREST_A 104	/* autumn oak */
		#const FOREST_B 19	/* pine forest */
		start_random
			percent_chance 50	#const FOREST_C 104	/* autumn oak */
			percent_chance 50	#const FOREST_C 10	/* oak */
		end_random
		#const FOREST_FILLER 1248	/* autumn oak */
	else
		if WOLOLOKINGDOMS #const FOREST_A 10 else #const FOREST_A 20	/* oak forest */ endif
		#const FOREST_B 19	/* pine forest */
		#const FOREST_C 10	/* forest (also oak) */
		#const FOREST_FILLER 349	/* oak */
	endif

	#define USE_DEFAULT_WATER
	#define USE_RANDOM_SHALLOWS
	#define USE_RANDOM_BEACHES

	if DE_AVAILABLE
		#const STRAGGLER_A 1248	/* autumn oak */
		#const STRAGGLER_B 1248	/* autumn oak */
		#const STRAGGLER_C 1248	/* autumn oak */
	else
		#const STRAGGLER_A 349	/* oak */
		#const STRAGGLER_B 350	/* pine */
		#const STRAGGLER_C 411	/* forest(oak) */
	endif

	start_random
		percent_chance 0	#define SUNNY_WEATHER
		percent_chance 0	#define CLOUDY_WEATHER
		percent_chance 0	#define FOGGY_WEATHER
		percent_chance 0	#define RAINY_WEATHER
		percent_chance 0	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 0	#define FOGGY_RAINY_WEATHER
		percent_chance 0	#define FOGGY_SNOWY_WEATHER
		percent_chance 100	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif AUTUMN_SNOW_BIOME
	#define TEMPERATE_ANIMALS

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const LAND_A 100	/* grass dry */
			percent_chance 50	#const LAND_A 9	/* grass 3 */
		end_random
		#const LAND_X 33	/* dirt snow */
		#const LAND_B 73	/* snow weak layering */
		#const LAND_C 72	/* snow underbrush */
		#const LAND_D 73	/* snow weak layering */
		#const ROAD_A 38	/* road snow */
		start_random
			percent_chance 50	#const LAND_Z 101	/* bogland */
			percent_chance 50	#const LAND_Z 40	/* rock */
		end_random
	else
		#const LAND_A 9	/* grass 3 */
		if WOLOLOKINGDOMS
			#const LAND_X 36	/* dirt snow */
			#const LAND_B 27	/* dirt 2 */
		else
			#const LAND_X 33	/* dirt snow */
			#const LAND_B 11	/* dirt 2 */
		endif
		#const LAND_C 34	/* grass snow */
		#const LAND_D 5	/* leaves */
		#const LAND_Z 40 /* rock */
		#const ROAD_A 39	/* road fungus */
	endif

	if DE_AVAILABLE
		#const FOREST_A 105	/* snow autumn oak */
		#const FOREST_B 21	/* snow pine forest */
		#const FOREST_C 105	/* snow autumn oak */
		#const FOREST_FILLER 413	/* snow pine */
	else
		if WOLOLOKINGDOMS #const FOREST_A 10 else #const FOREST_A 20	/* oak forest */ endif
		#const FOREST_B 19	/* pine forest */
		#const FOREST_C 10	/* forest (also oak) */
		#const FOREST_FILLER 413	/* snow pine */
	endif

	#define USE_DEFAULT_WATER
	#define USE_RANDOM_SHALLOWS
	#const BEACH_A 37	/* ice beach */

	if DE_AVAILABLE
		#const STRAGGLER_A 1249	/* snow autumn oak */
		#const STRAGGLER_B 1249	/* snow autumn oak */
		#const STRAGGLER_C 1249	/* snow autumn oak */
	else
		#const STRAGGLER_A 349	/* oak */
		#const STRAGGLER_B 350	/* pine */
		#const STRAGGLER_C 411	/* forest(oak) */
	endif

	start_random
		percent_chance 0	#define SUNNY_WEATHER
		percent_chance 0	#define CLOUDY_WEATHER
		percent_chance 0	#define FOGGY_WEATHER
		percent_chance 0	#define RAINY_WEATHER
		percent_chance 0	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 0	#define FOGGY_RAINY_WEATHER
		percent_chance 0	#define FOGGY_SNOWY_WEATHER
		percent_chance 100	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif JUNGLE_BIOME
	#define JUNGLE_ANIMALS

	if DE_AVAILABLE
		#const LAND_A 60	/* grass jungle */
		start_random
			percent_chance 50	#const LAND_X 44	/* grass mud */
			percent_chance 50	#const LAND_X 76	/* mud */
		end_random
		start_random
			percent_chance 50	#const LAND_B 62	/* jungle leaves */
			percent_chance 50	#const LAND_B 77	/* underbrush jungle */
		end_random
		#const LAND_C 83	/* jungle grass */
		#const LAND_D 12	/* grass 2 */
		#const ROAD_A 61	/* road jungle */
		start_random
			percent_chance 50	#const LAND_Z 101	/* bogland */
			percent_chance 50	#const LAND_Z 40	/* rock */
		end_random
	elseif DLC_NO_WK
		#const LAND_A 60	/* grass jungle */
		#const LAND_X 44	/* grass mud */
		#const LAND_B 62	/* jungle leaves */
		#const LAND_C 60	/* grass jungle */
		#const LAND_D 12	/* grass 2 */
		#const LAND_Z 40	/* rock */
		#const ROAD_A 61	/* road jungle */
	else
		#const LAND_A 12	/* grass 2 */
		#const LAND_X 9	/* grass 3 */
		#const LAND_B 5	/* leaves */
		#const LAND_C 12	/* grass 2 */
		#const LAND_D 12	/* grass 2 */
		#const LAND_Z 40	/* rock */
		#const ROAD_A 39	/* road fungus */
	endif

	start_random
		percent_chance 25 #define TEMPERATE_JUNGLE
		percent_chance 25 #define ASIAN_JUNGLE
	end_random
	if TEMPERATE_JUNGLE
		if DLC_NO_WK
			#const FOREST_A 56	/* rainforest */
			#const FOREST_B 10	/* (oak) forest */
			#const FOREST_C 17	/* jungle */
			#const FOREST_FILLER 414	/* jungle */
		else
			#const FOREST_A 17	/* jungle */
			#const FOREST_B 10	/* (oak) forest */
			#const FOREST_C 17	/* jungle */
			#const FOREST_FILLER 414	/* jungle */
		endif
	elseif ASIAN_JUNGLE
		if DLC_NO_WK
			#const FOREST_A 18	/* bamboo */
			#const FOREST_B 56	/* rainforest */
			#const FOREST_C 17	/* jungle */
			#const FOREST_FILLER 414	/* jungle */
		else
			#const FOREST_A 18	/* bamboo */
			#const FOREST_B 17	/* jungle */
			#const FOREST_C 18	/* bamboo */
			#const FOREST_FILLER 414	/* jungle */
		endif
	else /* full jungle */
		if DLC_NO_WK
			#const FOREST_A 56	/* rainforest */
			#const FOREST_B 17	/* jungle */
			#const FOREST_C 56	/* rainforest */
			#const FOREST_FILLER 414	/* jungle */
		else
			#const FOREST_A 17	/* jungle */
			#const FOREST_B 17	/* jungle */
			#const FOREST_C 17	/* jungle */
			#const FOREST_FILLER 414	/* jungle */
		endif
	endif

	start_random
		percent_chance 30 #define SWAMP
	end_random
	if SWAMP
		if DE_AVAILABLE
			start_random
				percent_chance 50	#const WATER_C 55	/* mangrove forest */
				percent_chance 50	#const WATER_C 90	/* reed forest (shallows) */
			end_random
			#const WATER_A 54	/* mangrove shallows */
			#const WATER_B 54	/* mangrove shallows */
			#const SHALLOWS_A 54	/* mangrove shallows */
		elseif DLC_NO_WK
			#const WATER_A 54	/* mangrove shallows */
			#const WATER_B 54	/* mangrove shallows */
			#const WATER_C 55	/* mangrove forest */
			#const SHALLOWS_A 54	/* mangrove shallows */
		elseif WOLOLOKINGDOMS
			#const WATER_A 11	/* mangrove shallows */
			#const WATER_B 11	/* mangrove shallows */
			#const WATER_C 20	/* mangrove forest */
			#const SHALLOWS_A 11	/* mangrove shallows */
		else
			#const WATER_A 4	/* shallows */
			#const WATER_B 4	/* shallows */
			#const WATER_C 1	/* water */
			#const SHALLOWS_A 4	/* shallows */
		endif
	else /* not swamp */
		#define USE_DEFAULT_WATER
		if DLC_NO_WK
			start_random
				percent_chance 33	#const SHALLOWS_A 4	/* shallows */
				percent_chance 33	#const SHALLOWS_A 59	/* azure shallows */
				percent_chance 34	#const SHALLOWS_A 54	/* mangrove shallows */
			end_random
		elseif WOLOLOKINGDOMS
			start_random
				percent_chance 50	#const SHALLOWS_A 4	/* shallows */
				percent_chance 50	#const SHALLOWS_A 11	/* mangrove shallows */
			end_random
		else
			#const SHALLOWS_A 4	/* shallows */
		endif
	endif

	if DLC_NO_WK	#const BEACH_A 52	/* beach vegetation */
	else	#const BEACH_A 2	/* beach */	endif

	if DLC
		#const STRAGGLER_A 1146	/* rainforest tree */
		#const STRAGGLER_B 1053	/* bush */
		#const STRAGGLER_C 414	/* jungletree */
	else
		#const STRAGGLER_A 414	/* jungletree */
		#const STRAGGLER_B 414	/* jungletree */
		#const STRAGGLER_C 414	/* jungletree */
	endif

	start_random
		percent_chance 0	#define SUNNY_WEATHER
		percent_chance 0	#define CLOUDY_WEATHER
		percent_chance 0	#define FOGGY_WEATHER
		percent_chance 30	#define RAINY_WEATHER
		percent_chance 20	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 0	#define FOGGY_RAINY_WEATHER
		percent_chance 0	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 50	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif TROPICAL_BIOME
	#define TROPICAL_ANIMALS

	#const LAND_A 14	/* desert */
	#const LAND_D 12	/* grass 2 */

	if DE_AVAILABLE
		#const LAND_X 45	/* cracked */
		#const LAND_B 60	/* grass jungle */
		#const LAND_C 11	/* dirt grass */
		#const LAND_Z 46	/* quicksand */
		#const ROAD_A 43	/* desert road */
	elseif DLC_NO_WK
		#const LAND_X 45	/* cracked */
		#const LAND_B 11	/*  dirt grass */
		#const LAND_C 60	/* grass jungle */
		#const LAND_Z 46	/* quicksand */
		#const ROAD_A 43	/* desert road */
	elseif WOLOLOKINGDOMS
		#const LAND_X 38	/* cracked */
		#const LAND_B 27	/* dirt grass */
		#const LAND_C 12	/* grass 2 */
		#const LAND_Z 40	/* rock */
		#const ROAD_A 25	/* dirt road */
	else
		#const LAND_X 9	/* grass 3 */
		#const LAND_B 11	/* dirt grass */
		#const LAND_C 12	/* grass 2 */
		#const LAND_Z 40	/* rock */
		#const ROAD_A 25	/* dirt road */
	endif

	if DLC_NO_WK
		#const FOREST_A 13	/* palm forest */
		#const FOREST_B 17	/* jungle */
		start_random
			percent_chance 50	#const FOREST_C 56	/* rainforest */
			percent_chance 50	#const FOREST_C 13	/* palm forest */
		end_random
		#const FOREST_FILLER 351	/* palms */
	else
		#const FOREST_A 13	/* palm forest */
		#const FOREST_B 17	/* jungle */
		#const FOREST_C 13	/* palm forest */
		#const FOREST_FILLER 351	/* palms */
	endif

	start_random
		percent_chance 30 #define SWAMP
	end_random
	if SWAMP
		if DE_AVAILABLE
			#const WATER_A 54	/* mangrove shallows */
			#const WATER_B 54	/* mangrove shallows */
			start_random
				percent_chance 50	#const WATER_C 1	/* water */
				percent_chance 50	#const WATER_C 90	/* reed forest (shallows) */
			end_random
			#const SHALLOWS_A 54	/* mangrove shallows */
		elseif DLC_NO_WK
			#const WATER_A 54	/* mangrove shallows */
			#const WATER_B 54	/* mangrove shallows */
			#const WATER_C 1	/* water */
			#const SHALLOWS_A 54	/* mangrove shallows */
		elseif WOLOLOKINGDOMS
			#const WATER_A 11	/* mangrove shallows */
			#const WATER_B 11	/* mangrove shallows */
			#const WATER_C 1	/* water */
			#const SHALLOWS_A 11	/* mangrove shallows */
		else
			#const WATER_A 4	/* shallows */
			#const WATER_B 4	/* shallows */
			#const WATER_C 1	/* water */
			#const SHALLOWS_A 4	/* shallows */
		endif
	else /* not swamp */
		if DLC_NO_WK
			#const WATER_A 58	/* water azure */
			#const WATER_C 57	/* very deep water */
			#const SHALLOWS_A 59	/* azure shallows */
		else
			#const WATER_A 1	/* water */
			#const WATER_C 22	/* deep water */
			#const SHALLOWS_A 4	/* shallows */
		endif
		#const WATER_B 23	/* med water */
	endif

	#define USE_RANDOM_BEACHES

	#const STRAGGLER_A 351	/* palmtree */
	#const STRAGGLER_B 414	/* jungletree */
	#const STRAGGLER_C 351	/* palmtree */


	start_random
		percent_chance 75	#define SUNNY_WEATHER
		percent_chance 5	#define CLOUDY_WEATHER
		percent_chance 5	#define FOGGY_WEATHER
		percent_chance 5	#define RAINY_WEATHER
		percent_chance 5	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 5	#define FOGGY_RAINY_WEATHER
		percent_chance 0	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif SAVANNAH_BIOME
	#define SAVANNAH_ANIMALS

	if DE_AVAILABLE
		#const LAND_A 41	/* savannah */
		#const LAND_X 45	/* cracked */
		#const LAND_B 42	/* dirt 4 */
		#const LAND_D 100	/* dry grass */
		#const LAND_Z 46	/* quicksand */
	elseif DLC_NO_WK
		#const LAND_A 41	/* savannah */
		#const LAND_X 45	/* cracked */
		#const LAND_B 42	/* dirt 4 */
		#const LAND_D 9	/* grass 3 */
		#const LAND_Z 46	/* quicksand */
	elseif WOLOLOKINGDOMS
		#const LAND_A 14	/* desert */
		#const LAND_X 38	/* cracked */
		#const LAND_B 3	/* dirt 3 */
		#const LAND_D 9	/* grass 3 */
		#const LAND_Z 40	/* rock */
	else
		#const LAND_A 14	/* desert */
		#const LAND_X 8	/* dead farm */
		#const LAND_B 3	/* dirt 3 */
		#const LAND_D 9	/* grass 3 */
		#const LAND_Z 40	/* rock */

	endif
	#const LAND_C 6	/* dirt 1 */
	#const ROAD_A 25	/* dirt road */

	/* prefer dragon trees on forest based maps */
	if FOREST_BASED_MAP
		start_random
			percent_chance 80 #define DRAGON_TREES_FIRST
		end_random
	endif

	if DRAGON_TREES_FIRST
		if DLC_NO_WK
			#const FOREST_A 48	/* dragon forest */
			#const FOREST_B 20	/* oak forest */
			#const FOREST_C 50	/* acacia forest */
			#const FOREST_FILLER 1052	/* baobab tree */
		else
			#const FOREST_A 13	/* palm forest */
			#const FOREST_B 20	/* oak forest */
			#const FOREST_C 10	/* (oak) forest */
			#const FOREST_FILLER 351	/* palms */
		endif
	else
		if DLC_NO_WK
			start_random
				percent_chance 25
					#const FOREST_A 48	/* dragon forest */
					#const FOREST_B 20	/* oak forest */
					#const FOREST_C 50	/* acacia forest */
					#const FOREST_FILLER 1052	/* baobab tree */
				percent_chance 25
					#const FOREST_A 49	/* baobab forest */
					#const FOREST_B 50	/* acacia forest */
					#const FOREST_C 48	/* dragon forest */
					if DE_AVAILABLE #const FOREST_FILLER 1350	/* reeds */	else #const FOREST_FILLER 302	/* bush */	endif
				percent_chance 25
					#const FOREST_A 50	/* acacia forest */
					#const FOREST_B 50	/* acacia forest */
					#const FOREST_C 50	/* acacia forest */
					#const FOREST_FILLER 1052	/* baobab tree */
				percent_chance 25
					#const FOREST_A 49	/* baobab forest */
					#const FOREST_B 49	/* baobab forest */
					#const FOREST_C 49	/* baobab forest */
					if DE_AVAILABLE #const FOREST_FILLER 1350	/* reeds */	else #const FOREST_FILLER 302	/* bush */	endif
			end_random
		elseif WOLOLOKINGDOMS
			#const FOREST_A 16	/* baobab forest */
			#const FOREST_B 41	/* acacia forest */
			#const FOREST_C 16	/* baobab forest */
			#const FOREST_FILLER 1051	/* dragon tree */
		else
			#const FOREST_A 13	/* palm forest */
			#const FOREST_B 20	/* oak forest */
			#const FOREST_C 10	/* (oak) forest */
			#const FOREST_FILLER 351	/* palms */
		endif
	endif

	if DLC_NO_WK	#const SHALLOWS_A 59	/* azure shallows */
	else	#const SHALLOWS_A 4	/* shallows */	endif

	#define USE_DEFAULT_WATER
	#define USE_RANDOM_BEACHES

	if DLC
		#const STRAGGLER_A 1052	/* baobab tree */
		#const STRAGGLER_B 1063	/* acacia tree */
		#const STRAGGLER_C 1051	/* dragon tree */
	else
		#const STRAGGLER_A 351	/* palmtree */
		#const STRAGGLER_B 349	/* oaktree */
		#const STRAGGLER_C 411	/* (oak) tree */
	endif

	start_random
		percent_chance 80	#define SUNNY_WEATHER
		percent_chance 10	#define CLOUDY_WEATHER
		percent_chance 0	#define FOGGY_WEATHER
		percent_chance 5	#define RAINY_WEATHER
		percent_chance 5	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 0	#define FOGGY_RAINY_WEATHER
		percent_chance 0	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif DESERT_BIOME
	#define DESERT_ANIMALS

	#const LAND_A 14	/* desert */
	#const LAND_B 6	/* dirt 1 */
	if DE_AVAILABLE
		#const LAND_X 102	/* desert gravel */
		#const LAND_C 42	/* dirt 4 */
		#const LAND_D 100	/* dry grass */
		#const LAND_Z 46	/* quicksand */
		#const ROAD_A 43	/* desert road */
	elseif DLC_NO_WK
		#const LAND_X 45	/* cracked */
		#const LAND_C 42	/* dirt 4 */
		#const LAND_D 41	/* savannah */
		#const LAND_Z 46	/* quicksand */
		#const ROAD_A 43	/* desert road */
	elseif WOLOLOKINGDOMS
		#const LAND_X 38	/* cracked */
		#const LAND_C 6	/* dirt 1 */
		#const LAND_D 27	/* dirt grass foundation */
		#const LAND_Z 40	/* rock */
		#const ROAD_A 25	/* dirt road */
	else
		#const LAND_X 8	/*  dead farm */
		#const LAND_C 6	/* dirt 1 */
		#const LAND_D 27	/* dirt grass foundation */
		#const LAND_Z 40	/* rock */
		#const ROAD_A 25	/* dirt road */
	endif

	if DE_AVAILABLE
		start_random
			percent_chance 50
				#const FOREST_A 48	/* dragon forest */
				#const FOREST_B 88	/* mediteranean forest */
				#const FOREST_C 48	/* dragon forest */
				#const FOREST_FILLER 1052	/* baobab tree */
			percent_chance 50
				#const FOREST_A 50	/* acacia forest */
				#const FOREST_B 48	/* dragon forest */
				#const FOREST_C 48	/* dragon forest */
				#const FOREST_FILLER 1250	/* dead tree */
		end_random
	elseif DLC_NO_WK
		#const FOREST_A 48	/* dragon forest */
		#const FOREST_B 50	/* acacia forest */
		#const FOREST_C 20	/* oak forest */
		#const FOREST_FILLER 1052	/* baobab tree */
	elseif WOLOLOKINGDOMS
		#const FOREST_A 27	/* dirt grass foundation */
		#const FOREST_B 16	/* baobab forest */
		#const FOREST_C 41	/* acacia forest */
		#const FOREST_FILLER 1052	/* baobab tree */
	else
		#const FOREST_A 27	/* dirt grass foundation */
		#const FOREST_B 13	/* palm forest */
		#const FOREST_C 10	/* (oak) forest */
		#const FOREST_FILLER 351	/* palms */
	endif

	start_random
		percent_chance 50	#define WATER_IS_DRY
	end_random

	if WATER_IS_DRY
		if DE_AVAILABLE
			start_random
				percent_chance 50
					#const WATER_A 2	/* beach */
					#const WATER_B 107	/* wet beach */
					#const WATER_C 58	/* water azure */
				percent_chance 25
					#const WATER_A 107	/* wet beach */
					#const WATER_B 91	/* reed forest (wet beach) */
					#const WATER_C 58	/* water azure */
				percent_chance 25
					#const WATER_A 2	/* beach */
					#const WATER_B 107	/* wet beach */
					#const WATER_C 91	/* reed forest (wet beach) */
			end_random
		else
			#const WATER_A 2	/* beach */
			#const WATER_B 2	/* ´beach */
			if DLC_NO_WK	#const WATER_C 58  /* water azure */	else #const WATER_C 1	/* water */ endif
		endif
	else
		if DLC_NO_WK	#const WATER_A 58  /* water azure */	else #const WATER_A 1	/* water */ endif
		#const WATER_B 23	/* ´med water */
		#const WATER_C 22 /* deep water */
	endif

	if WATER_IS_DRY
		if DE_AVAILABLE	#const SHALLOWS_A 107	/* wet beach */	else #const SHALLOWS_A 2	/* beach */	endif
		#const BEACH_A 2	/* beach */
	else
		#const SHALLOWS_A 2	/* beach */
		#define USE_RANDOM_BEACHES
	endif

	if DE_AVAILABLE
		#const STRAGGLER_A 1250	/* dead tree */
		#const STRAGGLER_B 1250	/* dead tree */
		#const STRAGGLER_C 1250	/* dead tree */
	else
		#const STRAGGLER_A 407	/* tree i */
		#const STRAGGLER_B 404	/* tree f */
		#const STRAGGLER_C 405	/* tree g */
	endif

	start_random
		percent_chance 90	#define SUNNY_WEATHER
		percent_chance 5	#define CLOUDY_WEATHER
		percent_chance 0	#define FOGGY_WEATHER
		percent_chance 0	#define RAINY_WEATHER
		percent_chance 5	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 0	#define FOGGY_RAINY_WEATHER
		percent_chance 0	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif HIGH_DESERT_BIOME
	#define ALPINE_ANIMALS

	if DE_AVAILABLE
		start_random
			percent_chance 50
				#const LAND_A 6	/* dirt 1 */
				#const LAND_X 45	/* cracked */
				#const LAND_B 102	/* desert gravel */
				#const LAND_C 102	/* desert gravel */
				#const LAND_D 70	/* gravel */
				#const ROAD_A 103	/* desert gravel road */
			percent_chance 50
				#define GRAVEL_DESERT_BIOME
				#const LAND_A 102	/* desert gravel */
				#const LAND_X 45	/* cracked */
				#const LAND_B 70	/* gravel */
				#const LAND_C 70	/* gravel */
				#const LAND_D 81	/* wet gravel */
				#const ROAD_A 103	/* desert gravel road */
		end_random
	elseif DLC_NO_WK
		#const LAND_A 6	/* dirt 1 */
		#const LAND_X 45	/* cracked */
		#const LAND_B 3	/* dirt 3 */
		#const LAND_C 14	/* desert */
		#const LAND_D 41	/* savannah */
		#const ROAD_A 43	/* desert road */
	elseif WOLOLOKINGDOMS
		#const LAND_A 6	/* dirt 1 */
		#const LAND_X 38	/* cracked */
		#const LAND_B 3	/* dirt 3 */
		#const LAND_C 14	/* desert */
		#const LAND_D 27	/* dirt grass foundation */
		#const ROAD_A 25	/* dirt road */
	else
		#const LAND_A 6	/* dirt 1 */
		#const LAND_X 8	/*  dead farm */
		#const LAND_B 3	/* dirt 3 */
		#const LAND_C 14	/* desert */
		#const LAND_D 27	/* dirt grass foundation */
		#const ROAD_A 25	/* dirt road */
	endif

	#const LAND_Z 40	/* rock */

	if DLC_NO_WK
		#const FOREST_A 48	/* dragon forest */
		#const FOREST_B 19	/* pine forest */
		#const FOREST_C 48	/* dragon forest */
		if DE_AVAILABLE #const FOREST_FILLER 1250	/* dead tree */	else #const FOREST_FILLER 350	/* pine tree */	endif
	else
		#const FOREST_A 19	/* pine forest */
		#const FOREST_B 19	/* pine forest */
		#const FOREST_C 19	/* pine forest */
		#const FOREST_FILLER 350	/* pine tree */
	endif

	start_random
		percent_chance 50	#define WATER_IS_DRY
	end_random

	if WATER_IS_DRY
		if DE_AVAILABLE
			start_random
				percent_chance 50
					#const WATER_A 2	/* beach */
					#const WATER_B 107	/* wet beach */
					#const WATER_C 1	/* water */
				percent_chance 25
					#const WATER_A 107	/* wet beach */
					#const WATER_B 91	/* reed forest (wet beach) */
					#const WATER_C 1	/* water */
				percent_chance 25
					#const WATER_A 2	/* beach */
					#const WATER_B 107	/* wet beach */
					#const WATER_C 91	/* reed forest (wet beach) */
			end_random
		else
			#const WATER_A 2	/* beach */
			#const WATER_B 2	/* beach */
			#const WATER_C 1	/* water */
		endif
	else
		#const WATER_A 1	/* water */
		#const WATER_B 23	/* med water */
		#const WATER_C 22	/* deep water */
	endif

	if GRAVEL_DESERT_BIOME
		if WATER_IS_DRY
			#const SHALLOWS_A 107	/* wet beach */
			#const BEACH_A 2	/* beach */
		else
			#const SHALLOWS_A 108	/* wet gravel beach */
			#const BEACH_A 108	/* wet gravel beach */
		endif
	elseif WATER_IS_DRY
		#const SHALLOWS_A 2	/* beach */
		#const BEACH_A 2	/* beach */
	else
		#const SHALLOWS_A 2	/* beach */
		#define USE_RANDOM_BEACHES
	endif

	if DLC
		#const STRAGGLER_A 1051	/* dragon tree */
		#const STRAGGLER_B 350	/* pinetree */
		#const STRAGGLER_C 1051	/* dragon tree */
	else
		#const STRAGGLER_A 350	/* pinetree */
		#const STRAGGLER_B 350	/* pinetree */
		#const STRAGGLER_C 350	/* pinetree */
	endif

	start_random
		percent_chance 70	#define SUNNY_WEATHER
		percent_chance 25	#define CLOUDY_WEATHER
		percent_chance 0	#define FOGGY_WEATHER
		percent_chance 0	#define RAINY_WEATHER
		percent_chance 5	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 0	#define FOGGY_RAINY_WEATHER
		percent_chance 0	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif MANGROVE_SWAMP_BIOME
	#define SWAMP_ANIMALS

	if DLC_NO_WK
		#const LAND_A 54	/* mangrove shallows */
		#const LAND_X 44	/* grass mud */
		#const LAND_B 62	/* jungle leaves */
		#const LAND_C 60	/* grass jungle */
		#const ROAD_A 61	/* road jungle */
	elseif WOLOLOKINGDOMS
		#const LAND_A 11	/* mangrove shallows */
		#const LAND_X 9	/* grass 3 */
		#const LAND_B 5	/* leaves */
		#const LAND_C 12	/* grass 2 */
		#const ROAD_A 39	/* road fungus */
	else
		#const LAND_A 5	/* leaves */
		#const LAND_X 9	/* grass 3 */
		#const LAND_B 5	/* leaves */
		#const LAND_C 12	/* grass 2 */
		#const ROAD_A 39	/* road fungus */
	endif

	#const LAND_D 12	/* grass 2 */

	if DE_AVAILABLE	#const LAND_Z 101	/* bogland */
	else #const LAND_Z 40	/* rock */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 75
				#const FOREST_A 55	/* mangrove */
				#const FOREST_B 55	/* mangrove */
				#const FOREST_C 55	/* mangrove */
				#const FOREST_FILLER 1146	/* rainforest tree */
			percent_chance 25	/* reed swamp */
				#const FOREST_A 90	/* reed forest (shallows) */
				#const FOREST_B 90	/* reed forest (shallows) */
				#const FOREST_C 90	/* reed forest (shallows) */
				#const FOREST_FILLER 1144	/* mangrove tree */
		end_random
	elseif DLC_NO_WK
		#const FOREST_A 55	/* mangrove */
		#const FOREST_B 55	/* mangrove */
		#const FOREST_C 55	/* mangrove */
		#const FOREST_FILLER 1146	/* rainforest tree */
	elseif WOLOLOKINGDOMS
		#const FOREST_A 20	/* mangrove forest */
		#const FOREST_B 20	/* mangrove forest */
		#const FOREST_C 20	/* mangrove forest */
		#const FOREST_FILLER 1146	/* rainforest tree */
	else
		#const FOREST_A 17	/* jungle */
		#const FOREST_B 17	/* jungle */
		#const FOREST_C 17	/* jungle */
		#const FOREST_FILLER 414	/* jungle tree */
	endif

	if DLC_NO_WK
		#const WATER_A 58	/* water azure */
		#const WATER_B 23	/* med water */
		#const WATER_C 57	/* very deep water */
		#const SHALLOWS_A 54	/* mangrove shallows */
	elseif WOLOLOKINGDOMS
		#const WATER_A 1	/* water */
		#const WATER_B 23	/* med water */
		#const WATER_C 22	/* deep water */
		#const SHALLOWS_A 11	/* mangrove shallows */
	else
		#const WATER_A 4	/* shallows */
		#const WATER_B 4	/* shallows */
		#const WATER_C 1	/* water */
		#const SHALLOWS_A 4	/* shallows */
	endif

	if DLC_NO_WK	#const BEACH_A 52	/* beach vegetation */
	else	#const BEACH_A 2	/* beach */	endif

	if DLC
		#const STRAGGLER_A 1144	/* mangrove tree */
		#const STRAGGLER_B 1144	/* mangrove tree */
		#const STRAGGLER_C 1144	/* mangrove tree */
	else
		#const STRAGGLER_A 414	/* jungletree */
		#const STRAGGLER_B 414	/* jungletree */
		#const STRAGGLER_C 414	/* jungletree */
	endif

	start_random
		percent_chance 0	#define SUNNY_WEATHER
		percent_chance 0	#define CLOUDY_WEATHER
		percent_chance 0	#define FOGGY_WEATHER
		percent_chance 30	#define RAINY_WEATHER
		percent_chance 20	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 0	#define FOGGY_RAINY_WEATHER
		percent_chance 0	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 50	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

elseif WASTELAND_BIOME
	#define ARCTIC_ANIMALS

	if DE_AVAILABLE
		#const LAND_A 72	/* snow underbrush */
		#const LAND_X 82	/* wet rock buildable */
		#const LAND_B 82	/* wet rock buildable */
		#const LAND_C 82	/* snow underbrush */
		#const LAND_D 47	/* black */
		#const LAND_Z 101	/* bogland */
		#const FOREST_A 106	/* dead forest */
		#const FOREST_B 106	/* dead forest */
		#const FOREST_C 106	/* dead forest */
		#const FOREST_FILLER 1250	/* dead tree */
		#const WATER_A 96	/* brown water */
		#const WATER_B 95	/* green water */
		#const WATER_C 96	/* brown water */
		#const SHALLOWS_A 107	/* wet beach */
		#const BEACH_A 109	/* wet rock beach */
		#const ROAD_A 38	/* road snow */
	else
		#const LAND_A 5	/* leaves */
		#const LAND_X 8	/* dead farm */
		#const LAND_B 27	/* dirt grass foundation */
		#const LAND_C 9	/* grass 3 */
		#const LAND_D 27	/*  dirt grass foundation */
		#const LAND_Z 40	/* rock */
		#const FOREST_A 20	/* oak forest */
		#const FOREST_B 19	/* pine forest */
		#const FOREST_C 10	/* forest (also oak) */
		#const FOREST_FILLER 349	/* oak */
		#const WATER_A 1	/* water */
		#const WATER_B 23	/* med water */
		#const WATER_C 22	/* deep water */
		#const SHALLOWS_A 4	/* shallows */
		#const BEACH_A 2	/* beach */
		#const ROAD_A 39	/* road fungus */
	endif

	if DE_AVAILABLE
		#const STRAGGLER_A 1250	/* dead tree */
		#const STRAGGLER_B 1250	/* dead tree */
		#const STRAGGLER_C 1250	/* dead tree */
	else
		#const STRAGGLER_A 407	/* tree i */
		#const STRAGGLER_B 404	/* tree f */
		#const STRAGGLER_C 405	/* tree g */
	endif

	start_random
		percent_chance 0	#define SUNNY_WEATHER
		percent_chance 0	#define CLOUDY_WEATHER
		percent_chance 0	#define FOGGY_WEATHER
		percent_chance 0	#define RAINY_WEATHER
		percent_chance 50	#define THUNDERSTORM_WEATHER
		percent_chance 0	#define SNOWY_WEATHER
		percent_chance 0	#define FOGGY_RAINY_WEATHER
		percent_chance 50	#define FOGGY_SNOWY_WEATHER
		percent_chance 0	#define REDDISH_WEATHER
		percent_chance 0	#define GREENISH_WEATHER
		percent_chance 0	#define RANDOM_WEATHER
	end_random

else  /* AoC temperate fallback here - just in case something goes wrong */
	#const LAND_A 0	/* grass 1 */
	#const LAND_X 6	/* dirt 1 */
	#const LAND_B 9	/* grass 3 */
	if WOLOLOKINGDOMS #const LAND_C 27 else #const LAND_C 11	/* dirt 2 */ endif
	#const LAND_D 12	/* grass 2 */
	#const LAND_Z 40	/* road koth */
	#const ROAD_A 39	/* road fungus */

	#const FOREST_A 20	/* oak forest */
	#const FOREST_B 19	/* pine forest */
	#const FOREST_C 10	/* forest (also oak) */

	#const WATER_A 1	/* water */
	#const WATER_B 23	/* med water */
	#const WATER_C 22	/* deep water */

	#const SHALLOWS_A 4	/* shallows */
	#const BEACH_A 2	/* beach */

	#const STRAGGLER_A 349	/* oak tree */
	#const STRAGGLER_B 350	/* pine tree */
	#const STRAGGLER_C 349	/* oak tree */

	start_random
		percent_chance 70	#define SUNNY_WEATHER
		percent_chance 9	#define CLOUDY_WEATHER
		percent_chance 2	#define FOGGY_WEATHER
		percent_chance 5	#define RAINY_WEATHER
		percent_chance 8	#define THUNDERSTORM_WEATHER
		percent_chance 1	#define SNOWY_WEATHER
		percent_chance 1	#define FOGGY_RAINY_WEATHER
		percent_chance 1	#define FOGGY_SNOWY_WEATHER
		percent_chance 1	#define REDDISH_WEATHER
		percent_chance 1	#define GREENISH_WEATHER
		percent_chance 1	#define RANDOM_WEATHER
	end_random
endif

/* =================================================================================================== */
/*  standard water types - moved it here because it is often the same code */
if USE_DEFAULT_WATER
	if DLC_NO_WK
		start_random
			percent_chance 50	#const WATER_A 1	/* water */
			percent_chance 50	#const WATER_A 58	/* water azure */
		end_random
		start_random
			percent_chance 50	#const WATER_C 22	/* deep water */
			percent_chance 50	#const WATER_C 57	/* very deep water */
		end_random
	else
		#const WATER_A 1	/* water */
		#const WATER_C 22	/* deep water */
	endif
	#const WATER_B 23	/* med water */
endif

if USE_RANDOM_SHALLOWS
	if DLC_NO_WK
		start_random
			percent_chance 50	#const SHALLOWS_A 4	/* shallows */
			percent_chance 50	#const SHALLOWS_A 59	/* azure shallows */
		end_random
	else #const SHALLOWS_A 4	/* shallows */
	endif
endif

/* =================================================================================================== */
/*  standard beach types - moved it here because it is almost always the same code */
if USE_RANDOM_BEACHES
	if DE_AVAILABLE
		start_random
			percent_chance 16	#const BEACH_A 2	/* beach */
			percent_chance 14	#const BEACH_A 51	/* beach2 */
			percent_chance 14	#const BEACH_A 52	/* beach3 */
			percent_chance 14	#const BEACH_A 53	/* beach4 */
			percent_chance 14	#const BEACH_A 107	/* wet beach */
			percent_chance 14	#const BEACH_A 108	/* wet gravel beach */
			percent_chance 14	#const BEACH_A 109	/* wet rock beach */
		end_random
	elseif DLC_NO_WK
		start_random
			percent_chance 25	#const BEACH_A 2	/* beach */
			percent_chance 25	#const BEACH_A 51	/* beach2 */
			percent_chance 25	#const BEACH_A 52	/* beach3 */
			percent_chance 25	#const BEACH_A 53	/* beach4 */
		end_random
	else	#const BEACH_A 2	/* beach */ endif
endif


/* =================================================================================================== */
/* choose animals and berries */
if ARCTIC_ANIMALS

	#const BERRY_TYPE 59	/* forage bush */

	if DLC
		start_random
			percent_chance 50	#const SHEEP_TYPE 594	/* sheep */
			percent_chance 50	#const SHEEP_TYPE 1060	/* goat */
		end_random
	else	#const SHEEP_TYPE 594	/* sheep */ endif

	#const BOAR_TYPE 48	/* boar */

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const DEER_TYPE 1239	/* ibex */
			percent_chance 50	#const DEER_TYPE 65	/* deer */
		end_random
	else	#const DEER_TYPE 65	/* deer */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const PREDATOR_TYPE 1241	/* snow leopard */
			percent_chance 25	#const PREDATOR_TYPE 486	/* bear */
			percent_chance 25	#const PREDATOR_TYPE 126	/* wolf */
		end_random
	elseif DLC
		start_random
			percent_chance 50	#const PREDATOR_TYPE 486	/* bear */
			percent_chance 50	#const PREDATOR_TYPE 126	/* wolf */
		end_random
	else 	#const PREDATOR_TYPE 126	/* wolf */ endif

	if DLC
		start_random
			percent_chance 33	#const BIRD_TYPE 96	/* hawk */
			percent_chance 33	if DE_AVAILABLE #const BIRD_TYPE 1305 else #const BIRD_TYPE 917	/* vulture */ endif
			percent_chance 34	#const BIRD_TYPE 1056	/* falcon */
		end_random
	else	#const BIRD_TYPE 96	/* hawk */ endif

	#const FISH_A 456	/* salmon */
	#const FISH_B 457	/* tuna */
	#const SHOREFISH_C 69	/* shore fish */

	start_random
		percent_chance 50	#const DEEPFISH_D 450	/* marlin 1 */
		percent_chance 50	#const DEEPFISH_D 451	/* marlin 2 */
	end_random

elseif SNOW_ANIMALS

	#const BERRY_TYPE 59	/* forage bush */

	if DE_AVAILABLE
		start_random
			percent_chance 34	#const SHEEP_TYPE 594	/* sheep */
			percent_chance 33	#const SHEEP_TYPE 1060	/* goat */
			percent_chance 33	#const SHEEP_TYPE 1243	/* goose */
		end_random
	elseif DLC
		start_random
			percent_chance 50	#const SHEEP_TYPE 594	/* sheep */
			percent_chance 50	#const SHEEP_TYPE 1060	/* goat */
		end_random
	else	#const SHEEP_TYPE 594	/* sheep */ endif

	#const BOAR_TYPE 48	/* boar */

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const DEER_TYPE 1239	/* ibex */
			percent_chance 50	#const DEER_TYPE 65	/* deer */
		end_random
	else	#const DEER_TYPE 65	/* deer */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 34	#const PREDATOR_TYPE 1241	/* snow leopard */
			percent_chance 33	#const PREDATOR_TYPE 486	/* bear */
			percent_chance 33	#const PREDATOR_TYPE 126	/* wolf */
		end_random
	elseif DLC
		start_random
			percent_chance 50	#const PREDATOR_TYPE 486	/* bear */
			percent_chance 50	#const PREDATOR_TYPE 126	/* wolf */
		end_random
	else 	#const PREDATOR_TYPE 126	/* wolf */ endif

	if DLC
		start_random
			percent_chance 33	#const BIRD_TYPE 96		/* hawk */
			percent_chance 33	if DE_AVAILABLE #const BIRD_TYPE 1305 else #const BIRD_TYPE 917	/* vulture */ endif
			percent_chance 34	#const BIRD_TYPE 1056	/* falcon */
		end_random
	else	#const BIRD_TYPE 96	/* hawk */ endif

	#const FISH_A 456	/* salmon */

	start_random
		percent_chance 75	#const FISH_B 457	/* tuna */
		percent_chance 25	#const FISH_B 53	/* perch */
	end_random

	#const SHOREFISH_C 69	/* shore fish */

	start_random
		percent_chance 50	#const DEEPFISH_D 450	/* marlin 1 */
		percent_chance 50	#const DEEPFISH_D 451	/* marlin 2 */
	end_random

elseif ALPINE_ANIMALS

	#const BERRY_TYPE 59	/* forage bush */

	if DE_AVAILABLE
		start_random
			percent_chance 17	#const SHEEP_TYPE 305	/* llama */
			percent_chance 17	#const SHEEP_TYPE 594	/* sheep */
			percent_chance 5	#const SHEEP_TYPE 705	#define SHEEP_IS_COW	/* cow */
			percent_chance 4	#const SHEEP_TYPE 1596	#define SHEEP_IS_COW	/* cow B */
			percent_chance 4	#const SHEEP_TYPE 1598	#define SHEEP_IS_COW	/* cow C */
			percent_chance 4	#const SHEEP_TYPE 1600	#define SHEEP_IS_COW	/* cow D */
			percent_chance 17	#const SHEEP_TYPE 1060	/* goat */
			percent_chance 16	#const SHEEP_TYPE 1243	/* goose */
			percent_chance 16	#const SHEEP_TYPE 1245	/* pig */
		end_random
	elseif DLC
		start_random
			percent_chance 25	#const SHEEP_TYPE 305	/* llama */
			percent_chance 25	#const SHEEP_TYPE 594	/* sheep */
			percent_chance 25	#const SHEEP_TYPE 705	#define SHEEP_IS_COW	/* cow */
			percent_chance 25	#const SHEEP_TYPE 1060	/* goat */
		end_random
	else	#const SHEEP_TYPE 594	/* sheep */ endif

	#const BOAR_TYPE 48	/* boar */

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const DEER_TYPE 1239	/* ibex */
			percent_chance 50	#const DEER_TYPE 65		/* deer */
		end_random
	else	#const DEER_TYPE 65	/* deer */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 10	#const PREDATOR_TYPE 1241	/* snow leopard */
			percent_chance 45	#const PREDATOR_TYPE 486	/* bear */
			percent_chance 45	#const PREDATOR_TYPE 126	/* wolf */
		end_random
	elseif DLC
		start_random
			percent_chance 50	#const PREDATOR_TYPE 486	/* bear */
			percent_chance 50	#const PREDATOR_TYPE 126	/* wolf */
		end_random
	else 	#const PREDATOR_TYPE 126	/* wolf */ endif

	if DLC
		start_random
			percent_chance 33	#const BIRD_TYPE 96	/* hawk */
			percent_chance 33	if DE_AVAILABLE #const BIRD_TYPE 1305 else #const BIRD_TYPE 917	/* vulture */ endif
			percent_chance 34	#const BIRD_TYPE 1056	/* falcon */
		end_random
	else	#const BIRD_TYPE 96	/* hawk */ endif

	#const FISH_A 456	/* salmon */

	start_random
		percent_chance 75	#const FISH_B 457	/* tuna */
		percent_chance 25	#const FISH_B 53	/* perch */
	end_random

	#const SHOREFISH_C 69	/* shore fish */

	start_random
		percent_chance 50	#const DEEPFISH_D 450	/* marlin 1 */
		percent_chance 50	#const DEEPFISH_D 451	/* marlin 2 */
	end_random

elseif TEMPERATE_ANIMALS

	if DLC
		start_random
			percent_chance 50 	#const	BERRY_TYPE 59	/* forage bush */
			percent_chance 50 	#const	BERRY_TYPE 1059	/* fruit bush */
		end_random
	else 	#const	BERRY_TYPE 59	/* forage bush */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 12	#const SHEEP_TYPE 305	/* llama */
			percent_chance 12	#const SHEEP_TYPE 594	/* sheep */
			percent_chance 12	#const SHEEP_TYPE 833	/* turkey */
			percent_chance 3	#const SHEEP_TYPE 705	#define SHEEP_IS_COW	/* cow */
			percent_chance 3	#const SHEEP_TYPE 1596	#define SHEEP_IS_COW	/* cow B */
			percent_chance 3	#const SHEEP_TYPE 1598	#define SHEEP_IS_COW	/* cow C */
			percent_chance 3	#const SHEEP_TYPE 1600	#define SHEEP_IS_COW	/* cow D */
			percent_chance 13	#const SHEEP_TYPE 1142	#define SHEEP_IS_COW	/* water buffalo */
			percent_chance 13	#const SHEEP_TYPE 1060	/* goat */
			percent_chance 13	#const SHEEP_TYPE 1243	/* goose */
			percent_chance 13	#const SHEEP_TYPE 1245	/* pig */
		end_random
	elseif DLC
		start_random
			percent_chance 16	#const SHEEP_TYPE 305	/* llama */
			percent_chance 20	#const SHEEP_TYPE 594	/* sheep */
			percent_chance 16	#const SHEEP_TYPE 833	/* turkey */
			percent_chance 16	#const SHEEP_TYPE 705	#define SHEEP_IS_COW	/* cow */
			percent_chance 16	#const SHEEP_TYPE 1142	#define SHEEP_IS_COW	/* water buffalo */
			percent_chance 16	#const SHEEP_TYPE 1060	/* goat */
		end_random
	else
		start_random
			percent_chance 50	#const SHEEP_TYPE 594	/* sheep */
			percent_chance 50	#const SHEEP_TYPE 833	/* turkey */
		end_random
	endif

	start_random
		percent_chance 50	#const BOAR_TYPE 48		/* boar */
		percent_chance 50	#const BOAR_TYPE 822	/* javelina */
	end_random

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const DEER_TYPE 1239	/* ibex */
			percent_chance 50	#const DEER_TYPE 65	/* deer */
		end_random
	else	#const DEER_TYPE 65	/* deer */ endif

	if DLC
		start_random
			percent_chance 50	#const PREDATOR_TYPE 486	/* bear */
			percent_chance 50	#const PREDATOR_TYPE 126	/* wolf */
		end_random
	else 	#const PREDATOR_TYPE 126	/* wolf */ endif

	if DLC
		start_random
			percent_chance 25	#const BIRD_TYPE 96		/* hawk */
			percent_chance 25	if DE_AVAILABLE #const BIRD_TYPE 1305 else #const BIRD_TYPE 917	/* vulture */ endif
			percent_chance 25	#const BIRD_TYPE 1028	/* stork */
			percent_chance 25	#const BIRD_TYPE 1056	/* falcon */
		end_random
	else	#const BIRD_TYPE 96	/* hawk */ endif

	start_random
		percent_chance 50
			#const FISH_A 456	/* salmon */
			#const FISH_B 457	/* tuna */
		percent_chance 50
			#const FISH_A 458	/* snapper */
			#const FISH_B 455	/* dorado */
	end_random

	if DLC
		start_random
			percent_chance 50	#const SHOREFISH_C 69	/* shore fish */
			percent_chance 50	#const SHOREFISH_C 1141	/* box turtles */
		end_random
	else #const SHOREFISH_C 69	/* shore fish */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 34	#const DEEPFISH_D 61	/* dolphin */
			percent_chance 33	#const DEEPFISH_D 450	/* marlin 1 */
			percent_chance 33	#const DEEPFISH_D 451	/* marlin 2 */
		end_random
	else
		start_random
			percent_chance 50	#const DEEPFISH_D 450	/* marlin 1 */
			percent_chance 50	#const DEEPFISH_D 451	/* marlin 2 */
		end_random
	endif

elseif JUNGLE_ANIMALS

	if DLC
		start_random
			percent_chance 50 	#const	BERRY_TYPE 59	/* forage bush */
			percent_chance 50 	#const	BERRY_TYPE 1059	/* fruit bush */
		end_random
	else 	#const	BERRY_TYPE 59	/* forage bush */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 25	#const SHEEP_TYPE 833	/* turkey */
			percent_chance 25	#const SHEEP_TYPE 1142	#define SHEEP_IS_COW	/* water buffalo */
			percent_chance 25	#const SHEEP_TYPE 1243	/* goose */
			percent_chance 25	#const SHEEP_TYPE 1245	/* pig */
		end_random
	elseif DLC
		start_random
			percent_chance 50	#const SHEEP_TYPE 833	/* turkey */
			percent_chance 50	#const SHEEP_TYPE 1142	#define SHEEP_IS_COW	/* water buffalo */
		end_random
	else	#const SHEEP_TYPE 833	/* turkey */ endif

	if DLC
		start_random
			percent_chance 25	#const BOAR_TYPE 48	/* boar */
			percent_chance 25	#const BOAR_TYPE 822	/* javelina */
			percent_chance 25	#const BOAR_TYPE 1139	/* rhino */
			percent_chance 25	if WOLOLOKINGDOMS #const BOAR_TYPE 412 elseif DE_AVAILABLE #const BOAR_TYPE 1301 else #const BOAR_TYPE 936	/* elephant */ endif
		end_random
	else
		start_random
			percent_chance 50	#const BOAR_TYPE 48	/* boar */
			percent_chance 50	#const BOAR_TYPE 822	/* javelina */
		end_random
	endif

	#const DEER_TYPE 65	/* deer */

	if DLC
		start_random
			percent_chance 25	#const PREDATOR_TYPE 812	/* jaguar */
			percent_chance 25	#const PREDATOR_TYPE 1031	/* crocodile */
			percent_chance 25	#const PREDATOR_TYPE 1135	/* komodo */
			percent_chance 25	#const PREDATOR_TYPE 1137	/* tiger */
		end_random
	else 	#const PREDATOR_TYPE 812	/* jaguar */ endif

	if DLC
		start_random
			percent_chance 5	#const BIRD_TYPE 96	/* hawk */
			percent_chance 80	#const BIRD_TYPE 816	/* macaw */
			percent_chance 5	if DE_AVAILABLE #const BIRD_TYPE 1305 else #const BIRD_TYPE 917	/* vulture */ endif
			percent_chance 5	#const BIRD_TYPE 1028	/* stork */
			percent_chance 5	#const BIRD_TYPE 1056	/* falcon */
		end_random
	else
		start_random
		percent_chance 20	#const BIRD_TYPE 96	/* hawk */
		percent_chance 80	#const BIRD_TYPE 816	/* macaw */
		end_random
	endif

	#const FISH_A 458	/* snapper */
	#const FISH_B 455	/* dorado */

	if DLC
		start_random
			percent_chance 20	#const SHOREFISH_C 69	/* shore fish */
			percent_chance 80	#const SHOREFISH_C 1141	/* box turtles */
		end_random
	else #const SHOREFISH_C 69	/* shore fish */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 34	#const DEEPFISH_D 61	/* dolphin */
			percent_chance 33	#const DEEPFISH_D 450	/* marlin 1 */
			percent_chance 33	#const DEEPFISH_D 451	/* marlin 2 */
		end_random
	else
		start_random
			percent_chance 50	#const DEEPFISH_D 450	/* marlin 1 */
			percent_chance 50	#const DEEPFISH_D 451	/* marlin 2 */
		end_random
	endif

elseif TROPICAL_ANIMALS

	if DLC
		start_random
			percent_chance 50 	#const	BERRY_TYPE 59	/* forage bush */
			percent_chance 50 	#const	BERRY_TYPE 1059	/* fruit bush */
		end_random
	else 	#const	BERRY_TYPE 59	/* forage bush */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 34	#const SHEEP_TYPE 833	/* turkey */
			percent_chance 33	#const SHEEP_TYPE 1243	/* goose */
			percent_chance 33	#const SHEEP_TYPE 1245	/* pig */
		end_random
	else	#const SHEEP_TYPE 833	/* turkey */ endif

	start_random
		percent_chance 50	#const BOAR_TYPE 48	/* boar */
		percent_chance 50	#const BOAR_TYPE 822	/* javelina */
	end_random

	#const DEER_TYPE 65	/* deer */

	if DLC
		start_random
			percent_chance 25	#const PREDATOR_TYPE 812	/* jaguar */
			percent_chance 25	#const PREDATOR_TYPE 1031	/* crocodile */
			percent_chance 25	#const PREDATOR_TYPE 1135	/* komodo */
			percent_chance 25	#const PREDATOR_TYPE 1137	/* tiger */
		end_random
	else 	#const PREDATOR_TYPE 812	/* jaguar */ endif

	if DLC
		start_random
			percent_chance 5	#const BIRD_TYPE 96	/* hawk */
			percent_chance 80	#const BIRD_TYPE 816	/* macaw */
			percent_chance 5	if DE_AVAILABLE #const BIRD_TYPE 1305 else #const BIRD_TYPE 917	/* vulture */ endif
			percent_chance 5	#const BIRD_TYPE 1028	/* stork */
			percent_chance 5	#const BIRD_TYPE 1056	/* falcon */
		end_random
	else
		start_random
		percent_chance 20	#const BIRD_TYPE 96	/* hawk */
		percent_chance 80	#const BIRD_TYPE 816	/* macaw */
		end_random
	endif

	#const FISH_A 458	/* snapper */
	#const FISH_B 455	/* dorado */

	if DLC
		start_random
			percent_chance 80	#const SHOREFISH_C 69	/* shore fish */
			percent_chance 20	#const SHOREFISH_C 1141	/* box turtles */
		end_random
	else #const SHOREFISH_C 69	/* shore fish */ endif

	if DE_AVAILABLE
		#const DEEPFISH_D 61	/* dolphin */
	else
		start_random
			percent_chance 50	#const DEEPFISH_D 450	/* marlin 1 */
			percent_chance 50	#const DEEPFISH_D 451	/* marlin 2 */
		end_random
	endif

elseif SAVANNAH_ANIMALS

	if DLC
		start_random
			percent_chance 50 	#const	BERRY_TYPE 59	/* forage bush */
			percent_chance 50 	#const	BERRY_TYPE 1059	/* fruit bush */
		end_random
	else 	#const	BERRY_TYPE 59	/* forage bush */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 20	#const SHEEP_TYPE 594	/* sheep */
			percent_chance 20	#const SHEEP_TYPE 1142	#define SHEEP_IS_COW	/* water buffalo */
			percent_chance 20	#const SHEEP_TYPE 1060	/* goat */
			percent_chance 20	#const SHEEP_TYPE 1243	/* goose */
			percent_chance 20	#const SHEEP_TYPE 1245	/* pig */
		end_random
	elseif DLC
		start_random
			percent_chance 33	#const SHEEP_TYPE 594	/* sheep */
			percent_chance 34	#const SHEEP_TYPE 1142	#define SHEEP_IS_COW	/* water buffalo */
			percent_chance 33	#const SHEEP_TYPE 1060	/* goat */
		end_random
	else	#const SHEEP_TYPE 594	/* sheep */ endif

	if DLC
		start_random
			percent_chance 5	#const BOAR_TYPE 48	/* boar */
			percent_chance 45	#const BOAR_TYPE 1139	/* rhino */
			percent_chance 50	if WOLOLOKINGDOMS #const BOAR_TYPE 412 elseif DE_AVAILABLE #const BOAR_TYPE 1301 else #const BOAR_TYPE 936	/* elephant */ endif
		end_random
	else	#const BOAR_TYPE 48	/* boar */ endif

	if DLC
		start_random
			percent_chance 50	#const DEER_TYPE 1019	/* zebra */
			percent_chance 50	#const DEER_TYPE 1026	/* ostrich */
		end_random
	else #const DEER_TYPE 65	/* deer */ endif

	if DLC
		start_random
			percent_chance 80	#const PREDATOR_TYPE 1029	/* lion */
			percent_chance 20	#const PREDATOR_TYPE 1031	/* crocodile */
		end_random
	else 	#const PREDATOR_TYPE 126	/* wolf */ endif

	if DLC
		start_random
			percent_chance 20	#const BIRD_TYPE 96	/* hawk */
			percent_chance 20	#const BIRD_TYPE 816	/* macaw */
			percent_chance 20	if DE_AVAILABLE #const BIRD_TYPE 1305 else #const BIRD_TYPE 917	/* vulture */ endif
			percent_chance 20	#const BIRD_TYPE 1028	/* stork */
			percent_chance 20	#const BIRD_TYPE 1056	/* falcon */
		end_random
	else
		start_random
		percent_chance 50	#const BIRD_TYPE 96	/* hawk */
		percent_chance 50	#const BIRD_TYPE 816	/* macaw */
		end_random
	endif

	#const FISH_A 458	/* snapper */
	#const FISH_B 455	/* dorado */

	if DLC
		start_random
			percent_chance 50	#const SHOREFISH_C 69	/* shore fish */
			percent_chance 50	#const SHOREFISH_C 1141	/* box turtles */
		end_random
	else #const SHOREFISH_C 69	/* shore fish */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 34	#const DEEPFISH_D 61	/* dolphin */
			percent_chance 33	#const DEEPFISH_D 450	/* marlin 1 */
			percent_chance 33	#const DEEPFISH_D 451	/* marlin 2 */
		end_random
	else
		start_random
			percent_chance 50	#const DEEPFISH_D 450	/* marlin 1 */
			percent_chance 50	#const DEEPFISH_D 451	/* marlin 2 */
		end_random
	endif

elseif DESERT_ANIMALS

	if DLC
		start_random
			percent_chance 20 	#const	BERRY_TYPE 59	/* forage bush */
			percent_chance 80 	#const	BERRY_TYPE 1059	/* fruit bush */
		end_random
	else 	#const	BERRY_TYPE 59	/* forage bush */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const SHEEP_TYPE 1245	/* pig */
			percent_chance 50	#const SHEEP_TYPE 1060	/* goat */
		end_random
	elseif DLC	#const SHEEP_TYPE 1060	/* goat */
	else	#const SHEEP_TYPE 594	/* sheep */ endif

	if DLC
		start_random
			percent_chance 5	#const BOAR_TYPE 48	/* boar */
			percent_chance 5	#const BOAR_TYPE 1139	/* rhino */
			percent_chance 80	if WOLOLOKINGDOMS #const BOAR_TYPE 412 elseif DE_AVAILABLE #const BOAR_TYPE 1301 else #const BOAR_TYPE 936	/* elephant */ endif
		end_random
	else	#const BOAR_TYPE 48	/* boar */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 50	#const DEER_TYPE 1026	/* ostrich */
			percent_chance 50	#const DEER_TYPE 1239	/* ibex */
		end_random
	elseif DLC	#const DEER_TYPE 1026	/* ostrich */
	else #const DEER_TYPE 65	/* deer */ endif

	if DLC	#const PREDATOR_TYPE 1029	/* lion */
	else 	#const PREDATOR_TYPE 126	/* wolf */ endif

	if DLC
		start_random
			percent_chance 10	#const BIRD_TYPE 96	/* hawk */
			percent_chance 75	if DE_AVAILABLE #const BIRD_TYPE 1305 else #const BIRD_TYPE 917	/* vulture */ endif
			percent_chance 5	#const BIRD_TYPE 1028	/* stork */
			percent_chance 10	#const BIRD_TYPE 1056	/* falcon */
		end_random
	else	#const BIRD_TYPE 96	/* hawk */ endif

	#const FISH_A 458	/* snapper */
	#const FISH_B 455	/* dorado */

	#const SHOREFISH_C 69	/* shore fish */

	if DE_AVAILABLE
		start_random
			percent_chance 34	#const DEEPFISH_D 61	/* dolphin */
			percent_chance 33	#const DEEPFISH_D 450	/* marlin 1 */
			percent_chance 33	#const DEEPFISH_D 451	/* marlin 2 */
		end_random
	else
		start_random
			percent_chance 50	#const DEEPFISH_D 450	/* marlin 1 */
			percent_chance 50	#const DEEPFISH_D 451	/* marlin 2 */
		end_random
	endif


elseif SWAMP_ANIMALS

	if DLC
		start_random
			percent_chance 50 	#const	BERRY_TYPE 59	/* forage bush */
			percent_chance 50 	#const	BERRY_TYPE 1059	/* fruit bush */
		end_random
	else 	#const	BERRY_TYPE 59	/* forage bush */ endif

	if DE_AVAILABLE
		start_random
			percent_chance 25	#const SHEEP_TYPE 833	/* turkey */
			percent_chance 25	#const SHEEP_TYPE 1142	#define SHEEP_IS_COW	/* water buffalo */
			percent_chance 25	#const SHEEP_TYPE 1243	/* goose */
			percent_chance 25	#const SHEEP_TYPE 1245	/* pig */
		end_random
	elseif DLC
		start_random
			percent_chance 50	#const SHEEP_TYPE 833	/* turkey */
			percent_chance 50	#const SHEEP_TYPE 1142	#define SHEEP_IS_COW	/* water buffalo */
		end_random
	else	#const SHEEP_TYPE 833	/* turkey */ endif

	start_random
		percent_chance 50	#const BOAR_TYPE 48	/* boar */
		percent_chance 50	#const BOAR_TYPE 822	/* javelina */
	end_random

	#const DEER_TYPE 65	/* deer */

	if DLC	#const PREDATOR_TYPE 1031	/* crocodile */
	else 	#const PREDATOR_TYPE 812	/* jaguar */ endif

	if DLC
		start_random
			percent_chance 50	#const BIRD_TYPE 816	/* macaw */
			percent_chance 50	#const BIRD_TYPE 1028	/* stork */
		end_random
	else	#const BIRD_TYPE 816	/* macaw */ endif

	#const FISH_A 458	/* snapper */
	#const FISH_B 455	/* dorado */

	if DLC	#const SHOREFISH_C 1141	/* box turtles */
	else #const SHOREFISH_C 69	/* shore fish */ endif

	if DE_AVAILABLE	#const DEEPFISH_D 61	/* dolphin */
	else
		start_random
			percent_chance 50	#const DEEPFISH_D 450	/* marlin 1 */
			percent_chance 50	#const DEEPFISH_D 451	/* marlin 2 */
		end_random
	endif

else /* fallback - just in case something goes wrong */
	#const BERRY_TYPE 59	/* forage bush */
	#const SHEEP_TYPE 594	/* sheep */
	#const BOAR_TYPE 48	/* boar */
	#const DEER_TYPE 65	/* deer */
	#const PREDATOR_TYPE 126	/* wolf */
	#const BIRD_TYPE 96	/* hawk */
	#const FISH_A 455	/* dorado */
	#const FISH_B 53	/* perch has slightly less food than other fish */
	#const SHOREFISH_C 69	/* shore fish */
	#const DEEPFISH_D 450	/* marlin 1 */
endif


/* =================================================================================================== */
<PLAYER_SETUP>
/* nomad resources, grouped by team, UP weather, and AI info are implemented here */

/* randomly choose an architecture style for gaia */
if DE_AVAILABLE
	set_gaia_civilization rnd(0,35)
endif

/* masking unit line of sight: set to 0 to avoid boar lure interference. */
if UP_EXTENSION
	#const SET_ATTRIBUTE 0
	#const ATTR_LINE_OF_SIGHT 1
endif
#const MASKING_UNIT 127	/* old explorer */

if UP_EXTENSION
	effect_amount SET_ATTRIBUTE MASKING_UNIT ATTR_LINE_OF_SIGHT 0
endif

/* battle royale will place a packed town center for each player */
if DE_AVAILABLE
	if BATTLE_ROYALE	#define USE_BATTLE_ROYALE	#define USE_NOMAD_SETUP
	elseif USE_NOMAD_SETUP
		start_random
			percent_chance 50	#define USE_BATTLE_ROYALE
		end_random
	endif
endif

/* add the cost of a town center to the starting resources */
/* always happens on nomad maps, and occasionally on non-nomad maps too */
if USE_BATTLE_ROYALE
elseif USE_NOMAD_SETUP	nomad_resources
elseif USE_STANDARD_RESOURCES
else
	start_random
		percent_chance 5	nomad_resources
	end_random
endif

/* could add proper direct placement support later */
/* highly ecperimental */
if ALLOW_FULL_RANDOM_PLACEMENT
	if RND_AVAILABLE	/* a check for direct-placement support */
		start_random
			percent_chance 10	#define USE_FULL_RANDOM_PLACEMENT 	#define NO_PLAYER_LAND_BORDERS	#define NO_CENTRAL_LAND	#define NO_CORNER_LANDS
		end_random
	endif
endif

if USE_FULL_RANDOM_PLACEMENT	direct_placement
elseif USE_TEAM_GROUPING	grouped_by_team
else					random_placement
endif




if UP_EXTENSION
if ALLOW_UP_WEATHER
if ALLOW_UP_TERRAIN_SHADING
	if SUNNY_WEATHER		weather_type 0 0 0 0
	elseif CLOUDY_WEATHER	weather_type 0 16 33 0
	elseif FOGGY_WEATHER	weather_type 0 255 132 0
	elseif RAINY_WEATHER
		start_random
			percent_chance 50	weather_type 2 0 0 1
			percent_chance 50	weather_type -2 0 0 -1
		end_random
	elseif THUNDERSTORM_WEATHER
		start_random
			percent_chance 25	weather_type -3 16 0 -1
			percent_chance 25	weather_type 3 16 0 1
			percent_chance 25	weather_type -3 11 0 -1
			percent_chance 25	weather_type 3 11 0 1
		end_random
	elseif SNOWY_WEATHER
		start_random
			percent_chance 50	weather_type 4 16 17 1
			percent_chance 50	weather_type -4 16 17 -1
		end_random
	elseif FOGGY_RAINY_WEATHER
		start_random
			percent_chance 50	weather_type 2 8 8 1
			percent_chance 50	weather_type -2 8 8 -1
		end_random
	elseif FOGGY_SNOWY_WEATHER
		start_random
			percent_chance 50	weather_type 4 255 17 1
			percent_chance 50	weather_type -4 255 17 -1
		end_random
	elseif REDDISH_WEATHER	weather_type 0 36 36 0	/* drought or dawn/dusk or autumn */
	elseif GREENISH_WEATHER	weather_type 0 55 0 0	/* lush jungle or swamp */
	elseif RANDOM_WEATHER	weather_type rnd(-4,4) rnd(0,255) rnd(0,255) rnd(-1,1)	/* truly random - not actually used currently */
	else		weather_type 0 0 0 0	/* fall-back here */
	endif
else  /* no terrain shading */
	if SUNNY_WEATHER		weather_type 0 0 0 0
	elseif CLOUDY_WEATHER	weather_type 0 0 0 0
	elseif FOGGY_WEATHER	weather_type 0 0 0 0
	elseif RAINY_WEATHER
		start_random
			percent_chance 50	weather_type 2 0 0 1
			percent_chance 50	weather_type -2 0 0 -1
		end_random
	elseif THUNDERSTORM_WEATHER
		start_random
			percent_chance 50	weather_type -3 0 0 -1
			percent_chance 50	weather_type 3 0 0 1
		end_random
	elseif SNOWY_WEATHER
		start_random
			percent_chance 50	weather_type 4 0 0 1
			percent_chance 50	weather_type -4 0 0 -1
		end_random
	elseif FOGGY_RAINY_WEATHER
		start_random
			percent_chance 50	weather_type 2 0 0 1
			percent_chance 50	weather_type -2 0 0 -1
		end_random
	elseif FOGGY_SNOWY_WEATHER
		start_random
			percent_chance 50	weather_type 4 0 0 1
			percent_chance 50	weather_type -4 0 0 -1
		end_random
	elseif REDDISH_WEATHER		weather_type 0 0 0 0	/* drought or dawn/dusk */
	elseif GREENISH_WEATHER		weather_type 0 0 0 0	/* lush */
	elseif RANDOM_WEATHER		weather_type rnd(-4,4) 0 0 rnd(-1,1)	/* truly random - not actually used currently */
	else	weather_type 0 0 0 0	/* fall-back here */
	endif
endif
endif
endif


/* some dynamic help for the AI */
/* can be made more advanced in the future with water and islands support and such */
if USE_NOMAD_SETUP
	if USE_MICHI_STYLE	ai_info_map_type CUSTOM 1 1 0
	else				ai_info_map_type CUSTOM 1 0 0
	endif
elseif USE_MICHI_STYLE	ai_info_map_type CUSTOM 0 1 0
else					ai_info_map_type CUSTOM 0 0 0
endif


/* =================================================================================================== */
<LAND_GENERATION>
/* this is the most critical part of the whole script - it is where the structure of the lands is decided */

if LAND_BASED_MAP		base_terrain LAND_A
elseif FOREST_BASED_MAP	base_terrain FOREST_A
elseif WATER_BASED_MAP	base_terrain WATER_A
endif

/* create a special land in the center when there is something to fight for */
if KING_OT_HILL	#define SPECIAL_CENTER
elseif CAPTURE_THE_RELIC #define SPECIAL_CENTER
elseif CAPTURE_RELICS #define SPECIAL_CENTER
elseif ALLOW_RELIC_RUSH
	start_random
		percent_chance 1	#define USE_RELIC_RUSH	#define SPECIAL_CENTER
	end_random
endif
if SPECIAL_CENTER	/* then it is already taken, otherwise we can still use it */
elseif ALLOW_NEUTRAL_MARKET
	if DE_AVAILABLE
		start_random
			percent_chance 1	#define USE_NEUTRAL_MARKET	#define SPECIAL_CENTER
		end_random
	endif
endif

/* decide how much of the total map goes towards player lands */
start_random
	percent_chance 0	#define 20%_PLAYER_LANDS
	percent_chance 1	#define 30%_PLAYER_LANDS
	percent_chance 5	#define 40%_PLAYER_LANDS
	percent_chance 10	#define 50%_PLAYER_LANDS
	percent_chance 20	#define 60%_PLAYER_LANDS
	percent_chance 20	#define 70%_PLAYER_LANDS
	percent_chance 15	#define 80%_PLAYER_LANDS
	percent_chance 15	#define 90%_PLAYER_LANDS
	percent_chance 14	#define 100%_PLAYER_LANDS
end_random
/* decide how far player lands need to stay from the map edge */ /* possibly support non-symmetrical borders in the future */
start_random
	percent_chance 60	#define NO_PLAYER_LAND_BORDERS
	percent_chance 30	#define 5%_PLAYER_LAND_BORDERS
	percent_chance 9	#define 10%_PLAYER_LAND_BORDERS
	percent_chance 1	#define 15%_PLAYER_LAND_BORDERS
end_random
/* decide If we want to use the rew circle radius placement from DE */
if DE_AVAILABLE
	if USE_TEAM_GROUPING	#define USE_CIRCLE_RADIUS
	elseif SPECIAL_CENTER	#define USE_CIRCLE_RADIUS
	else
		start_random
			percent_chance 25	#define USE_CIRCLE_RADIUS
		end_random
	endif
endif

/* decide If we want a central land */
if NO_PLAYER_LAND_BORDERS
	start_random
		percent_chance 40	#define NO_CENTRAL_LAND
		percent_chance 20	#define SMALL_CENTRAL_LAND
		percent_chance 20	#define MEDIUM_CENTRAL_LAND
		percent_chance 20	#define LARGE_CENTRAL_LAND
	end_random
elseif 5%_PLAYER_LAND_BORDERS
	start_random
		percent_chance 40	#define NO_CENTRAL_LAND
		percent_chance 30	#define SMALL_CENTRAL_LAND
		percent_chance 30	#define MEDIUM_CENTRAL_LAND
		percent_chance 0	#define LARGE_CENTRAL_LAND
	end_random
elseif 10%_PLAYER_LAND_BORDERS
	start_random
		percent_chance 40	#define NO_CENTRAL_LAND
		percent_chance 60	#define SMALL_CENTRAL_LAND
		percent_chance 0	#define MEDIUM_CENTRAL_LAND
		percent_chance 0	#define LARGE_CENTRAL_LAND
	end_random
elseif 15%_PLAYER_LAND_BORDERS
	start_random
		percent_chance 50	#define NO_CENTRAL_LAND
		percent_chance 50	#define SMALL_CENTRAL_LAND
		percent_chance 0	#define MEDIUM_CENTRAL_LAND
		percent_chance 0	#define LARGE_CENTRAL_LAND
	end_random
else	#define NO_CENTRAL_LAND	/* fallback */
endif

/* decide If we want lands in all four corners */
if LARGE_CENTRAL_LAND	#define NO_CORNER_LANDS
elseif MEDIUM_CENTRAL_LAND
	start_random
		percent_chance 5	#define CORNER_LANDS
		percent_chance 95	#define NO_CORNER_LANDS
	end_random
elseif SMALL_CENTRAL_LAND
	start_random
		percent_chance 15	#define CORNER_LANDS
		percent_chance 85	#define NO_CORNER_LANDS
	end_random
else /* If no central land */
	start_random
		percent_chance 25	#define CORNER_LANDS
		percent_chance 75	#define NO_CORNER_LANDS
	end_random
endif

/* prevent base elevation If we have a water map - otherwise it can be very hard to place docks */
if WATER_BASED_MAP	/* don't allow */
else 	#define USE_BASE_ELEVATION
endif




/* =================================================================================================== */
/* could support multi-land starts in the future */
/* actual create_player_lands command here */
/* maybe put player lands after neutral lands */
create_player_lands {
	terrain_type LAND_A

	if 20%_PLAYER_LANDS			land_percent 20
	elseif 30%_PLAYER_LANDS		land_percent 30
	elseif 40%_PLAYER_LANDS		land_percent 40
	elseif 50%_PLAYER_LANDS		land_percent 50
	elseif 60%_PLAYER_LANDS		land_percent 60
	elseif 70%_PLAYER_LANDS		land_percent 70
	elseif 80%_PLAYER_LANDS		land_percent 80
	elseif 90%_PLAYER_LANDS		land_percent 90
	elseif 100%_PLAYER_LANDS 	land_percent 100
	endif

	if USE_FULL_RANDOM_PLACEMENT	/* need to ensure some spacing between players */
		base_size 16
	else
		base_size 12
	endif

	if USE_BASE_ELEVATION
		if DE_AVAILABLE
			start_random
				percent_chance 60	base_elevation 0  /* not elevated */
				percent_chance 20	base_elevation 1
				percent_chance 10	base_elevation 2
				percent_chance 5	base_elevation 3
				percent_chance 2	base_elevation 4
				percent_chance 2	base_elevation 5
				percent_chance 1	base_elevation 6
				percent_chance 1	base_elevation rnd(7,16)
			end_random
		else
			start_random
				percent_chance 60	base_elevation 0  /* not elevated */
				percent_chance 20	base_elevation 1
				percent_chance 10	base_elevation 2
				percent_chance 5	base_elevation 3
				percent_chance 2	base_elevation 4
				percent_chance 2	base_elevation 5
				percent_chance 1	base_elevation 6
				percent_chance 1	base_elevation 7
			end_random
		endif
	endif

	if NO_PLAYER_LAND_BORDERS
		if USE_CIRCLE_RADIUS
			if CORNER_LANDS circle_radius 35 0
			else circle_radius 40 0	endif
		endif
	elseif 5%_PLAYER_LAND_BORDERS
		left_border 5
		right_border 5
		top_border 5
		bottom_border 5
		if USE_CIRCLE_RADIUS	circle_radius 35 0 endif
	elseif 10%_PLAYER_LAND_BORDERS
		left_border 10
		right_border 10
		top_border 10
		bottom_border 10
		if USE_CIRCLE_RADIUS	circle_radius 30 0 endif
	elseif 15%_PLAYER_LAND_BORDERS
		left_border 15
		right_border 15
		top_border 15
		bottom_border 15
		if USE_CIRCLE_RADIUS	circle_radius 25 0 endif
	endif

	start_random
		percent_chance 20	border_fuzziness 100 /* ie. no fuzziness */
		percent_chance 20	border_fuzziness 40
		percent_chance 20	border_fuzziness 15
		percent_chance 20	border_fuzziness 5
		percent_chance 20	border_fuzziness 2 /* ie. very noticeable fuzziness */
	end_random


	start_random
		percent_chance 15	clumping_factor 4 /* snaky lands */
		percent_chance 20	clumping_factor 8
		percent_chance 20	clumping_factor 16
		percent_chance 15	clumping_factor 32
		percent_chance 15	clumping_factor 64
		percent_chance 15	clumping_factor 100 /* round lands */
	end_random

	if USE_TEAM_GROUPING
		set_zone_by_team
		#define TEAM_ZONES
	elseif ALLOW_RANDOM_ZONES
		start_random
			percent_chance 25	set_zone_randomly	#define RANDOM_ZONES
			percent_chance 25	set_zone_by_team	#define TEAM_ZONES
			percent_chance 25	zone 1	#define ONE_ZONE
			percent_chance 25	#define INDIVIDUAL_ZONES
		end_random
	else
		start_random
			percent_chance 34	set_zone_by_team	#define TEAM_ZONES
			percent_chance 33	zone 1	#define ONE_ZONE
			percent_chance 33	#define INDIVIDUAL_ZONES
		end_random
	endif

	if USE_FULL_RANDOM_PLACEMENT	/* large avoidance distances needed */
		other_zone_avoidance_distance 20
	elseif USE_ISLANDS_STYLE   /* large avoidance distances needed */
		start_random
			percent_chance 25	other_zone_avoidance_distance 8
			percent_chance 25	other_zone_avoidance_distance 12
			percent_chance 25	other_zone_avoidance_distance 16
			percent_chance 25	other_zone_avoidance_distance 25
		end_random
	elseif USE_MICHI_STYLE   /* smaller avoidance distances are better here */
		start_random
			percent_chance 5	other_zone_avoidance_distance 2
			percent_chance 40	other_zone_avoidance_distance 4
			percent_chance 40	other_zone_avoidance_distance 8
			percent_chance 15	other_zone_avoidance_distance 12
		end_random
	else  /* the whole span of avoidance distances */
		start_random
			percent_chance 5	other_zone_avoidance_distance 2
			percent_chance 10	other_zone_avoidance_distance 4
			percent_chance 10	other_zone_avoidance_distance 6
			percent_chance 15	other_zone_avoidance_distance 8
			percent_chance 15	other_zone_avoidance_distance 10
			percent_chance 15	other_zone_avoidance_distance 12
			percent_chance 10	other_zone_avoidance_distance 14
			percent_chance 10	other_zone_avoidance_distance 16
			percent_chance 5	other_zone_avoidance_distance 20
			percent_chance 5	other_zone_avoidance_distance 25
		end_random
	endif
}

/* =================================================================================================== */
/* create the central land here */

if NO_CENTRAL_LAND
else
create_land {
	if LAND_BASED_MAP
		if NO_LAKES
			start_random
				percent_chance 40	#define CENTER_IS_FOREST
				percent_chance 60	#define CENTER_IS_LAND
			end_random
		else
			start_random
				percent_chance 40	#define CENTER_IS_WATER
				percent_chance 10	#define CENTER_IS_FOREST
				percent_chance 10	#define CENTER_IS_SHALLOWS
				percent_chance 40	#define CENTER_IS_LAND
			end_random
		endif
	elseif FOREST_BASED_MAP
		if NO_LAKES	#define CENTER_IS_LAND
		else
			start_random
				percent_chance 40	#define CENTER_IS_WATER
				percent_chance 0	#define CENTER_IS_FOREST
				percent_chance 10	#define CENTER_IS_SHALLOWS
				percent_chance 50	#define CENTER_IS_LAND
			end_random
		endif
	elseif WATER_BASED_MAP
		start_random
			percent_chance 0	#define CENTER_IS_WATER
			percent_chance 0	#define CENTER_IS_FOREST /* doesn't work well because there is no place to build a lumber camp */
			percent_chance 10	#define CENTER_IS_SHALLOWS
			percent_chance 90	#define CENTER_IS_LAND
		end_random
	endif

	if CENTER_IS_WATER
			terrain_type WATER_A
		if ALLOW_WATER_ELEVATION
			#define ALLOW_ELEVATED_CENTER
		endif
	elseif CENTER_IS_SHALLOWS
		terrain_type SHALLOWS_A
		if ALLOW_WATER_ELEVATION
			#define ALLOW_ELEVATED_CENTER
		endif
	elseif CENTER_IS_FOREST
		terrain_type FOREST_A
		#define ALLOW_ELEVATED_CENTER
	elseif CENTER_IS_LAND
		#define ALLOW_ELEVATED_CENTER
		start_random
			percent_chance 50	terrain_type LAND_A
			percent_chance 50	terrain_type LAND_X	#define LAND_X_EXISTS
		end_random
	endif

	if USE_BASE_ELEVATION
		if ALLOW_ELEVATED_CENTER
			if DE_AVAILABLE
				start_random
				percent_chance 60	base_elevation 0  /* not elevated */
				percent_chance 20	base_elevation 1
				percent_chance 10	base_elevation 2
				percent_chance 5	base_elevation 3
				percent_chance 2	base_elevation 4
				percent_chance 2	base_elevation 5
				percent_chance 1	base_elevation 6
				percent_chance 1	base_elevation rnd(7,16)
				end_random
			else
				start_random
					percent_chance 60	base_elevation 0  /* not elevated */
					percent_chance 20	base_elevation 1
					percent_chance 10	base_elevation 2
					percent_chance 5	base_elevation 3
					percent_chance 2	base_elevation 4
					percent_chance 2	base_elevation 5
					percent_chance 1	base_elevation 6
					percent_chance 1	base_elevation 7
				end_random
			endif
		endif
	endif

	if SMALL_CENTRAL_LAND
		land_percent 10
		left_border 30
		right_border 30
		top_border 30
		bottom_border 30
	elseif MEDIUM_CENTRAL_LAND
		land_percent 30
		base_size 6
		left_border 20
		right_border 20
		top_border 20
		bottom_border 20
	elseif LARGE_CENTRAL_LAND
		land_percent 50
		base_size 10
		left_border 10
		right_border 10
		top_border 10
		bottom_border 10
	endif

	land_position 50 50

	start_random
		percent_chance 20	border_fuzziness 100 /* ie. no fuzziness */
		percent_chance 20	border_fuzziness 40
		percent_chance 20	border_fuzziness 15
		percent_chance 20	border_fuzziness 5
		percent_chance 20	border_fuzziness 2 /* ie. very noticeable fuzziness */
	end_random

	start_random
		percent_chance 15	clumping_factor 4 /* snakey land */
		percent_chance 15	clumping_factor 8
		percent_chance 15	clumping_factor 16
		percent_chance 20	clumping_factor 32
		percent_chance 20	clumping_factor 64
		percent_chance 15	clumping_factor 100 /* round land */
	end_random

	zone 2
	land_id 2

	if USE_ISLANDS_STYLE	other_zone_avoidance_distance 8
	elseif USE_MICHI_STYLE	other_zone_avoidance_distance 2
	endif
}
endif

/* =================================================================================================== */
/* create corner lands */

if ALLOW_RANDOM_ZONES
	start_random
		percent_chance 70	#define CORNER1
	end_random
	start_random
		percent_chance 70	#define CORNER2
	end_random
	start_random
		percent_chance 70	#define CORNER3
	end_random
	start_random
		percent_chance 70	#define CORNER4
	end_random
else	/* create equal corner lands */
	#define CORNER1
	#define CORNER2
	#define CORNER3
	#define CORNER4
endif

if NO_CORNER_LANDS
else #define CORNER_LANDS	/* redundant, but do it anyway just in case */
	if LAND_BASED_MAP
		if NO_LAKES
			start_random
				percent_chance 40	#define CORNERS_ARE_FOREST
				percent_chance 60	#define CORNERS_ARE_LAND
			end_random
		else
			start_random
				percent_chance 40	#define CORNERS_ARE_WATER
				percent_chance 30	#define CORNERS_ARE_FOREST
				percent_chance 10	#define CORNERS_ARE_SHALLOWS
				percent_chance 20	#define CORNERS_ARE_LAND
			end_random
		endif
	elseif FOREST_BASED_MAP
		if NO_LAKES	#define CORNERS_ARE_LAND
		else
			start_random
				percent_chance 10	#define CORNERS_ARE_WATER
				percent_chance 0	#define CORNERS_ARE_FOREST
				percent_chance 10	#define CORNERS_ARE_SHALLOWS
				percent_chance 80	#define CORNERS_ARE_LAND
			end_random
		endif
	elseif WATER_BASED_MAP
		start_random
			percent_chance 0	#define CORNERS_ARE_WATER
			percent_chance 0	#define CORNERS_ARE_FOREST /* doesn't work well because there is no place to build a lumber camp */
			percent_chance 10	#define CORNERS_ARE_SHALLOWS
			percent_chance 90	#define CORNERS_ARE_LAND
		end_random
	endif

	if CORNERS_ARE_WATER		#define CORNERS_USE_WATER_A
	elseif CORNERS_ARE_SHALLOWS	#define CORNERS_USE_SHALLOWS_A
	elseif CORNERS_ARE_FOREST	#define CORNERS_USE_FOREST_A
	elseif CORNERS_ARE_LAND
		if SPECIAL_CENTER
			start_random
				percent_chance 50	#define CORNERS_USE_LAND_A
				percent_chance 50	#define CORNERS_USE_LAND_X	#define LAND_X_EXISTS
			end_random
		else
			start_random
				percent_chance 48	#define CORNERS_USE_LAND_A
				percent_chance 48	#define CORNERS_USE_LAND_X	#define LAND_X_EXISTS
				percent_chance 2	#define CORNERS_USE_LAND_Z
			end_random
		endif
	endif

	/* do this 4 times */
	if CORNER1
		create_land {
		land_position 1 1  /* left corner */
		left_border -15
		right_border 82
		top_border -15
		bottom_border 82
		zone 3
		land_id 3

		base_size 1
		land_percent 25

		if USE_ISLANDS_STYLE	other_zone_avoidance_distance 8
		elseif USE_MICHI_STYLE	other_zone_avoidance_distance 2
		endif

		if CORNERS_USE_LAND_A			terrain_type LAND_A
		elseif CORNERS_USE_LAND_X		terrain_type LAND_X
		elseif CORNERS_USE_LAND_Z	terrain_type LAND_Z
		elseif CORNERS_USE_FOREST_A		terrain_type FOREST_A
		elseif CORNERS_USE_SHALLOWS_A			terrain_type SHALLOWS_A
		elseif CORNERS_USE_WATER_A		terrain_type WATER_A
		endif
		}
	endif

	if CORNER2
		create_land {
		land_position 99 99  /* right corner */
		left_border 82
		right_border -15
		top_border 82
		bottom_border -15
		zone 3
		land_id 3

		base_size 1
		land_percent 25

		if USE_ISLANDS_STYLE	other_zone_avoidance_distance 8
		elseif USE_MICHI_STYLE	other_zone_avoidance_distance 2
		endif

		if CORNERS_USE_LAND_A			terrain_type LAND_A
		elseif CORNERS_USE_LAND_X		terrain_type LAND_X
		elseif CORNERS_USE_LAND_Z	terrain_type LAND_Z
		elseif CORNERS_USE_FOREST_A		terrain_type FOREST_A
		elseif CORNERS_USE_SHALLOWS_A			terrain_type SHALLOWS_A
		elseif CORNERS_USE_WATER_A		terrain_type WATER_A
		endif
		}
	endif

	if CORNER3
		create_land {
		land_position 99 1  /* top */
		left_border 82
		right_border -15
		top_border -15
		bottom_border 82
		zone 3
		land_id 3

		base_size 1
		land_percent 25

		if USE_ISLANDS_STYLE	other_zone_avoidance_distance 8
		elseif USE_MICHI_STYLE	other_zone_avoidance_distance 2
		endif

		if CORNERS_USE_LAND_A			terrain_type LAND_A
		elseif CORNERS_USE_LAND_X		terrain_type LAND_X
		elseif CORNERS_USE_LAND_Z	terrain_type LAND_Z
		elseif CORNERS_USE_FOREST_A		terrain_type FOREST_A
		elseif CORNERS_USE_SHALLOWS_A			terrain_type SHALLOWS_A
		elseif CORNERS_USE_WATER_A		terrain_type WATER_A
		endif
		}
	endif

	if CORNER4
		create_land {
		land_position 1 99  /* bottom */
		left_border -15
		right_border 82
		top_border 82
		bottom_border -15
		zone 3
		land_id 3

		base_size 1
		land_percent 25

		if USE_ISLANDS_STYLE	other_zone_avoidance_distance 8
		elseif USE_MICHI_STYLE	other_zone_avoidance_distance 2
		endif

		if CORNERS_USE_LAND_A			terrain_type LAND_A
		elseif CORNERS_USE_LAND_X		terrain_type LAND_X
		elseif CORNERS_USE_LAND_Z	terrain_type LAND_Z
		elseif CORNERS_USE_FOREST_A		terrain_type FOREST_A
		elseif CORNERS_USE_SHALLOWS_A			terrain_type SHALLOWS_A
		elseif CORNERS_USE_WATER_A		terrain_type WATER_A
		endif
		}
	endif
endif


if SPECIAL_CENTER
	create_land {
	terrain_type LAND_Z
	land_position 50 50
	land_percent 0
	zone 2
	land_id 22
	if LUDIKRIS_MAP		base_size 25
	elseif GIGANTIC_MAP	base_size 16
	elseif HUGE_MAP		base_size 14
	elseif LARGE_MAP	base_size 12
	else				base_size 10
	endif
	}
endif


/* possibly add side lands? */


/* =================================================================================================== */
<ELEVATION_GENERATION>


/* base terrain elevation */
if WATER_BASED_MAP
	start_random
		percent_chance 10	/* none */
		percent_chance 20	create_elevation 1
		percent_chance 20	create_elevation 2
		percent_chance 20	create_elevation 3
		percent_chance 20	create_elevation 4
		percent_chance 6	create_elevation 5
		percent_chance 3	create_elevation 6
		percent_chance 1	create_elevation 7
	end_random
else
	start_random
		percent_chance 10	/* none */
		percent_chance 10	create_elevation 1
		percent_chance 10	create_elevation 2
		percent_chance 20	create_elevation 3
		percent_chance 20	create_elevation 4
		percent_chance 10	create_elevation 5
		percent_chance 10	create_elevation 6
		percent_chance 10	create_elevation 7
	end_random
endif
{
	enable_balanced_elevation
	base_terrain LAND_A
	if DE_AVAILABLE	set_scale_by_size
	else			set_scale_by_groups	/* this is bugged and and actually scales by size in pre-DE */
	endif
	start_random   /* number of tiles scaled by 100x100 - still needs testing */
		percent_chance 10	number_of_tiles 0
		percent_chance 10	number_of_tiles 50
		percent_chance 10	number_of_tiles 100
		percent_chance 10	number_of_tiles 250
		percent_chance 10	number_of_tiles 500
		percent_chance 10	number_of_tiles 750
		percent_chance 10	number_of_tiles 1000
		percent_chance 10	number_of_tiles 2000
		percent_chance 10	number_of_tiles 3000
		percent_chance 10	number_of_tiles 4000
	end_random
	start_random /* number of clumps scaled by 100x100 - still needs testing */
		percent_chance 20	number_of_clumps 8
		percent_chance 20	number_of_clumps 16
		percent_chance 20	number_of_clumps 32
		percent_chance 20	number_of_clumps 64
		percent_chance 20	number_of_clumps 128
	end_random
	start_random
		percent_chance 40	spacing 1
		percent_chance 25	spacing 2
		percent_chance 15	spacing 3
		percent_chance 10	spacing 4
		percent_chance 10	spacing 5
	end_random
	if MANGROVE_SWAMP_BIOME
		start_random
			percent_chance 80	number_of_tiles 0	/* override what was chosen above */
		end_random
	endif
}

/* forest elevation */
start_random
	percent_chance 10	/* none */
	percent_chance 10	create_elevation 1
	percent_chance 10	create_elevation 2
	percent_chance 20	create_elevation 3
	percent_chance 20	create_elevation 4
	percent_chance 10	create_elevation 5
	percent_chance 10	create_elevation 6
	percent_chance 10	create_elevation 7
end_random
{
	enable_balanced_elevation
	base_terrain FOREST_A
	if DE_AVAILABLE	set_scale_by_size
	else			set_scale_by_groups	/* this is bugged and and actually scales by size in pre-DE */
	endif
	start_random   /* number of tiles scaled by 100x100 - still needs testing */
		percent_chance 10	number_of_tiles 0
		percent_chance 10	number_of_tiles 50
		percent_chance 10	number_of_tiles 100
		percent_chance 10	number_of_tiles 250
		percent_chance 10	number_of_tiles 500
		percent_chance 10	number_of_tiles 750
		percent_chance 10	number_of_tiles 1000
		percent_chance 10	number_of_tiles 2000
		percent_chance 10	number_of_tiles 3000
		percent_chance 10	number_of_tiles 4000
	end_random
	start_random /* number of clumps currently not subjected to scaling */
		percent_chance 20	number_of_clumps 8
		percent_chance 20	number_of_clumps 16
		percent_chance 20	number_of_clumps 32
		percent_chance 20	number_of_clumps 64
		percent_chance 20	number_of_clumps 128
	end_random
	start_random
		percent_chance 40	spacing 1
		percent_chance 25	spacing 2
		percent_chance 15	spacing 3
		percent_chance 10	spacing 4
		percent_chance 10	spacing 5
	end_random
}

if LAND_X_EXISTS
start_random
	percent_chance 10	/* none */
	percent_chance 10	create_elevation 1
	percent_chance 10	create_elevation 2
	percent_chance 20	create_elevation 3
	percent_chance 20	create_elevation 4
	percent_chance 10	create_elevation 5
	percent_chance 10	create_elevation 6
	percent_chance 10	create_elevation 7
end_random
{
	enable_balanced_elevation
	base_terrain LAND_X
	if DE_AVAILABLE	set_scale_by_size
	else			set_scale_by_groups	/* this is bugged and and actually scales by size in pre-DE */
	endif
	start_random   /* number of tiles scaled by 100x100 - still needs testing */
		percent_chance 10	number_of_tiles 0
		percent_chance 10	number_of_tiles 50
		percent_chance 10	number_of_tiles 100
		percent_chance 10	number_of_tiles 250
		percent_chance 10	number_of_tiles 500
		percent_chance 10	number_of_tiles 750
		percent_chance 10	number_of_tiles 1000
		percent_chance 10	number_of_tiles 2000
		percent_chance 10	number_of_tiles 3000
		percent_chance 10	number_of_tiles 4000
	end_random
	start_random /* number of clumps currently not subjected to scaling */
		percent_chance 20	number_of_clumps 8
		percent_chance 20	number_of_clumps 16
		percent_chance 20	number_of_clumps 32
		percent_chance 20	number_of_clumps 64
		percent_chance 20	number_of_clumps 128
	end_random
	start_random
		percent_chance 40	spacing 1
		percent_chance 25	spacing 2
		percent_chance 15	spacing 3
		percent_chance 10	spacing 4
		percent_chance 10	spacing 5
	end_random
}
endif
if ALLOW_WATER_ELEVATION
start_random
	percent_chance 80	create_elevation 0	/* none */
	percent_chance 13	create_elevation 1
	percent_chance 6	create_elevation 2
	percent_chance 1	create_elevation 3
	percent_chance 0	create_elevation 4
	percent_chance 0	create_elevation 5
	percent_chance 0	create_elevation 6
	percent_chance 0	create_elevation 7
end_random
{
	enable_balanced_elevation
	base_terrain WATER_A
	if DE_AVAILABLE	set_scale_by_size
	else			set_scale_by_groups	/* this is bugged and and actually scales by size in pre-DE */
	endif
	start_random   /* number of tiles scaled by 100x100 - still needs testing */
		percent_chance 50	number_of_tiles 0
		percent_chance 10	number_of_tiles 50
		percent_chance 10	number_of_tiles 100
		percent_chance 10	number_of_tiles 250
		percent_chance 10	number_of_tiles 500
		percent_chance 6	number_of_tiles 750
		percent_chance 1	number_of_tiles 1000
		percent_chance 1	number_of_tiles 2000
		percent_chance 1	number_of_tiles 3000
		percent_chance 1	number_of_tiles 4000
	end_random
	start_random /* number of clumps currently not subjected to scaling */
		percent_chance 20	number_of_clumps 8
		percent_chance 20	number_of_clumps 16
		percent_chance 20	number_of_clumps 32
		percent_chance 20	number_of_clumps 64
		percent_chance 20	number_of_clumps 128
	end_random
	start_random
		percent_chance 40	spacing 1
		percent_chance 25	spacing 2
		percent_chance 15	spacing 3
		percent_chance 10	spacing 4
		percent_chance 10	spacing 5
	end_random
}
endif
/* speacial case where corners are useless terrain */
if CORNERS_USE_LAND_Z
	create_elevation 7 {
		base_terrain LAND_Z
		number_of_tiles 9320
		number_of_clumps 999
		start_random
			percent_chance 30	spacing 1
			percent_chance 30	spacing 2
			percent_chance 30	spacing 3
			percent_chance 10	spacing 4
		end_random
	}
endif

/* in ctr or koth */
if SPECIAL_CENTER
	if LUDIKRIS_MAP		create_elevation 7
	elseif GIGANTIC_MAP	create_elevation 6
	elseif HUGE_MAP		create_elevation 5
	else				create_elevation 4
	endif
	{
		base_terrain LAND_Z
		number_of_tiles 99999
		number_of_clumps 9320
		spacing 2
	}
endif

/* =================================================================================================== */
/* <CLIFF_GENERATION>' */

/* only do cliffs on land maps, where there is more room */
if FOREST_BASED_MAP			#define NO_CLIFFS
elseif WATER_BASED_MAP		#define NO_CLIFFS
elseif CENTER_IS_FOREST		#define NO_CLIFFS
elseif CENTER_IS_SHALLOWS	#define NO_CLIFFS
elseif CENTER_IS_WATER		#define NO_CLIFFS
else
	start_random
		percent_chance 33	#define NO_CLIFFS
	end_random
endif

if NO_CLIFFS
else
<CLIFF_GENERATION>

/* curliness - the percent chance of turning rather than going straight at any given tile */
start_random
	percent_chance 10	cliff_curliness 0
	percent_chance 10	cliff_curliness 10
	percent_chance 10	cliff_curliness 20
	percent_chance 10	cliff_curliness 30
	percent_chance 10	cliff_curliness 40
	percent_chance 10	cliff_curliness 50
	percent_chance 10	cliff_curliness 60
	percent_chance 10	cliff_curliness 70
	percent_chance 10	cliff_curliness 80
	percent_chance 10	cliff_curliness 90
	percent_chance 10	cliff_curliness 100
end_random

/* spacing to other cliffs */
start_random
	percent_chance 5	min_distance_cliffs 1 /* 3 tiles */
	percent_chance 50 	min_distance_cliffs 2 /* 6 tiles */
	percent_chance 20 	min_distance_cliffs 3 /* 9 tiles */
	percent_chance 10 	min_distance_cliffs 4 /* 12 tiles */
	percent_chance 7 	min_distance_cliffs 5 /* 15 tiles */
	percent_chance 3 	min_distance_cliffs 6 /* 18 tiles */
	percent_chance 2 	min_distance_cliffs 7 /* 21 tiles */
	percent_chance 1 	min_distance_cliffs 8 /* 24 tiles */
	percent_chance 1 	min_distance_cliffs 9 /* 27 tiles */
	percent_chance 1 	min_distance_cliffs 10 /* 30 tiles */
end_random
min_terrain_distance 2  /* distance to stay away from water - 2 is the default anyway */
if TINY_MAP
	min_number_of_cliffs 5
	max_number_of_cliffs 11
	min_length_of_cliff 4
	max_length_of_cliff 6
elseif SMALL_MAP
	min_number_of_cliffs 8
	max_number_of_cliffs 17
	min_length_of_cliff 4
	max_length_of_cliff 7
elseif MEDIUM_MAP
	min_number_of_cliffs 11
	max_number_of_cliffs 22
	min_length_of_cliff 5
	max_length_of_cliff 8
elseif LARGE_MAP
	min_number_of_cliffs 16
	max_number_of_cliffs 32
	min_length_of_cliff 6
	max_length_of_cliff 9
elseif HUGE_MAP
	min_number_of_cliffs 19
	max_number_of_cliffs 38
	min_length_of_cliff 6
	max_length_of_cliff 10
elseif GIGANTIC_MAP
	min_number_of_cliffs 23
	max_number_of_cliffs 46
	min_length_of_cliff 6
	max_length_of_cliff 10
elseif LUDIKRIS_MAP
	min_number_of_cliffs 92
	max_number_of_cliffs 184
	min_length_of_cliff 6
	max_length_of_cliff 10  /* may need to adjust lengths */
endif
endif


/* =================================================================================================== */
<TERRAIN_GENERATION>

/* color correction */
if POLAR_BIOME					color_correction CC_WINTER
elseif TAIGA_BIOME				color_correction CC_WINTER
elseif ALPINE_BIOME				color_correction CC_WINTER
elseif AUTUMN_TEMPERATE_BIOME	color_correction CC_AUTUMN
elseif AUTUMN_SNOW_BIOME		color_correction CC_AUTUMN
elseif JUNGLE_BIOME				color_correction CC_JUNGLE
elseif SAVANNAH_BIOME			color_correction CC_DESERT
elseif DESERT_BIOME				color_correction CC_DESERT
elseif HIGH_DESERT_BIOME		color_correction CC_DESERT
elseif MANGROVE_SWAMP_BIOME		color_correction CC_JUNGLE
elseif WASTELAND_BIOME			color_correction CC_AUTUMN
endif

/* could add ring terrains around center and/or player lands */

/* =================================================================================================== */
/* central stuff */
if CENTER_IS_SHALLOWS	/* central lake If center is shallows */
	if CORNERS_ARE_SHALLOWS
	elseif MANGROVE_SWAMP_BIOME
	else
		create_terrain WATER_A {
		base_terrain SHALLOWS_A
		start_random
			percent_chance 20	spacing_to_other_terrain_types 3
			percent_chance 20	spacing_to_other_terrain_types 5
			percent_chance 20	spacing_to_other_terrain_types 7
			percent_chance 20	spacing_to_other_terrain_types 9
			percent_chance 20	spacing_to_other_terrain_types 11
		end_random
		if SMALL_CENTRAL_LAND		land_percent 5
		elseif MEDIUM_CENTRAL_LAND	land_percent 10
		elseif LARGE_CENTRAL_LAND	land_percent 15
		endif
		number_of_clumps 1
		clumping_factor 100
		}
	endif
elseif CENTER_IS_WATER	/* central island If center is water */
	if CORNERS_ARE_WATER
	else
		#define LAND_X_EXISTS
		#define CENTRAL_ISLAND
		create_terrain LAND_X {
		base_terrain WATER_A
		spacing_to_other_terrain_types 10
		land_percent 5
		number_of_clumps 1
		clumping_factor 100
		}
	endif
elseif CENTER_IS_FOREST	/* central island If center is forest */
	if CORNERS_ARE_FOREST
	else
		if LARGE_CENTRAL_LAND
			create_terrain WATER_A {
			base_terrain FOREST_A
			land_percent 100
			number_of_clumps 1
			spacing_to_other_terrain_types 10
			}
		endif
	endif
endif
start_random
	percent_chance 80	#define PLACE_TREES_ON_CENTER_LAND
end_random

if LAND_X_EXISTS
	if PLACE_TREES_ON_CENTER_LAND
		create_terrain FOREST_A {
		base_terrain LAND_X
		spacing_to_other_terrain_types 10
		number_of_clumps 20
		set_scale_by_size
		set_avoid_player_start_areas
		if LARGE_CENTRAL_LAND	land_percent 3
		elseif MEDIUM_CENTRAL_LAND	land_percent 2
		elseif SMALL_CENTRAL_LAND	land_percent 1
		elseif CORNERS_USE_LAND_X	land_percent 4
		else	land_percent 1
		endif
		}
	endif
endif

/* =================================================================================================== */


/* forests - may still need further tweaks - I am not entirely happy with it yet */
create_terrain FOREST_A
{
	base_terrain LAND_A
	spacing_to_other_terrain_types 5
	if LAND_BASED_MAP
		if NO_CENTRAL_LAND
			start_random
				percent_chance 0	land_percent 5	#define 5%_FOREST
				percent_chance 10	land_percent 8	#define 8%_FOREST
				percent_chance 10	land_percent 10	#define 10%_FOREST
				percent_chance 15	land_percent 12	#define 12%_FOREST
				percent_chance 15	land_percent 15	#define 15%_FOREST
				percent_chance 15	land_percent 18	#define 18%_FOREST
				percent_chance 15	land_percent 21	#define 21%_FOREST
				percent_chance 10	land_percent 25	#define 25%_FOREST
				percent_chance 10	land_percent 30	#define 30%_FOREST
			end_random
		elseif SMALL_CENTRAL_LAND
			start_random
				percent_chance 0	land_percent 5	#define 5%_FOREST
				percent_chance 10	land_percent 8	#define 8%_FOREST
				percent_chance 15	land_percent 10	#define 10%_FOREST
				percent_chance 20	land_percent 12	#define 12%_FOREST
				percent_chance 20	land_percent 15	#define 15%_FOREST
				percent_chance 15	land_percent 18	#define 18%_FOREST
				percent_chance 10	land_percent 21	#define 21%_FOREST
				percent_chance 5	land_percent 25	#define 25%_FOREST
				percent_chance 5	land_percent 30	#define 30%_FOREST
			end_random
		elseif MEDIUM_CENTRAL_LAND
			start_random
				percent_chance 0	land_percent 5	#define 5%_FOREST
				percent_chance 10	land_percent 8	#define 8%_FOREST
				percent_chance 15	land_percent 10	#define 10%_FOREST
				percent_chance 20	land_percent 12	#define 12%_FOREST
				percent_chance 25	land_percent 15	#define 15%_FOREST
				percent_chance 15	land_percent 18	#define 18%_FOREST
				percent_chance 10	land_percent 21	#define 21%_FOREST
				percent_chance 4	land_percent 25	#define 25%_FOREST
				percent_chance 1	land_percent 30	#define 30%_FOREST
			end_random
		elseif LARGE_CENTRAL_LAND
			start_random
				percent_chance 0	land_percent 5	#define 5%_FOREST
				percent_chance 10	land_percent 8	#define 8%_FOREST
				percent_chance 25	land_percent 10	#define 10%_FOREST
				percent_chance 25	land_percent 12	#define 12%_FOREST
				percent_chance 15	land_percent 15	#define 15%_FOREST
				percent_chance 15	land_percent 18	#define 18%_FOREST
				percent_chance 8	land_percent 21	#define 21%_FOREST
				percent_chance 1	land_percent 25	#define 25%_FOREST
				percent_chance 1	land_percent 30	#define 30%_FOREST
			end_random
		endif
	elseif FOREST_BASED_MAP
		if 20%_PLAYER_LANDS			land_percent 5	#define 5%_FOREST
		elseif 30%_PLAYER_LANDS		land_percent 5	#define 5%_FOREST
		elseif 40%_PLAYER_LANDS		land_percent 6	#define 6%_FOREST
		elseif 50%_PLAYER_LANDS		land_percent 6	#define 6%_FOREST
		elseif 60%_PLAYER_LANDS		land_percent 7	#define 7%_FOREST
		elseif 70%_PLAYER_LANDS		land_percent 7	#define 7%_FOREST
		elseif 80%_PLAYER_LANDS		land_percent 8	#define 8%_FOREST
		elseif 90%_PLAYER_LANDS		land_percent 9	#define 9%_FOREST
		elseif 100%_PLAYER_LANDS	land_percent 10	#define 10%_FOREST
		endif
	elseif WATER_BASED_MAP
		if 20%_PLAYER_LANDS			land_percent 6	#define 6%_FOREST
		elseif 30%_PLAYER_LANDS		land_percent 6	#define 6%_FOREST
		elseif 40%_PLAYER_LANDS		land_percent 7	#define 7%_FOREST
		elseif 50%_PLAYER_LANDS		land_percent 7	#define 7%_FOREST
		elseif 60%_PLAYER_LANDS		land_percent 8	#define 8%_FOREST
		elseif 70%_PLAYER_LANDS		land_percent 8	#define 8%_FOREST
		elseif 80%_PLAYER_LANDS		land_percent 9	#define 9%_FOREST
		elseif 90%_PLAYER_LANDS		land_percent 10	#define 10%_FOREST
		elseif 100%_PLAYER_LANDS	land_percent 11	#define 11%_FOREST
		endif
	endif
	number_of_clumps 25
	set_avoid_player_start_areas
	set_scale_by_groups
}


/* forest mixing */
create_terrain FOREST_B {
	base_terrain FOREST_A
	if FOREST_BASED_MAP
		if 5%_FOREST		land_percent 11
		elseif 6%_FOREST	land_percent 12
		elseif 7%_FOREST	land_percent 12
		elseif 8%_FOREST	land_percent 12
		elseif 9%_FOREST	land_percent 13
		elseif 10%_FOREST	land_percent 13
		elseif 11%_FOREST	land_percent 13
		elseif 12%_FOREST	land_percent 14
		elseif 15%_FOREST	land_percent 15
		elseif 18%_FOREST	land_percent 16
		elseif 21%_FOREST	land_percent 17
		elseif 25%_FOREST	land_percent 18
		elseif 30%_FOREST	land_percent 19
		endif
	elseif CENTER_IS_FOREST
		if 5%_FOREST		land_percent 3
		elseif 6%_FOREST	land_percent 4
		elseif 7%_FOREST	land_percent 5
		elseif 8%_FOREST	land_percent 6
		elseif 9%_FOREST	land_percent 7
		elseif 10%_FOREST	land_percent 8
		elseif 11%_FOREST	land_percent 9
		elseif 12%_FOREST	land_percent 10
		elseif 15%_FOREST	land_percent 11
		elseif 18%_FOREST	land_percent 12
		elseif 21%_FOREST	land_percent 13
		elseif 25%_FOREST	land_percent 14
		elseif 30%_FOREST	land_percent 15
		endif
	else
		if 5%_FOREST		land_percent 1
		elseif 6%_FOREST	land_percent 2
		elseif 7%_FOREST	land_percent 2
		elseif 8%_FOREST	land_percent 2
		elseif 9%_FOREST	land_percent 3
		elseif 10%_FOREST	land_percent 3
		elseif 11%_FOREST	land_percent 3
		elseif 12%_FOREST	land_percent 4
		elseif 15%_FOREST	land_percent 5
		elseif 18%_FOREST	land_percent 6
		elseif 21%_FOREST	land_percent 7
		elseif 25%_FOREST	land_percent 8
		elseif 30%_FOREST	land_percent 9
		endif
	endif
	number_of_clumps 9320
	set_scale_by_groups
}
create_terrain FOREST_C {
	base_terrain FOREST_A
	if FOREST_BASED_MAP
		if 5%_FOREST		land_percent 11
		elseif 6%_FOREST	land_percent 12
		elseif 7%_FOREST	land_percent 12
		elseif 8%_FOREST	land_percent 12
		elseif 9%_FOREST	land_percent 13
		elseif 10%_FOREST	land_percent 13
		elseif 11%_FOREST	land_percent 13
		elseif 12%_FOREST	land_percent 14
		elseif 15%_FOREST	land_percent 15
		elseif 18%_FOREST	land_percent 16
		elseif 21%_FOREST	land_percent 17
		elseif 25%_FOREST	land_percent 18
		elseif 30%_FOREST	land_percent 19
		endif
	elseif CENTER_IS_FOREST
		if 5%_FOREST		land_percent 3
		elseif 6%_FOREST	land_percent 4
		elseif 7%_FOREST	land_percent 5
		elseif 8%_FOREST	land_percent 6
		elseif 9%_FOREST	land_percent 7
		elseif 10%_FOREST	land_percent 8
		elseif 11%_FOREST	land_percent 9
		elseif 12%_FOREST	land_percent 10
		elseif 15%_FOREST	land_percent 11
		elseif 18%_FOREST	land_percent 12
		elseif 21%_FOREST	land_percent 13
		elseif 25%_FOREST	land_percent 14
		elseif 30%_FOREST	land_percent 15
		endif
	else
		if 5%_FOREST		land_percent 1
		elseif 6%_FOREST	land_percent 2
		elseif 7%_FOREST	land_percent 2
		elseif 8%_FOREST	land_percent 2
		elseif 9%_FOREST	land_percent 3
		elseif 10%_FOREST	land_percent 3
		elseif 11%_FOREST	land_percent 3
		elseif 12%_FOREST	land_percent 4
		elseif 15%_FOREST	land_percent 5
		elseif 18%_FOREST	land_percent 6
		elseif 21%_FOREST	land_percent 7
		elseif 25%_FOREST	land_percent 8
		elseif 30%_FOREST	land_percent 9
		endif
	endif
	number_of_clumps 9320
	set_scale_by_groups
}


/* =================================================================================================== */
/* cosmetic terrain mixing */

/* decide whether or not to use terrain masking */
if MANGROVE_SWAMP_BIOME	#define NO_TERRAIN_MASKING
elseif DE_AVAILABLE	/* use terrain masking */
else #define NO_TERRAIN_MASKING
endif

/* land terrain mixing - could be expanded upon */
create_terrain LAND_B {
	base_terrain LAND_A
	spacing_to_other_terrain_types 0
	if WATER_BASED_MAP		land_percent 15
	elseif FOREST_BASED_MAP	land_percent 20
	else					land_percent 25
	endif
	number_of_clumps 16
	set_scale_by_groups
	set_avoid_player_start_areas
	if NO_TERRAIN_MASKING
	else terrain_mask 2
	endif
}
create_terrain LAND_C {
	base_terrain	LAND_B
	spacing_to_other_terrain_types 1
	if WATER_BASED_MAP		land_percent 5
	elseif FOREST_BASED_MAP	land_percent 10
	else					land_percent 15
	endif
	number_of_clumps 25
	set_scale_by_groups
	if NO_TERRAIN_MASKING
	elseif TAIGA_BIOME /* because grass snow does not allow for mixing */
	else terrain_mask 2
	endif
}

if NO_SMALL_PONDS
elseif WATER_IS_DRY
elseif FREEZE_ALL_WATER
elseif FREEZE_PRIMARY_AND_SECONDARY_WATER
else
	start_random
		percent_chance 5 #define USE_SMALL_PONDS
	end_random
endif
if USE_SMALL_PONDS
	create_terrain WATER_A {
		base_terrain LAND_A
		set_avoid_player_start_areas
		set_flat_terrain_only
		spacing_to_other_terrain_types 3
		if WATER_BASED_MAP		land_percent 1
		elseif FOREST_BASED_MAP	land_percent 1
		else					land_percent 3
		endif
		number_of_clumps 3
		set_scale_by_groups
	}
else
	create_terrain LAND_D {
		base_terrain LAND_A
		spacing_to_other_terrain_types 0
		if WATER_BASED_MAP		land_percent 8
		elseif FOREST_BASED_MAP	land_percent 9
		else					land_percent 10
		endif
		number_of_clumps 10
		set_scale_by_groups
		if NO_TERRAIN_MASKING
		else terrain_mask 1
		endif
	}
endif


/* decide whether or not to use water terrain masking */
if MANGROVE_SWAMP_BIOME						#define NO_WATER_MASKING
elseif SWAMP								#define NO_WATER_MASKING
elseif FREEZE_PRIMARY_WATER					#define NO_WATER_MASKING
elseif FREEZE_PRIMARY_AND_SECONDARY_WATER	#define NO_WATER_MASKING
elseif WATER_IS_DRY							#define NO_WATER_MASKING
elseif DE_AVAILABLE	/* usually use water masking */
	start_random
		percent_chance 10	#define NO_WATER_MASKING
	end_random
else #define NO_WATER_MASKING
endif

if DE_AVAILABLE
	if WASTELAND_BIOME
	else
		start_random
			percent_chance 25	#define DE_PERFECT_WATER
		end_random
	endif
endif

/* water mixing */
if NO_WATER_MASKING	/* standard aoc water mixing */
	create_terrain WATER_B {
	base_terrain WATER_A
	number_of_clumps 10
	spacing_to_other_terrain_types 2
	land_percent 40
	set_scale_by_groups
	}
	create_terrain WATER_B {
	base_terrain WATER_A
	number_of_clumps 30
	spacing_to_other_terrain_types 1
	land_percent 1
	set_scale_by_groups
	}
	create_terrain WATER_C {
	base_terrain WATER_B
	number_of_clumps 8
	spacing_to_other_terrain_types 3
	land_percent 20
	set_scale_by_groups
	}
	create_terrain WATER_C {
	base_terrain WATER_B
	number_of_clumps 30
	spacing_to_other_terrain_types 1
	land_percent 1
	set_scale_by_groups
	}
	create_terrain WATER_B {
	base_terrain WATER_C
	number_of_clumps 30
	spacing_to_other_terrain_types 1
	land_percent 1
	set_scale_by_groups
	}
	create_terrain WATER_A {
	base_terrain WATER_B
	number_of_clumps 30
	spacing_to_other_terrain_types 1
	land_percent 1
	set_scale_by_groups
	}
elseif DE_PERFECT_WATER /* gradual transitions with masking; water only gets deeper, never shallower */
	create_terrain WATER {
		base_terrain DLC_WATER5
		land_percent 100
		number_of_clumps 9320
		terrain_mask 1
		spacing_to_other_terrain_types 1
	}
	create_terrain WATER {
		base_terrain DLC_WATER5
		land_percent 100
		number_of_clumps 9320
		spacing_to_other_terrain_types 2
	}
	create_terrain MED_WATER {
		base_terrain WATER
		land_percent 100
		number_of_clumps 9320
		terrain_mask 1
		spacing_to_other_terrain_types 1
	}
	create_terrain MED_WATER {
		base_terrain WATER
		land_percent 100
		number_of_clumps 9320
		spacing_to_other_terrain_types 2
	}
	create_terrain DEEP_WATER {
		base_terrain MED_WATER
		land_percent 100
		number_of_clumps 9320
		spacing_to_other_terrain_types 1
		terrain_mask 1
	}
	create_terrain DEEP_WATER {
		base_terrain MED_WATER
		land_percent 100
		number_of_clumps 9320
		spacing_to_other_terrain_types 2
	}
	create_terrain DLC_WATER4 {
		base_terrain DEEP_WATER
		land_percent 100
		number_of_clumps 9320
		spacing_to_other_terrain_types 1
		terrain_mask 1
	}
	create_terrain DLC_WATER4 {
		base_terrain DEEP_WATER
		land_percent 100
		number_of_clumps 9320
		spacing_to_other_terrain_types 2
	}
else /* use the new DE mixing with masking */
	create_terrain WATER_B {
	base_terrain WATER_A
	number_of_clumps 10
	spacing_to_other_terrain_types 2
	land_percent 40
	}
	create_terrain WATER_B {
	base_terrain WATER_A
	number_of_clumps 10
	spacing_to_other_terrain_types 2
	land_percent 40
	}
	create_terrain WATER_C {
	base_terrain WATER_B
	number_of_clumps 1000
	spacing_to_other_terrain_types 3
	land_percent 100
	}
	create_terrain WATER_A {
	base_terrain WATER_B
	number_of_clumps 1000
	spacing_to_other_terrain_types 0
	land_percent 100
	terrain_mask 2
	}
	create_terrain WATER_B {
	base_terrain WATER_C
	number_of_clumps 1000
	spacing_to_other_terrain_types 0
	land_percent 100
	}
	create_terrain WATER_B {
	base_terrain WATER_C
	number_of_clumps 1000
	spacing_to_other_terrain_types 0
	land_percent 100
	}
	create_terrain WATER_C {
	base_terrain WATER_B
	number_of_clumps 12
	spacing_to_other_terrain_types 3
	land_percent 20
	}
	create_terrain WATER_C {
	base_terrain WATER_C
	number_of_clumps 6
	spacing_to_other_terrain_types 9
	land_percent 2
	}
	create_terrain WATER_B {
	base_terrain WATER_C
	number_of_clumps 1000
	spacing_to_other_terrain_types 0
	land_percent 100
	terrain_mask 2
	}
	create_terrain WATER_B {
	base_terrain WATER_C
	number_of_clumps 1000
	spacing_to_other_terrain_types 0
	land_percent 100
	terrain_mask 2
	}
endif

/* cosmetic addition of brown or green water */
#const WATER_GREEN 95
#const WATER_BROWN 96

if NO_WATER_MASKING
	if DE_AVAILABLE
		start_random
			percent_chance 33	#const WATER_MASK 95
			percent_chance 33	#const WATER_MASK 96
			percent_chance 34	#define NO_GREEN_BROWN_MASKING
		end_random
	endif
endif

if NO_GREEN_BROWN_MASKING
else
	create_terrain WATER_MASK {
	base_terrain WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain MED_WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain MED_WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain MED_WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain MED_WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DEEP_WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DEEP_WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DEEP_WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DEEP_WATER
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DLC_WATER4
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DLC_WATER4
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DLC_WATER4
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DLC_WATER4
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DLC_WATER5
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DLC_WATER5
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DLC_WATER5
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
	create_terrain WATER_MASK {
	base_terrain DLC_WATER5
	land_percent 10
	number_of_clumps 9320
	set_scale_by_groups
	terrain_mask rnd(1,2)
	}
endif





/* cosmetic terrain masking to make large navigable ice more apparent as such */
#const ICE_SHALLOWS 26
if DE_AVAILABLE
	create_terrain WATER {
	base_terrain ICE_SHALLOWS
	number_of_clumps 9320
	spacing_to_other_terrain_types 0
	land_percent 100
	terrain_mask 1
	}
endif

/* =================================================================================================== */
<CONNECTION_GENERATION>

/* determine which connections are needed */
if SPECIAL_CENTER
	if DE_AVAILABLE
		#define CONNECT_TO_NEUTRAL_LANDS_ONLY
	else
		#define CONNECT_EVERYTHING_ACROSS_FOREST
		#define CONNECT_CENTER_ACROSS_WATER
	endif
elseif USE_MICHI_STYLE
	if USE_NOMAD_SETUP
		#define CONNECT_EVERYTHING_ACROSS_FOREST	/* to prevent isolated villgers */
	elseif TEAM_ZONES
		if FIXED_POSITIONS
			#define CONNECT_TEAMS
		else
			#define CONNECT_PLAYERS   /* to make it fair */
		endif
	elseif INDIVIDUAL_ZONES
		#define NO_CONNECTIONS
	elseif RANDOM_ZONES
		#define CONNECT_PLAYERS   /* to make it fair */
	elseif ONE_ZONE					/* not actually michi */
		if FIXED_POSITIONS
			#define CONNECT_PLAYERS
			#define CONNECT_TEAMS
		else
			#define CONNECT_PLAYERS
		endif
	endif
elseif USE_ISLANDS_STYLE
	if TEAM_ZONES
		#define CONNECT_TEAMS
	elseif INDIVIDUAL_ZONES
		#define NO_CONNECTIONS
	elseif RANDOM_ZONES
		#define NO_CONNECTIONS
	elseif ONE_ZONE					/* one continent */
		if FIXED_POSITIONS
			#define CONNECT_PLAYERS
			#define CONNECT_TEAMS
		else
			#define CONNECT_PLAYERS
		endif
	endif
elseif WATER_BASED_MAP
	if CENTER_IS_WATER
	else
		#define CONNECT_CENTER_ACROSS_WATER
	endif
	if FIXED_POSITIONS
		#define CONNECT_PLAYERS
		#define CONNECT_TEAMS
	else
		#define CONNECT_PLAYERS
	endif
elseif FOREST_BASED_MAP
	if USE_NOMAD_SETUP
		#define CONNECT_EVERYTHING_ACROSS_FOREST
	elseif FIXED_POSITIONS
		#define CONNECT_PLAYERS
		#define CONNECT_TEAMS
	else
		#define CONNECT_PLAYERS
	endif
elseif FIXED_POSITIONS
	#define CONNECT_PLAYERS
	#define CONNECT_TEAMS
else
	#define CONNECT_PLAYERS
endif


if USE_NOMAD_SETUP
	if WATER_BASED_MAP
		if NO_CONNECTIONS
		else	#define USE_LAND_NOMAD_RESOURCES
		endif
	else	#define USE_LAND_NOMAD_RESOURCES
	endif
endif


/* define all undefined terrains first */
#const ICYSHORE 37
#const DIRT_GRASS_FOUNDATION 27
#const DIRT_SNOW_FOUNDATION 36
#const FARM1 29
#const FARM2 30
#const FARM3 31
#const FARM_PLANTED 7
#const FARM_DEAD 8
#const ICE_SHALLOWS 26
#const DLC_ROCK 40
#const ROAD_FUNGUS 39
#const WATER_NOBEACH 15
#const WATER_WALKABLE 28

if WOLOLOKINGDOMS
	#const ROAD_SNOW 33
	#const OAK_FOREST 10
	#const CLIFF_GRASS 0
	#const RICE_FARM1 29
	#const RICE_FARM2 30
	#const RICE_FARM3 31
	#const RICE_FARM_PLANTED 7
	#const RICE_FARM_DEAD 8
else
	#const ROAD_SNOW 38
	#const OAK_FOREST 20
	#const CLIFF_GRASS 16
	#const RICE_FARM1 65
	#const RICE_FARM2 66
	#const RICE_FARM3 67
	#const RICE_FARM_PLANTED 63
	#const RICE_FARM_DEAD 64
endif

/* and define the normal terrains too */
#const  BAMBOO            18
#const  BEACH             2
#const  DESERT            14
#const  DIRT              6
#const  DIRT2             11
#const  DIRT3             3
#const  FOREST            10
#const  ROCK1             16
#const  GRASS             0
#const  GRASS2            12
#const  GRASS3            9
#const  ICE               35
#const  SNOW              32
#const  GRASS_SNOW        34
#const  DIRT_SNOW         33
#const  JUNGLE            17
#const  LEAVES            5
#const  PALM_DESERT       13
#const  PINE_FOREST       19
#const  SNOW_FOREST       21
#const  SHALLOW           4
#const  WATER             1
#const  MED_WATER         23
#const  DEEP_WATER        22
#const  ROAD              24
#const  ROAD2             25

/* and then the dlc terrains */
if WOLOLOKINGDOMS
	#const DLC_SAVANNAH 14
	#const DLC_DIRT4 3
	#const DLC_DRYROAD 25
	#const DLC_MOORLAND 9
	#const DLC_CRACKED 38
	#const DLC_QUICKSAND 40
	#const DLC_BLACK 47
	#const DLC_BAOBABFOREST 16
	#const DLC_DRAGONFOREST 21
	#const DLC_ACACIAFOREST 41
	#const DLC_BEACH2 2
	#const DLC_BEACH3 2
	#const DLC_BEACH4 2
	#const DLC_MANGROVESHALLOW 11
	#const DLC_MANGROVEFOREST 20
	#const DLC_RAINFOREST 10
	#const DLC_WATER4 22
	#const DLC_WATER5 1
	#const DLC_NEWSHALLOW 4
	#const DLC_JUNGLEGRASS 12
	#const DLC_JUNGLEROAD 39
	#const DLC_JUNGLELEAVES 5
else
	#const DLC_SAVANNAH 41
	#const DLC_DIRT4 42
	#const DLC_DRYROAD 43
	#const DLC_MOORLAND 44
	#const DLC_CRACKED 45
	#const DLC_QUICKSAND 46
	#const DLC_BLACK 47
	#const DLC_BAOBABFOREST 49
	#const DLC_DRAGONFOREST 48
	#const DLC_ACACIAFOREST 50
	#const DLC_BEACH2 51
	#const DLC_BEACH3 52
	#const DLC_BEACH4 53
	#const DLC_MANGROVESHALLOW 54
	#const DLC_MANGROVEFOREST 55
	#const DLC_RAINFOREST 56
	#const DLC_WATER4 57
	#const DLC_WATER5 58
	#const DLC_NEWSHALLOW 59
	#const DLC_JUNGLEGRASS 60
	#const DLC_JUNGLEROAD 61
	#const DLC_JUNGLELEAVES 62
endif

/* definitive edition terrains */
#const GRAVEL 70
#const UNDERBRUSH_LEAVES 71
#const SNOW_UNDERBRUSH 72
#const SNOW_LIGHT 73
#const SNOW_HEAVY 74
#const ROAD_FUNGUS_NEW 75
#const MUD 76
#const UNDERBRUSH_JUNGLE 77
#const ROAD_GRAVEL_NEW 78
#const BEACH_BUILDABLE 79
#const WET_BEACH_BUILDABLE 80
#const WET_GRAVEL_BUILDABLE 81
#const WET_ROCK_BUILDABLE 82
#const JUNGLE_GRASS_NEW 83
#const MEDITERRANEAN_FOREST 88
#const BUSH_FOREST 89
#const REED_FOREST_SHALLOWS 90
#const DLC_REEDSBEACH 91
#const REED_FOREST 92
#const WATER_GREEN 95
#const WATER_BROWN 96
#const DLC_DRYGRASS 100
#const DLC_BOGLAND 101
#const DLC_DESERTGRAVEL 102
#const DLC_ROADGRAVEL 103
#const DLC_FORESTAUTUMN 104
#const DLC_FORESTSNOWAUTUMN 105
#const DLC_FORESTDEAD 106
#const DLC_WETBEACH 107
#const DLC_GRAVELBEACH 108
#const DLC_WETROCKBEACH 109

start_random
	percent_chance 50	#define STANDARD_CONNECTIONS
	percent_chance 30	#define WIDE_CONNECTIONS
	percent_chance 20	#define VERY_WIDE_CONNECTIONS
end_random


/* first create custom beaches */
create_connect_all_lands {
replace_terrain BEACH BEACH_A
replace_terrain ICYSHORE BEACH_A
terrain_size BEACH 999 0
terrain_size ICYSHORE 999 0
}

if CONNECT_TO_NEUTRAL_LANDS_ONLY
create_connect_to_nonplayer_land  /* currently buggy so it can +only+ be used alone */
{
replace_terrain WATER SHALLOWS_A
replace_terrain WATER_NOBEACH SHALLOWS_A
replace_terrain MED_WATER SHALLOWS_A
replace_terrain DEEP_WATER SHALLOWS_A
if DLC
	replace_terrain DLC_WATER5 SHALLOWS_A
	replace_terrain DLC_WATER4 SHALLOWS_A
endif
if DE_AVAILABLE
	replace_terrain WATER_GREEN SHALLOWS_A
	replace_terrain WATER_BROWN SHALLOWS_A
endif

terrain_cost WATER 3
terrain_cost WATER_NOBEACH 3
terrain_cost MED_WATER 3
terrain_cost DEEP_WATER 3
if WOLOLOKINGDOMS else terrain_cost CLIFF_GRASS 15 endif
if DLC
	terrain_cost DLC_WATER5 3
	terrain_cost DLC_WATER4 5
endif
if DE_AVAILABLE
	terrain_cost WATER_GREEN 3
	terrain_cost WATER_BROWN 3
endif

if WIDE_CONNECTIONS
	terrain_size WATER 6 1
	terrain_size WATER_NOBEACH 6 1
	terrain_size MED_WATER 6 1
	terrain_size DEEP_WATER 6 1
	if DLC
		terrain_size DLC_WATER5 6 1
		terrain_size DLC_WATER4 6 1
	endif
	if DE_AVAILABLE
		terrain_size WATER_GREEN 6 1
		terrain_size WATER_BROWN 6 1
	endif
elseif VERY_WIDE_CONNECTIONS
	terrain_size WATER 12 1
	terrain_size WATER_NOBEACH 12 1
	terrain_size MED_WATER 12 1
	terrain_size DEEP_WATER 12 1
	if DLC
		terrain_size DLC_WATER5 12 1
		terrain_size DLC_WATER4 12 1
	endif
	if DE_AVAILABLE
		terrain_size WATER_GREEN 12 1
		terrain_size WATER_BROWN 12 1
	endif
else
	terrain_size WATER 3 1
	terrain_size WATER_NOBEACH 3 1
	terrain_size MED_WATER 3 1
	terrain_size DEEP_WATER 3 1
	if DLC
		terrain_size DLC_WATER5 3 1
		terrain_size DLC_WATER4 3 1
	endif
	if DE_AVAILABLE
		terrain_size WATER_GREEN 3 1
		terrain_size WATER_BROWN 3 1
	endif
endif

replace_terrain BAMBOO LEAVES
replace_terrain FOREST LEAVES
replace_terrain OAK_FOREST LEAVES
replace_terrain JUNGLE LEAVES
replace_terrain PALM_DESERT DESERT
replace_terrain PINE_FOREST LEAVES
if DE_AVAILABLE replace_terrain SNOW_FOREST SNOW_UNDERBRUSH else replace_terrain SNOW_FOREST GRASS_SNOW endif
if DLC
	replace_terrain DLC_DRAGONFOREST DIRT
	replace_terrain DLC_BAOBABFOREST DLC_DIRT4
	replace_terrain DLC_ACACIAFOREST DLC_SAVANNAH
	replace_terrain DLC_MANGROVEFOREST DLC_MANGROVESHALLOW
	replace_terrain DLC_RAINFOREST DLC_JUNGLELEAVES
endif
if DE_AVAILABLE
	replace_terrain MEDITERRANEAN_FOREST UNDERBRUSH_LEAVES
	replace_terrain BUSH_FOREST UNDERBRUSH_LEAVES
	replace_terrain REED_FOREST_SHALLOWS SHALLOW
	replace_terrain DLC_REEDSBEACH DLC_WETBEACH
	replace_terrain REED_FOREST UNDERBRUSH_LEAVES
	replace_terrain DLC_FORESTAUTUMN UNDERBRUSH_LEAVES
	replace_terrain DLC_FORESTSNOWAUTUMN SNOW_UNDERBRUSH
	replace_terrain DLC_FORESTDEAD SNOW_UNDERBRUSH
endif

terrain_cost BAMBOO 3
terrain_cost FOREST 3
terrain_cost OAK_FOREST 3
terrain_cost JUNGLE 3
terrain_cost PALM_DESERT 3
terrain_cost PINE_FOREST 3
terrain_cost SNOW_FOREST 3
if WOLOLOKINGDOMS else terrain_cost CLIFF_GRASS 15 endif
if DLC
	terrain_cost DLC_DRAGONFOREST 3
	terrain_cost DLC_BAOBABFOREST 3
	terrain_cost DLC_ACACIAFOREST 3
	terrain_cost DLC_MANGROVEFOREST 3
	terrain_cost DLC_RAINFOREST 3
endif
if DE_AVAILABLE
	terrain_cost MEDITERRANEAN_FOREST 3
	terrain_cost BUSH_FOREST 3
	terrain_cost REED_FOREST_SHALLOWS 3
	terrain_cost DLC_REEDSBEACH 3
	terrain_cost REED_FOREST 3
	terrain_cost DLC_FORESTAUTUMN 3
	terrain_cost DLC_FORESTSNOWAUTUMN 3
	terrain_cost DLC_FORESTDEAD 3
endif

if WIDE_CONNECTIONS
	terrain_size BAMBOO 10 1
	terrain_size FOREST 10 1
	terrain_size OAK_FOREST 10 1
	terrain_size JUNGLE 10 1
	terrain_size PALM_DESERT 10 1
	terrain_size PINE_FOREST 10 1
	terrain_size SNOW_FOREST 10 1
	if DLC
		terrain_size DLC_DRAGONFOREST 10 1
		terrain_size DLC_BAOBABFOREST 10 1
		terrain_size DLC_ACACIAFOREST 10 1
		terrain_size DLC_MANGROVEFOREST 10 1
		terrain_size DLC_RAINFOREST 10 1
	endif
	if DE_AVAILABLE
		terrain_size MEDITERRANEAN_FOREST 10 1
		terrain_size BUSH_FOREST 10 1
		terrain_size REED_FOREST_SHALLOWS 10 1
		terrain_size DLC_REEDSBEACH 10 1
		terrain_size REED_FOREST 10 1
		terrain_size DLC_FORESTAUTUMN 10 1
		terrain_size DLC_FORESTSNOWAUTUMN 10 1
		terrain_size DLC_FORESTDEAD 10 1
	endif
elseif VERY_WIDE_CONNECTIONS
	terrain_size BAMBOO 15 1
	terrain_size FOREST 15 1
	terrain_size OAK_FOREST 15 1
	terrain_size JUNGLE 15 1
	terrain_size PALM_DESERT 15 1
	terrain_size PINE_FOREST 15 1
	terrain_size SNOW_FOREST 15 1
	if DLC
		terrain_size DLC_DRAGONFOREST 15 1
		terrain_size DLC_BAOBABFOREST 15 1
		terrain_size DLC_ACACIAFOREST 15 1
		terrain_size DLC_MANGROVEFOREST 15 1
		terrain_size DLC_RAINFOREST 15 1
	endif
	if DE_AVAILABLE
		terrain_size MEDITERRANEAN_FOREST 15 1
		terrain_size BUSH_FOREST 15 1
		terrain_size REED_FOREST_SHALLOWS 15 1
		terrain_size DLC_REEDSBEACH 15 1
		terrain_size REED_FOREST 15 1
		terrain_size DLC_FORESTAUTUMN 15 1
		terrain_size DLC_FORESTSNOWAUTUMN 15 1
		terrain_size DLC_FORESTDEAD 15 1
	endif
else
	terrain_size BAMBOO 5 1
	terrain_size FOREST 5 1
	terrain_size OAK_FOREST 5 1
	terrain_size JUNGLE 5 1
	terrain_size PALM_DESERT 5 1
	terrain_size PINE_FOREST 5 1
	terrain_size SNOW_FOREST 5 1
	if DLC
		terrain_size DLC_DRAGONFOREST 5 1
		terrain_size DLC_BAOBABFOREST 5 1
		terrain_size DLC_ACACIAFOREST 5 1
		terrain_size DLC_MANGROVEFOREST 5 1
		terrain_size DLC_RAINFOREST 5 1
	endif
	if DE_AVAILABLE
		terrain_size MEDITERRANEAN_FOREST 5 1
		terrain_size BUSH_FOREST 5 1
		terrain_size REED_FOREST_SHALLOWS 5 1
		terrain_size DLC_REEDSBEACH 5 1
		terrain_size REED_FOREST 5 1
		terrain_size DLC_FORESTAUTUMN 5 1
		terrain_size DLC_FORESTSNOWAUTUMN 5 1
		terrain_size DLC_FORESTDEAD 5 1
	endif
endif
}
endif

if CONNECT_CENTER_ACROSS_WATER
if DE_AVAILABLE
	if CONNECT_PLAYERS	create_connect_all_lands
	elseif CONNECT_TEAMS	create_connect_all_lands
	elseif CONNECT_EVERYTHING_ACROSS_FOREST	create_connect_all_lands
	else	create_connect_to_nonplayer_land  /* currently buggy so it can +only+ be used alone */
	endif
else
	create_connect_all_lands
endif
{
replace_terrain WATER SHALLOWS_A
replace_terrain WATER_NOBEACH SHALLOWS_A
replace_terrain MED_WATER SHALLOWS_A
replace_terrain DEEP_WATER SHALLOWS_A
if DLC
	replace_terrain DLC_WATER5 SHALLOWS_A
	replace_terrain DLC_WATER4 SHALLOWS_A
endif
if DE_AVAILABLE
	replace_terrain WATER_GREEN SHALLOWS_A
	replace_terrain WATER_BROWN SHALLOWS_A
endif

terrain_cost WATER 3
terrain_cost WATER_NOBEACH 3
terrain_cost MED_WATER 4
terrain_cost DEEP_WATER 5
if WOLOLOKINGDOMS else terrain_cost CLIFF_GRASS 15 endif
if DLC
	terrain_cost DLC_WATER5 3
	terrain_cost DLC_WATER4 5
endif
if DE_AVAILABLE
	terrain_cost WATER_GREEN 3
	terrain_cost WATER_BROWN 3
endif

if WIDE_CONNECTIONS
	terrain_size WATER 6 1
	terrain_size WATER_NOBEACH 6 1
	terrain_size MED_WATER 6 1
	terrain_size DEEP_WATER 6 1
	if DLC
		terrain_size DLC_WATER5 6 1
		terrain_size DLC_WATER4 6 1
	endif
	if DE_AVAILABLE
		terrain_size WATER_GREEN 6 1
		terrain_size WATER_BROWN 6 1
	endif
elseif VERY_WIDE_CONNECTIONS
	terrain_size WATER 12 1
	terrain_size WATER_NOBEACH 12 1
	terrain_size MED_WATER 12 1
	terrain_size DEEP_WATER 12 1
	if DLC
		terrain_size DLC_WATER5 12 1
		terrain_size DLC_WATER4 12 1
	endif
	if DE_AVAILABLE
		terrain_size WATER_GREEN 12 1
		terrain_size WATER_BROWN 12 1
	endif
else
	terrain_size WATER 3 1
	terrain_size WATER_NOBEACH 3 1
	terrain_size MED_WATER 3 1
	terrain_size DEEP_WATER 3 1
	if DLC
		terrain_size DLC_WATER5 3 1
		terrain_size DLC_WATER4 3 1
	endif
	if DE_AVAILABLE
		terrain_size WATER_GREEN 3 1
		terrain_size WATER_BROWN 3 1
	endif
endif
}
endif

if CONNECT_EVERYTHING_ACROSS_FOREST
create_connect_all_lands
{
replace_terrain BAMBOO LEAVES
replace_terrain FOREST LEAVES
replace_terrain OAK_FOREST LEAVES
replace_terrain JUNGLE LEAVES
replace_terrain PALM_DESERT DESERT
replace_terrain PINE_FOREST LEAVES
if DE_AVAILABLE replace_terrain SNOW_FOREST SNOW_UNDERBRUSH else replace_terrain SNOW_FOREST GRASS_SNOW endif
if DLC
	replace_terrain DLC_DRAGONFOREST DIRT
	replace_terrain DLC_BAOBABFOREST DLC_DIRT4
	replace_terrain DLC_ACACIAFOREST DLC_SAVANNAH
	replace_terrain DLC_MANGROVEFOREST DLC_MANGROVESHALLOW
	replace_terrain DLC_RAINFOREST DLC_JUNGLELEAVES
endif
if DE_AVAILABLE
	replace_terrain MEDITERRANEAN_FOREST UNDERBRUSH_LEAVES
	replace_terrain BUSH_FOREST UNDERBRUSH_LEAVES
	replace_terrain REED_FOREST_SHALLOWS SHALLOW
	replace_terrain DLC_REEDSBEACH DLC_WETBEACH
	replace_terrain REED_FOREST UNDERBRUSH_LEAVES
	replace_terrain DLC_FORESTAUTUMN UNDERBRUSH_LEAVES
	replace_terrain DLC_FORESTSNOWAUTUMN SNOW_UNDERBRUSH
	replace_terrain DLC_FORESTDEAD SNOW_UNDERBRUSH
endif

terrain_cost BAMBOO 3
terrain_cost FOREST 3
terrain_cost OAK_FOREST 3
terrain_cost JUNGLE 3
terrain_cost PALM_DESERT 3
terrain_cost PINE_FOREST 3
terrain_cost SNOW_FOREST 3
if WOLOLOKINGDOMS else terrain_cost CLIFF_GRASS 15 endif
if DLC
	terrain_cost DLC_DRAGONFOREST 3
	terrain_cost DLC_BAOBABFOREST 3
	terrain_cost DLC_ACACIAFOREST 3
	terrain_cost DLC_MANGROVEFOREST 3
	terrain_cost DLC_RAINFOREST 3
endif
if DE_AVAILABLE
	terrain_cost MEDITERRANEAN_FOREST 3
	terrain_cost BUSH_FOREST 3
	terrain_cost REED_FOREST_SHALLOWS 3
	terrain_cost DLC_REEDSBEACH 3
	terrain_cost REED_FOREST 3
	terrain_cost DLC_FORESTAUTUMN 3
	terrain_cost DLC_FORESTSNOWAUTUMN 3
	terrain_cost DLC_FORESTDEAD 3
endif

if WIDE_CONNECTIONS
	terrain_size BAMBOO 10 1
	terrain_size FOREST 10 1
	terrain_size OAK_FOREST 10 1
	terrain_size JUNGLE 10 1
	terrain_size PALM_DESERT 10 1
	terrain_size PINE_FOREST 10 1
	terrain_size SNOW_FOREST 10 1
	if DLC
		terrain_size DLC_DRAGONFOREST 10 1
		terrain_size DLC_BAOBABFOREST 10 1
		terrain_size DLC_ACACIAFOREST 10 1
		terrain_size DLC_MANGROVEFOREST 10 1
		terrain_size DLC_RAINFOREST 10 1
	endif
	if DE_AVAILABLE
		terrain_size MEDITERRANEAN_FOREST 10 1
		terrain_size BUSH_FOREST 10 1
		terrain_size REED_FOREST_SHALLOWS 10 1
		terrain_size DLC_REEDSBEACH 10 1
		terrain_size REED_FOREST 10 1
		terrain_size DLC_FORESTAUTUMN 10 1
		terrain_size DLC_FORESTSNOWAUTUMN 10 1
		terrain_size DLC_FORESTDEAD 10 1
	endif
elseif VERY_WIDE_CONNECTIONS
	terrain_size BAMBOO 15 1
	terrain_size FOREST 15 1
	terrain_size OAK_FOREST 15 1
	terrain_size JUNGLE 15 1
	terrain_size PALM_DESERT 15 1
	terrain_size PINE_FOREST 15 1
	terrain_size SNOW_FOREST 15 1
	if DLC
		terrain_size DLC_DRAGONFOREST 15 1
		terrain_size DLC_BAOBABFOREST 15 1
		terrain_size DLC_ACACIAFOREST 15 1
		terrain_size DLC_MANGROVEFOREST 15 1
		terrain_size DLC_RAINFOREST 15 1
	endif
	if DE_AVAILABLE
		terrain_size MEDITERRANEAN_FOREST 15 1
		terrain_size BUSH_FOREST 15 1
		terrain_size REED_FOREST_SHALLOWS 15 1
		terrain_size DLC_REEDSBEACH 15 1
		terrain_size REED_FOREST 5 1
		terrain_size DLC_FORESTAUTUMN 15 1
		terrain_size DLC_FORESTSNOWAUTUMN 15 1
		terrain_size DLC_FORESTDEAD 15 1
	endif
else
	terrain_size BAMBOO 5 1
	terrain_size FOREST 5 1
	terrain_size OAK_FOREST 5 1
	terrain_size JUNGLE 5 1
	terrain_size PALM_DESERT 5 1
	terrain_size PINE_FOREST 5 1
	terrain_size SNOW_FOREST 5 1
	if DLC
		terrain_size DLC_DRAGONFOREST 5 1
		terrain_size DLC_BAOBABFOREST 5 1
		terrain_size DLC_ACACIAFOREST 5 1
		terrain_size DLC_MANGROVEFOREST 5 1
		terrain_size DLC_RAINFOREST 5 1
	endif
	if DE_AVAILABLE
		terrain_size MEDITERRANEAN_FOREST 5 1
		terrain_size BUSH_FOREST 5 1
		terrain_size REED_FOREST_SHALLOWS 5 1
		terrain_size DLC_REEDSBEACH 5 1
		terrain_size REED_FOREST 5 1
		terrain_size DLC_FORESTAUTUMN 5 1
		terrain_size DLC_FORESTSNOWAUTUMN 5 1
		terrain_size DLC_FORESTDEAD 5 1
	endif
endif
}
endif

if CONNECT_PLAYERS
create_connect_all_players_land {
replace_terrain BAMBOO LEAVES
replace_terrain FOREST LEAVES
replace_terrain OAK_FOREST LEAVES
replace_terrain JUNGLE LEAVES
replace_terrain PALM_DESERT DESERT
replace_terrain PINE_FOREST LEAVES
if DE_AVAILABLE replace_terrain SNOW_FOREST SNOW_UNDERBRUSH else replace_terrain SNOW_FOREST GRASS_SNOW endif
replace_terrain WATER SHALLOWS_A
replace_terrain WATER_NOBEACH SHALLOWS_A
replace_terrain MED_WATER SHALLOWS_A
replace_terrain DEEP_WATER SHALLOWS_A
if DLC
	replace_terrain DLC_DRAGONFOREST DIRT
	replace_terrain DLC_BAOBABFOREST DLC_DIRT4
	replace_terrain DLC_ACACIAFOREST DLC_SAVANNAH
	replace_terrain DLC_MANGROVEFOREST DLC_MANGROVESHALLOW
	replace_terrain DLC_RAINFOREST DLC_JUNGLELEAVES
	replace_terrain DLC_WATER5 SHALLOWS_A
	replace_terrain DLC_WATER4 SHALLOWS_A
endif
if DE_AVAILABLE
	replace_terrain MEDITERRANEAN_FOREST UNDERBRUSH_LEAVES
	replace_terrain BUSH_FOREST UNDERBRUSH_LEAVES
	replace_terrain REED_FOREST_SHALLOWS SHALLOW
	replace_terrain DLC_REEDSBEACH DLC_WETBEACH
	replace_terrain REED_FOREST UNDERBRUSH_LEAVES
	replace_terrain DLC_FORESTAUTUMN UNDERBRUSH_LEAVES
	replace_terrain DLC_FORESTSNOWAUTUMN SNOW_UNDERBRUSH
	replace_terrain DLC_FORESTDEAD SNOW_UNDERBRUSH
	replace_terrain WATER_GREEN SHALLOWS_A
	replace_terrain WATER_BROWN SHALLOWS_A
endif

terrain_cost BAMBOO 3
terrain_cost FOREST 3
terrain_cost OAK_FOREST 3
terrain_cost JUNGLE 3
terrain_cost PALM_DESERT 3
terrain_cost PINE_FOREST 3
terrain_cost SNOW_FOREST 3
terrain_cost WATER 5
terrain_cost WATER_NOBEACH 5
terrain_cost MED_WATER 6
terrain_cost DEEP_WATER 8
if WOLOLOKINGDOMS else terrain_cost CLIFF_GRASS 15 endif
if DLC
	terrain_cost DLC_DRAGONFOREST 3
	terrain_cost DLC_BAOBABFOREST 3
	terrain_cost DLC_ACACIAFOREST 3
	terrain_cost DLC_MANGROVEFOREST 3
	terrain_cost DLC_RAINFOREST 3
	terrain_cost DLC_WATER5 5
	terrain_cost DLC_WATER4 9
endif
if DE_AVAILABLE
	terrain_cost MEDITERRANEAN_FOREST 3
	terrain_cost BUSH_FOREST 3
	terrain_cost REED_FOREST_SHALLOWS 3
	terrain_cost DLC_REEDSBEACH 3
	terrain_cost REED_FOREST 3
	terrain_cost DLC_FORESTAUTUMN 3
	terrain_cost DLC_FORESTSNOWAUTUMN 3
	terrain_cost DLC_FORESTDEAD 3
	terrain_cost WATER_GREEN 5
	terrain_cost WATER_BROWN 5
endif

if WIDE_CONNECTIONS
	terrain_size BAMBOO 10 1
	terrain_size FOREST 10 1
	terrain_size OAK_FOREST 10 1
	terrain_size JUNGLE 10 1
	terrain_size PALM_DESERT 10 1
	terrain_size PINE_FOREST 10 1
	terrain_size SNOW_FOREST 10 1
	terrain_size WATER 6 1      /* wider connections when fewer players? */
	terrain_size WATER_NOBEACH 6 1
	terrain_size MED_WATER 6 1
	terrain_size DEEP_WATER 6 1
	if DLC
		terrain_size DLC_DRAGONFOREST 10 1
		terrain_size DLC_BAOBABFOREST 10 1
		terrain_size DLC_ACACIAFOREST 10 1
		terrain_size DLC_MANGROVEFOREST 10 1
		terrain_size DLC_RAINFOREST 10 1
		terrain_size DLC_WATER5 6 1
		terrain_size DLC_WATER4 6 1
	endif
	if DE_AVAILABLE
		terrain_size MEDITERRANEAN_FOREST 10 1
		terrain_size BUSH_FOREST 10 1
		terrain_size REED_FOREST_SHALLOWS 10 1
		terrain_size DLC_REEDSBEACH 10 1
		terrain_size REED_FOREST 10 1
		terrain_size DLC_FORESTAUTUMN 10 1
		terrain_size DLC_FORESTSNOWAUTUMN 10 1
		terrain_size DLC_FORESTDEAD 10 1
		terrain_size WATER_GREEN 6 1
		terrain_size WATER_BROWN 6 1
	endif
elseif VERY_WIDE_CONNECTIONS
	terrain_size BAMBOO 15 1
	terrain_size FOREST 15 1
	terrain_size OAK_FOREST 15 1
	terrain_size JUNGLE 15 1
	terrain_size PALM_DESERT 15 1
	terrain_size PINE_FOREST 15 1
	terrain_size SNOW_FOREST 15 1
	terrain_size WATER 12 1
	terrain_size WATER_NOBEACH 12 1
	terrain_size MED_WATER 12 1
	terrain_size DEEP_WATER 12 1
	if DLC
		terrain_size DLC_DRAGONFOREST 15 1
		terrain_size DLC_BAOBABFOREST 15 1
		terrain_size DLC_ACACIAFOREST 15 1
		terrain_size DLC_MANGROVEFOREST 15 1
		terrain_size DLC_RAINFOREST 15 1
		terrain_size DLC_WATER5 12 1
		terrain_size DLC_WATER4 12 1
	endif
	if DE_AVAILABLE
		terrain_size MEDITERRANEAN_FOREST 15 1
		terrain_size BUSH_FOREST 15 1
		terrain_size REED_FOREST_SHALLOWS 15 1
		terrain_size DLC_REEDSBEACH 15 1
		terrain_size REED_FOREST 15 1
		terrain_size DLC_FORESTAUTUMN 15 1
		terrain_size DLC_FORESTSNOWAUTUMN 15 1
		terrain_size DLC_FORESTDEAD 15 1
		terrain_size WATER_GREEN 12 1
		terrain_size WATER_BROWN 12 1
	endif
else
	terrain_size BAMBOO 5 1
	terrain_size FOREST 5 1
	terrain_size OAK_FOREST 5 1
	terrain_size JUNGLE 5 1
	terrain_size PALM_DESERT 5 1
	terrain_size PINE_FOREST 5 1
	terrain_size SNOW_FOREST 5 1
	terrain_size WATER 3 1
	terrain_size WATER_NOBEACH 3 1
	terrain_size MED_WATER 3 1
	terrain_size DEEP_WATER 3 1
	if DLC
		terrain_size DLC_DRAGONFOREST 5 1
		terrain_size DLC_BAOBABFOREST 5 1
		terrain_size DLC_ACACIAFOREST 5 1
		terrain_size DLC_MANGROVEFOREST 5 1
		terrain_size DLC_RAINFOREST 5 1
		terrain_size DLC_WATER5 3 1
		terrain_size DLC_WATER4 3 1
	endif
	if DE_AVAILABLE
		terrain_size MEDITERRANEAN_FOREST 5 1
		terrain_size BUSH_FOREST 5 1
		terrain_size REED_FOREST_SHALLOWS 5 1
		terrain_size DLC_REEDSBEACH 5 1
		terrain_size REED_FOREST 5 1
		terrain_size DLC_FORESTAUTUMN 5 1
		terrain_size DLC_FORESTSNOWAUTUMN 5 1
		terrain_size DLC_FORESTDEAD 5 1
		terrain_size WATER_GREEN 3 1
		terrain_size WATER_BROWN 3 1
	endif
endif
}
endif

if USE_NOMAD_SETUP
else
if CONNECT_TEAMS
create_connect_teams_lands {
default_terrain_replacement ROAD_A

replace_terrain BEACH BEACH
replace_terrain ICYSHORE ICYSHORE
replace_terrain ICE ICE
replace_terrain ICE_SHALLOWS ICE_SHALLOWS
replace_terrain DLC_ROCK DLC_ROCK
replace_terrain SHALLOW SHALLOW
replace_terrain ROAD ROAD
replace_terrain ROAD2 ROAD2
replace_terrain ROAD_FUNGUS ROAD_FUNGUS
replace_terrain ROAD_SNOW ROAD_SNOW
replace_terrain WATER SHALLOWS_A
replace_terrain WATER_NOBEACH SHALLOWS_A
replace_terrain MED_WATER SHALLOWS_A
replace_terrain DEEP_WATER SHALLOWS_A
if DLC
	replace_terrain DLC_CRACKED DLC_DRYROAD
	replace_terrain DLC_DRYROAD DLC_DRYROAD
	replace_terrain DLC_QUICKSAND DLC_QUICKSAND
	replace_terrain DLC_BLACK DLC_BLACK
	replace_terrain DLC_BEACH2 DLC_BEACH2
	replace_terrain DLC_BEACH3 DLC_BEACH3
	replace_terrain DLC_BEACH4 DLC_BEACH4
	replace_terrain DLC_MANGROVEFOREST DLC_MANGROVESHALLOW
	replace_terrain DLC_MANGROVESHALLOW DLC_MANGROVESHALLOW
	replace_terrain DLC_NEWSHALLOW DLC_NEWSHALLOW
	replace_terrain DLC_JUNGLEROAD DLC_JUNGLEROAD
	replace_terrain DLC_WATER5 SHALLOWS_A
	replace_terrain DLC_WATER4 SHALLOWS_A
	replace_terrain RICE_FARM1 DLC_MANGROVESHALLOW
	replace_terrain RICE_FARM2 DLC_MANGROVESHALLOW
	replace_terrain RICE_FARM3 DLC_MANGROVESHALLOW
	replace_terrain RICE_FARM_PLANTED DLC_MANGROVESHALLOW
	replace_terrain RICE_FARM_DEAD DLC_MANGROVESHALLOW
endif
if DE_AVAILABLE
	replace_terrain ROAD_FUNGUS_NEW ROAD_FUNGUS_NEW
	replace_terrain ROAD_GRAVEL_NEW ROAD_GRAVEL_NEW
	replace_terrain BEACH_BUILDABLE DLC_DRYROAD
	replace_terrain WET_BEACH_BUILDABLE DLC_DRYROAD
	replace_terrain WET_GRAVEL_BUILDABLE DLC_ROADGRAVEL
	replace_terrain WET_ROCK_BUILDABLE WET_ROCK_BUILDABLE
	replace_terrain REED_FOREST_SHALLOWS SHALLOWS_A
	replace_terrain DLC_REEDSBEACH DLC_GRAVELBEACH
	replace_terrain DLC_BOGLAND DLC_BOGLAND
	replace_terrain DLC_ROADGRAVEL DLC_ROADGRAVEL
	replace_terrain WATER_GREEN SHALLOWS_A
	replace_terrain WATER_BROWN SHALLOWS_A
	replace_terrain DLC_WETBEACH DLC_WETBEACH
	replace_terrain DLC_GRAVELBEACH DLC_GRAVELBEACH
	replace_terrain DLC_WETROCKBEACH DLC_WETROCKBEACH
endif

terrain_cost ICYSHORE 10
terrain_cost DIRT_GRASS_FOUNDATION 3
terrain_cost DIRT_SNOW_FOUNDATION 3
terrain_cost FARM1 3
terrain_cost FARM2 3
terrain_cost FARM3 3
terrain_cost FARM_PLANTED 3
terrain_cost FARM_DEAD 3
terrain_cost ICE_SHALLOWS 1
terrain_cost DLC_ROCK 1
terrain_cost ROAD_FUNGUS 1
terrain_cost ROAD_SNOW 1
terrain_cost BEACH 10
terrain_cost DESERT 3
terrain_cost DIRT 3
terrain_cost DIRT2 3
terrain_cost DIRT3 3
terrain_cost GRASS 3
terrain_cost GRASS2 3
terrain_cost GRASS3 3
terrain_cost ICE 1
terrain_cost SNOW 3
terrain_cost GRASS_SNOW 3
terrain_cost DIRT_SNOW 3
terrain_cost LEAVES 3
terrain_cost SHALLOW 1
terrain_cost ROAD 1
terrain_cost ROAD2 1
terrain_cost BAMBOO 6
terrain_cost FOREST 6
terrain_cost OAK_FOREST 6
terrain_cost JUNGLE 6
terrain_cost PALM_DESERT 6
terrain_cost PINE_FOREST 6
terrain_cost SNOW_FOREST 6
terrain_cost WATER 10
terrain_cost WATER_NOBEACH 10
terrain_cost MED_WATER 13
terrain_cost DEEP_WATER 15
if WOLOLOKINGDOMS else terrain_cost CLIFF_GRASS 15 endif
if DLC
	terrain_cost DLC_SAVANNAH 3
	terrain_cost DLC_DIRT4 3
	terrain_cost DLC_DRYROAD 1
	terrain_cost DLC_MOORLAND 3
	terrain_cost DLC_CRACKED 3
	terrain_cost DLC_QUICKSAND 1
	terrain_cost DLC_BLACK 1
	terrain_cost DLC_BEACH2 10
	terrain_cost DLC_BEACH3 10
	terrain_cost DLC_BEACH4 10
	terrain_cost DLC_MANGROVESHALLOW 1
	terrain_cost DLC_NEWSHALLOW 1
	terrain_cost DLC_JUNGLEGRASS 3
	terrain_cost DLC_JUNGLEROAD 1
	terrain_cost DLC_JUNGLELEAVES 3
	terrain_cost DLC_DRAGONFOREST 6
	terrain_cost DLC_BAOBABFOREST 6
	terrain_cost DLC_ACACIAFOREST 6
	terrain_cost DLC_MANGROVEFOREST 6
	terrain_cost DLC_RAINFOREST 6
	terrain_cost DLC_WATER5 10
	terrain_cost DLC_WATER4 15
	terrain_cost RICE_FARM1 3
	terrain_cost RICE_FARM2 3
	terrain_cost RICE_FARM3 3
	terrain_cost RICE_FARM_PLANTED 3
	terrain_cost RICE_FARM_DEAD 3
endif
if DE_AVAILABLE
	terrain_cost GRAVEL 3
	terrain_cost UNDERBRUSH_LEAVES 3
	terrain_cost SNOW_UNDERBRUSH 3
	terrain_cost SNOW_LIGHT 3
	terrain_cost SNOW_HEAVY 3
	terrain_cost ROAD_FUNGUS_NEW 1
	terrain_cost MUD 3
	terrain_cost UNDERBRUSH_JUNGLE 3
	terrain_cost ROAD_GRAVEL_NEW 1
	terrain_cost BEACH_BUILDABLE 3
	terrain_cost WET_BEACH_BUILDABLE 3
	terrain_cost WET_GRAVEL_BUILDABLE 3
	terrain_cost WET_ROCK_BUILDABLE 3
	terrain_cost JUNGLE_GRASS_NEW 3
	terrain_cost DLC_DRYGRASS 3
	terrain_cost DLC_BOGLAND 1
	terrain_cost DLC_DESERTGRAVEL 3
	terrain_cost DLC_ROADGRAVEL 1
	terrain_cost MEDITERRANEAN_FOREST 6
	terrain_cost BUSH_FOREST 6
	terrain_cost REED_FOREST_SHALLOWS 6
	terrain_cost DLC_REEDSBEACH 6
	terrain_cost REED_FOREST 6
	terrain_cost DLC_FORESTAUTUMN 6
	terrain_cost DLC_FORESTSNOWAUTUMN 6
	terrain_cost DLC_FORESTDEAD 6
	terrain_cost WATER_GREEN 10
	terrain_cost WATER_BROWN 10
	terrain_cost DLC_WETBEACH 10
	terrain_cost DLC_GRAVELBEACH 10
	terrain_cost DLC_WETROCKBEACH 10
endif

terrain_size BEACH 1 0
terrain_size ICYSHORE 1 0
terrain_size DIRT 1 0
terrain_size DIRT2 1 0
terrain_size DIRT_GRASS_FOUNDATION 1 0
terrain_size DIRT3 1 0
terrain_size DIRT_SNOW 1 0
terrain_size DIRT_SNOW_FOUNDATION 1 0
terrain_size DESERT 1 0
terrain_size FARM1 1 0
terrain_size FARM2 1 0
terrain_size FARM3 1 0
terrain_size FARM_PLANTED 1 0
terrain_size FARM_DEAD 1 0
terrain_size BAMBOO 1 0
terrain_size FOREST 1 0
terrain_size OAK_FOREST 1 0
terrain_size JUNGLE 1 0
terrain_size LEAVES 1 0
terrain_size PALM_DESERT 1 0
terrain_size PINE_FOREST 1 0
terrain_size SNOW_FOREST 1 0
terrain_size GRASS 1 0
terrain_size CLIFF_GRASS 1 0
terrain_size GRASS2 1 0
terrain_size GRASS3 1 0
terrain_size GRASS_SNOW 1 0
terrain_size ICE 1 0
terrain_size ICE_SHALLOWS 1 0
terrain_size ROAD 0 0
terrain_size DLC_ROCK 0 0
terrain_size ROAD2 0 0
terrain_size ROAD_SNOW 0 0
terrain_size ROAD_FUNGUS 0 0
terrain_size SHALLOW 1 0
terrain_size SNOW 1 0
terrain_size WATER 1 0      /* wider connections when fewer players? */
terrain_size WATER_NOBEACH 1 0
terrain_size MED_WATER 1 0
terrain_size DEEP_WATER 1 0
terrain_size WATER_WALKABLE 1 0
if DLC
	terrain_size DLC_SAVANNAH 1 0
	terrain_size DLC_DIRT4 1 0
	terrain_size DLC_DRYROAD 0 0
	terrain_size DLC_MOORLAND 1 0
	terrain_size DLC_CRACKED 1 0
	terrain_size DLC_QUICKSAND 1 0
	terrain_size DLC_BLACK 1 0
	terrain_size DLC_DRAGONFOREST 1 0
	terrain_size DLC_BAOBABFOREST 1 0
	terrain_size DLC_ACACIAFOREST 1 0
	terrain_size DLC_BEACH2 1 0
	terrain_size DLC_BEACH3 1 0
	terrain_size DLC_BEACH4 1 0
	terrain_size DLC_MANGROVESHALLOW 1 0
	terrain_size DLC_MANGROVEFOREST 1 0
	terrain_size DLC_RAINFOREST 1 0
	terrain_size DLC_NEWSHALLOW 1 0
	terrain_size DLC_JUNGLEGRASS 1 0
	terrain_size DLC_JUNGLEROAD 0 0
	terrain_size DLC_JUNGLELEAVES 1 0
	terrain_size DLC_WATER5 1 0
	terrain_size DLC_WATER4 1 0
	terrain_size RICE_FARM1 1 0
	terrain_size RICE_FARM2 1 0
	terrain_size RICE_FARM3 1 0
	terrain_size RICE_FARM_PLANTED 1 0
	terrain_size RICE_FARM_DEAD 1 0
endif
if DE_AVAILABLE
	terrain_size GRAVEL 1 0
	terrain_size UNDERBRUSH_LEAVES 1 0
	terrain_size SNOW_UNDERBRUSH 1 0
	terrain_size SNOW_LIGHT 1 0
	terrain_size SNOW_HEAVY 1 0
	terrain_size ROAD_FUNGUS_NEW 0 0
	terrain_size MUD 1 0
	terrain_size UNDERBRUSH_JUNGLE 1 0
	terrain_size ROAD_GRAVEL_NEW 0 0
	terrain_size BEACH_BUILDABLE 1 0
	terrain_size WET_BEACH_BUILDABLE 1 0
	terrain_size WET_GRAVEL_BUILDABLE 1 0
	terrain_size WET_ROCK_BUILDABLE 1 0
	terrain_size JUNGLE_GRASS_NEW 1 0
	terrain_size MEDITERRANEAN_FOREST 1 0
	terrain_size BUSH_FOREST 1 0
	terrain_size REED_FOREST_SHALLOWS 1 0
	terrain_size DLC_REEDSBEACH 1 0
	terrain_size REED_FOREST 1 0
	terrain_size DLC_DRYGRASS 1 0
	terrain_size DLC_BOGLAND 1 0
	terrain_size DLC_DESERTGRAVEL 1 0
	terrain_size DLC_ROADGRAVEL 0 0
	terrain_size DLC_FORESTAUTUMN 1 0
	terrain_size DLC_FORESTSNOWAUTUMN 1 0
	terrain_size DLC_FORESTDEAD 1 0
	terrain_size WATER_GREEN 1 0
	terrain_size WATER_BROWN 1 0
	terrain_size DLC_WETBEACH 1 0
	terrain_size DLC_GRAVELBEACH 1 0
	terrain_size DLC_WETROCKBEACH 1 0
endif
}
endif
endif

/* create custom beaches anywhere where they got replaced */
create_connect_all_lands {
replace_terrain BEACH BEACH_A
replace_terrain ICYSHORE BEACH_A
terrain_size BEACH 999 0
terrain_size ICYSHORE 999 0
}


/* =================================================================================================== */
<OBJECTS_GENERATION>

/* define things so they are not undefined in a potentially dead branch */
#const TEMPORARY_OBJECT_GRID 278	/* dead fish trap */
#const PACKED_TOWN_CENTER 444
#const FORTRESS_CASTLE 33	/* massive garrison capacity */
#const DLC_FEITORIA 1021
#const OUTLAW 158
#const REEDTREE 1350

/* fill forests */
if DLC
	create_object DLC_RAINTREE {
		terrain_to_place_on DLC_MANGROVEFOREST
		number_of_objects 9320
		set_scaling_to_map_size
	}
endif
create_object FOREST_FILLER {
	terrain_to_place_on FOREST_A
	number_of_objects 9320
	set_scaling_to_map_size
}
create_object FOREST_FILLER {
	terrain_to_place_on FOREST_B
	number_of_objects 9320
	set_scaling_to_map_size
}
create_object FOREST_FILLER {
	terrain_to_place_on FOREST_C
	number_of_objects 9320
	set_scaling_to_map_size
}


/* prevent resources stuck in forests */
if DE_AVAILABLE		/* we can avoid forests with the new avoidance attribute here */
else
	create_object MASKING_UNIT {
		terrain_to_place_on FOREST_A
		set_gaia_object_only
		number_of_objects 9320
		set_scaling_to_map_size
		min_distance_group_placement 2
	}
	create_object MASKING_UNIT {
		terrain_to_place_on FOREST_B
		set_gaia_object_only
		number_of_objects 9320
		set_scaling_to_map_size
		min_distance_group_placement 2
	}
	create_object MASKING_UNIT {
		terrain_to_place_on FOREST_C
		set_gaia_object_only
		number_of_objects 9320
		set_scaling_to_map_size
		min_distance_group_placement 2
	}
endif

/* do the same for cliffs */
if NO_CLIFFS
elseif WOLOLOKINGDOMS
elseif DE_AVAILABLE
else
	create_object MASKING_UNIT {
		terrain_to_place_on CLIFF_GRASS
		set_gaia_object_only
		number_of_objects 9320
		set_scaling_to_map_size
		min_distance_group_placement 3
	}
endif

/* place objects on the center so it can be avoided with actor areas */
if SPECIAL_CENTER
	create_object MASKING_UNIT {
		set_gaia_object_only
		number_of_objects 800
		terrain_to_place_on LAND_Z
		actor_area 999
		actor_area_radius 15
	}
endif


/* =================================================================================================== */
/* support empire wars game mode */
if EMPIRE_WARS
#define USE_STANDARD_RESOURCES
create_object TOWN_CENTER {
	set_place_for_every_player
	max_distance_to_players 0
	actor_area 100
	actor_area_radius 2
	second_object SHEEP_TYPE
}
create_object SCOUT {
	set_place_for_every_player
	min_distance_to_players 12
	max_distance_to_players 16
	avoid_forest_zone 1
	avoid_cliff_zone 3
}
create_object BERRY_TYPE {
	number_of_objects 6
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	min_distance_to_players 10
	max_distance_to_players 12
	actor_area 14
	actor_area_radius 1
	avoid_forest_zone 4
	avoid_cliff_zone 3
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 3
	max_distance_to_players 3
	actor_area 21
	actor_area_radius 0
	second_object VILLAGER
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 3
	max_distance_to_players 3
	actor_area 22
	actor_area_radius 0
	second_object VILLAGER
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 3
	max_distance_to_players 3
	actor_area 23
	actor_area_radius 0
	second_object VILLAGER
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 3
	max_distance_to_players 3
	actor_area 24
	actor_area_radius 0
	second_object VILLAGER
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 3
	max_distance_to_players 3
	actor_area 25
	actor_area_radius 0
	second_object VILLAGER
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 3
	max_distance_to_players 3
	actor_area 26
	actor_area_radius 0
	second_object VILLAGER
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 3
	max_distance_to_players 3
	actor_area 27
	actor_area_radius 0
	second_object VILLAGER
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 3
	max_distance_to_players 3
	actor_area 28
	actor_area_radius 0
	second_object VILLAGER
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 4
	max_distance_to_players 4
	actor_area 29
	actor_area_radius 0
	second_object VILLAGER
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 4
	max_distance_to_players 4
	actor_area 30
	actor_area_radius 0
	second_object VILLAGER
}
create_object FARM {
	set_place_for_every_player
	min_distance_to_players 4
	max_distance_to_players 4
	actor_area 31
	actor_area_radius 0
	second_object VILLAGER
}
create_object MILL {
	set_place_for_every_player
	actor_area_to_place_in 14
	find_closest
	actor_area 40
	actor_area_radius 6
}
create_object VILLAGER {
	set_place_for_every_player
	number_of_objects 5
	actor_area_to_place_in 14
	actor_area 94
	actor_area_radius 6
	force_placement
	find_closest
}
create_object GOLD {
	number_of_objects 7
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	min_distance_to_players 12
	max_distance_to_players 16
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
	actor_area 12
	actor_area_radius 2
	avoid_actor_area 14
}
create_object MINING_CAMP {
	set_place_for_every_player
	find_closest
	actor_area_to_place_in 12
	actor_area 10
	actor_area_radius 2
	avoid_forest_zone 1
	avoid_cliff_zone 3
}
create_object VILLAGER {
	set_place_for_every_player
	number_of_objects 4
	actor_area_to_place_in 12
	actor_area 171
	actor_area_radius 5
	find_closest
	force_placement
}
create_object LUMBER_CAMP {
	set_place_for_every_player
	max_distance_to_players 67
	place_on_forest_zone
	find_closest
	actor_area 8
	actor_area_radius 4
	avoid_actor_area 94
	avoid_actor_area 40
	avoid_actor_area 171
}
create_object VILLAGER {
	set_place_for_every_player
	number_of_objects 4
	actor_area_to_place_in 8
	place_on_forest_zone
	actor_area 71
	actor_area_radius 1
	find_closest
	force_placement
}
create_object LUMBER_CAMP {
	set_place_for_every_player
	max_distance_to_players 67
	place_on_forest_zone
	find_closest
	actor_area 9
	actor_area_radius 4
	avoid_actor_area 71
	avoid_actor_area 94
	avoid_actor_area 40
	avoid_actor_area 171
}
create_object VILLAGER {
	set_place_for_every_player
	number_of_objects 3
	actor_area_to_place_in 9
	place_on_forest_zone
	actor_area 72
	actor_area_radius 1
	find_closest
	force_placement
}
create_object LUMBER_CAMP {
	set_place_for_every_player
	max_distance_to_players 67
	place_on_forest_zone
	avoid_actor_area 71
	avoid_actor_area 72
	avoid_actor_area 94
	avoid_actor_area 40
	find_closest
	actor_area 99
	actor_area_radius 4
	avoid_actor_area 171
}
create_object VILLAGER {
	set_place_for_every_player
	number_of_objects 3
	actor_area_to_place_in 99
	place_on_forest_zone
	actor_area 73
	actor_area_radius 1
	find_closest
	force_placement
}
create_object HOUSE {
	set_place_for_every_player
	min_distance_to_players 7
	max_distance_to_players 14
	avoid_actor_area 40
	avoid_actor_area 10
	avoid_actor_area 94
	avoid_actor_area 171
	find_closest
}
create_object HOUSE {
	set_place_for_every_player
	min_distance_to_players 7
	max_distance_to_players 14
	avoid_actor_area 40
	avoid_actor_area 10
	avoid_actor_area 94
	avoid_actor_area 171
	find_closest
}
create_object HOUSE {
	set_place_for_every_player
	min_distance_to_players 7
	max_distance_to_players 14
	avoid_actor_area 40
	avoid_actor_area 10
	avoid_actor_area 94
	avoid_actor_area 171
	find_closest
}
create_object BLACKSMITH {
	set_place_for_every_player
	min_distance_to_players 7
	max_distance_to_players 11
	avoid_actor_area 94
	avoid_actor_area 40
	avoid_actor_area 8
	avoid_actor_area 9
	avoid_actor_area 99
	avoid_actor_area 171 /* primary gold villagers, large radius */
	actor_area 80
	actor_area_radius 4
}
create_object HOUSE {
	set_place_for_every_player
	min_distance_to_players 7
	max_distance_to_players 14
	avoid_actor_area 40
	avoid_actor_area 10
	avoid_actor_area 94
	avoid_actor_area 171
	find_closest
}
create_object HOUSE {
	set_place_for_every_player
	min_distance_to_players 7
	max_distance_to_players 14
	avoid_actor_area 40
	avoid_actor_area 10
	avoid_actor_area 94
	avoid_actor_area 171
	find_closest
}
create_object HOUSE {
	set_place_for_every_player
	min_distance_to_players 7
	max_distance_to_players 14
	avoid_actor_area 40
	avoid_actor_area 10
	avoid_actor_area 94
	avoid_actor_area 171
	find_closest
}
create_object BARRACKS {
	set_place_for_every_player
	min_distance_to_players 7
	max_distance_to_players 9
	avoid_actor_area 94
	avoid_actor_area 40
	avoid_actor_area 8
	avoid_actor_area 9
	avoid_actor_area 99
	avoid_actor_area 171 /* primary gold villagers, large radius */
	actor_area 51
	actor_area_radius 5
}

/* end empire wars */

elseif USE_STANDARD_STARTING_UNITS	/* =================================================================================================== */

if USE_BATTLE_ROYALE
	create_object PACKED_TOWN_CENTER {
		set_place_for_every_player
		max_distance_to_players 0
	}
else
	create_object TOWN_CENTER {
		set_place_for_every_player
		if USE_NOMAD_SETUP	number_of_objects 0
		else				number_of_objects 1
		endif
		max_distance_to_players 0
	}
endif

if SUDDEN_DEATH
	if USE_NOMAD_SETUP
	elseif USE_BATTLE_ROYALE
	else
		create_object FLAG_C {
		set_place_for_every_player
		number_of_objects 4
		min_distance_to_players 3
		find_closest
		}
	endif
endif

/* walls */
if NO_CONNECTIONS
elseif USE_NOMAD_SETUP
elseif USE_BATTLE_ROYALE
else
	start_random
		percent_chance 20	#define USE_WALLS
		percent_chance 80	#define NO_WALLS
	end_random
endif
/* in the standard start, we limit to versions without excessive HP */
if USE_WALLS
	if ONLY_STANDARD_WALL_TYPES
		start_random
			percent_chance 50	#const WALL_TYPE 72		/* palisade */
			percent_chance 50	#const WALL_TYPE 117	/* stone */
		end_random
	elseif DLC
		start_random
			percent_chance 33	#const WALL_TYPE 72		/* palisade */
			percent_chance 33	#const WALL_TYPE 117	/* stone */
			percent_chance 0	#const WALL_TYPE 155	/* fortified */
			percent_chance 0	#const WALL_TYPE 370	/* twal */
			percent_chance 34	#const WALL_TYPE 119	/* fortified palisade */
			percent_chance 0	#const WALL_TYPE 231	/* Aqueduct */
			percent_chance 0	#const WALL_TYPE 1062	/* fence */
		end_random
	else
		start_random
			percent_chance 50	#const WALL_TYPE 72		/* palisade */
			percent_chance 50	#const WALL_TYPE 117	/* stone */
			percent_chance 0	#const WALL_TYPE 155	/* fortified */
			percent_chance 0	#const WALL_TYPE 208	/* twal */
		end_random
	endif

	create_object WALL_TYPE {
	set_place_for_every_player
	if LUDIKRIS_MAP
		min_distance_to_players 36
		max_distance_to_players 36
	else
		min_distance_to_players 17
		max_distance_to_players 17
	endif
	min_distance_group_placement 2
	}
endif

create_object VILLAGER {
	set_place_for_every_player
	if USE_NOMAD_SETUP
		avoid_forest_zone 3
		avoid_cliff_zone 3
		avoid_actor_area 999
		min_distance_group_placement 2
		if LUDIKRIS_MAP	temp_min_distance_group_placement 45
		else			temp_min_distance_group_placement 15
		endif
	elseif DE_AVAILABLE
		min_distance_to_players 6
		find_closest
		actor_area 777
	else
		min_distance_to_players 6
		max_distance_to_players 6
	endif
}

if REGICIDE /* I decided that the king replaces the scout in regicide in my maps */
	create_object KING {
	set_place_for_every_player
	if USE_NOMAD_SETUP
		min_distance_to_players 25
		min_distance_group_placement 2
		avoid_forest_zone 3
		avoid_cliff_zone 3
		avoid_actor_area 999
	elseif DE_AVAILABLE
		min_distance_to_players 6
		find_closest
		avoid_actor_area 777
	else
		min_distance_to_players 6
		max_distance_to_players 8
	endif
	}
elseif USE_NOMAD_SETUP
/* no scout */
else
	create_object SCOUT {
	set_place_for_every_player
	if DE_AVAILABLE
		min_distance_to_players 6
		find_closest
		avoid_actor_area 777
	else
		min_distance_to_players 7
		max_distance_to_players 9
	endif
	}
endif

if REGICIDE
	if USE_NOMAD_SETUP
	else
	create_object VILLAGER {
	number_of_objects 7
	set_place_for_every_player
	min_distance_to_players 6
	max_distance_to_players 7
	}
	create_object CASTLE {
	set_place_for_every_player
	min_distance_to_players 9
	max_distance_to_players 11
	min_distance_group_placement 2
	}
	endif
endif



else /* random starting units */ /* =================================================================================================== */


if ONLY_STANDARD_WALL_TYPES
	start_random
		percent_chance 50	#const WALL_TYPE 72		/* palisade */
		percent_chance 50	#const WALL_TYPE 117	/* stone */
	end_random
elseif DLC
	start_random
		percent_chance 15	#const WALL_TYPE 72		/* palisade */
		percent_chance 15	#const WALL_TYPE 117	/* stone */
		percent_chance 15	#const WALL_TYPE 155	/* fortified */
		percent_chance 15	#const WALL_TYPE 370	/* twal */
		percent_chance 15	#const WALL_TYPE 119	/* fortified palisade */
		percent_chance 10	#const WALL_TYPE 231	/* Aqueduct */
		percent_chance 15	#const WALL_TYPE 1062	/* fence */
	end_random
else
	start_random
		percent_chance 25	#const WALL_TYPE 72		/* palisade */
		percent_chance 25	#const WALL_TYPE 117	/* stone */
		percent_chance 25	#const WALL_TYPE 155	/* fortified */
		percent_chance 25	#const WALL_TYPE 208	/* twal */
	end_random
endif

/* for a second_ring */
if ONLY_STANDARD_WALL_TYPES
	#const SECOND_WALL_TYPE 72		/* palisade */
elseif DLC
	start_random
	percent_chance 14	#const SECOND_WALL_TYPE 72		/* palisade */
	percent_chance 15	#const SECOND_WALL_TYPE 119		/* fortified palisade */
	percent_chance 14	#const SECOND_WALL_TYPE 1062	/* fence */
	end_random
else
	#const SECOND_WALL_TYPE 72		/* palisade */
endif


/* walled center when using capture the relic or king of the the hill */
if SPECIAL_CENTER
	start_random
		percent_chance 25	#define WALLED_CENTER
	end_random
endif
if WALLED_CENTER
	if DE_AVAILABLE	/* the trick I was suing does not work for player 1 in DE */
	else
		create_object WALL_TYPE {
		set_place_for_every_player
		if LUDIKRIS_MAP		min_distance_to_players 27	max_distance_to_players 27
		elseif GIGANTIC_MAP	min_distance_to_players 18	max_distance_to_players 18
		elseif HUGE_MAP		min_distance_to_players 16	max_distance_to_players 16
		elseif LARGE_MAP	min_distance_to_players 14	max_distance_to_players 14
		else				min_distance_to_players 12	max_distance_to_players 12
		endif
		}
	endif
endif


if USE_BATTLE_ROYALE
	create_object PACKED_TOWN_CENTER {
		set_place_for_every_player
		max_distance_to_players 0
	}
else
	/* 0 to 3 town centers possible */
	create_object TOWN_CENTER {
	set_place_for_every_player
	if USE_NOMAD_SETUP	number_of_objects 0
	else
		start_random
		percent_chance 96
			number_of_objects 1
			max_distance_to_players 0
		percent_chance 3
			number_of_objects 2
			max_distance_to_players 8
			#define USE_2_TCS
			avoid_forest_zone 5
			avoid_cliff_zone 3
		percent_chance 1
			number_of_objects 3
			max_distance_to_players 9
			#define USE_3_TCS
			avoid_forest_zone 5
			avoid_cliff_zone 3
		end_random
		min_distance_to_players 0
		min_distance_group_placement 2
		temp_min_distance_group_placement 7
		if DE_AVAILABLE
			start_random
				percent_chance 2	second_object WATCH_TOWER
				percent_chance 2	second_object SHEEP_TYPE
				percent_chance 2	second_object BOAR_TYPE
				percent_chance 2	second_object DEER_TYPE
			end_random
		endif
	endif
	}
endif

if SUDDEN_DEATH
	if USE_NOMAD_SETUP
	elseif USE_BATTLE_ROYALE
	else
		create_object FLAG_C {
		set_place_for_every_player
		number_of_objects 4
		min_distance_to_players 3
		find_closest
		}
	endif
endif

/* walls */
if NO_CONNECTIONS
elseif USE_NOMAD_SETUP
elseif USE_BATTLE_ROYALE
else
	start_random
		percent_chance 20	#define USE_WALLS
		percent_chance 80	#define NO_WALLS
	end_random
endif
if USE_WALLS
	create_object WALL_TYPE {
	set_place_for_every_player
	if LUDIKRIS_MAP
		start_random
		percent_chance 50	#define SQUARE_WALLS
			min_distance_to_players 36
			max_distance_to_players 36
		percent_chance 50	/* here we allow non-square walls, by allowing a variable radius */
			min_distance_to_players 30
			max_distance_to_players 40
		end_random
	else
		start_random
			percent_chance 50	#define SQUARE_WALLS
				min_distance_to_players 17
				max_distance_to_players 17
			percent_chance 50	/* here we allow non-square walls, by allowing a variable radius */
				min_distance_to_players 15
				max_distance_to_players 25
		end_random
	endif
	min_distance_group_placement 2
	}
	/* second wall ring */
	if DE_AVAILABLE
	if SQUARE_WALLS
		start_random
			percent_chance 10
				create_object SECOND_WALL_TYPE {
				set_place_for_every_player
				if LUDIKRIS_MAP
					min_distance_to_players 56
					max_distance_to_players 56
				else
					min_distance_to_players 27
					max_distance_to_players 27
				endif
				min_distance_group_placement 2
				}
		end_random
	endif
	endif
endif

create_object VILLAGER {
	set_place_for_every_player
	if USE_NOMAD_SETUP
		avoid_forest_zone 3
		avoid_cliff_zone 3
		avoid_actor_area 999
		min_distance_group_placement 2
		if LUDIKRIS_MAP	temp_min_distance_group_placement  45
		else	temp_min_distance_group_placement  15
		endif
	elseif DE_AVAILABLE
		min_distance_to_players 6
		find_closest
		actor_area 777
	else
		min_distance_to_players 6
		max_distance_to_players 6
	endif
}

/* random scouts */
if ALLOW_RANDOM_SCOUT
	start_random
		percent_chance 10	#define USE_HORSE_SCOUT
		percent_chance 40	#define USE_RANDOM_SCOUT	/* 50% of which is still a normal scout */
		percent_chance 50	#const SCOUT_TYPE 448	/* scout */
	end_random
else
	start_random
		percent_chance 20	#define USE_HORSE_SCOUT
		percent_chance 80	#const SCOUT_TYPE 448	/* scout */
	end_random
endif

/* horses have autoscout in DE */
if USE_HORSE_SCOUT
	if DE_AVAILABLE
		start_random
			percent_chance 10	#const SCOUT_TYPE 814	/* horse */
			percent_chance 25	#const SCOUT_TYPE 897	/* camel */
			percent_chance 25	#const SCOUT_TYPE 1237	/* bactrian camel */
			percent_chance 10	#const SCOUT_TYPE 1356	/* heavy horse */
			percent_chance 10	#const SCOUT_TYPE 1602	/* horse grey black */
			percent_chance 10	#const SCOUT_TYPE 1604	/* horse grey brown */
			percent_chance 10	#const SCOUT_TYPE 1606	/* horse white brown */
		end_random
	elseif DLC
		start_random
			percent_chance 50	#const SCOUT_TYPE 814	/* horse */
			percent_chance 50	#const SCOUT_TYPE 897	/* camel */
		end_random
	else
		start_random
			percent_chance 100	#const SCOUT_TYPE 814	/* horse */
		end_random
	endif
endif

/* fully random scout unit */
/* each one is about 50% full, othwerwise it will just use the default again */
if USE_RANDOM_SCOUT
	if DE_AVAILABLE
		start_random
			percent_chance 17	#define DE_SCOUT
			percent_chance 16	#define DLC_SCOUT_1
			percent_chance 16	#define DLC_SCOUT_2
			percent_chance 17	#define AOC_SCOUT_1
			percent_chance 17	#define AOC_SCOUT_2
			percent_chance 17	#define AOC_SCOUT_3
		end_random
	elseif DLC
		start_random
			percent_chance 20	#define DLC_SCOUT_1
			percent_chance 20	#define DLC_SCOUT_2
			percent_chance 20	#define AOC_SCOUT_1
			percent_chance 20	#define AOC_SCOUT_2
			percent_chance 20	#define AOC_SCOUT_3
		end_random
	else
		start_random
			percent_chance 34	#define AOC_SCOUT_1
			percent_chance 33	#define AOC_SCOUT_2
			percent_chance 33	#define AOC_SCOUT_3
		end_random
	endif
endif

if DE_SCOUT
	start_random
		percent_chance 1	#const SCOUT_TYPE 223	/* alaric the goth */
		percent_chance 1	#const SCOUT_TYPE 230	/* king bela iv */
		percent_chance 00	#const SCOUT_TYPE 342	/* cuman chief ## no graphics ## */
		percent_chance 1	#const SCOUT_TYPE 444	/* packed town center */
		percent_chance 1	#const SCOUT_TYPE 453	/* ataulf */
		percent_chance 1	#const SCOUT_TYPE 703	/* topa yupanqui */
		percent_chance 1	#const SCOUT_TYPE 749	/* cusi yupanqui */
		percent_chance 1	#const SCOUT_TYPE 1145	/* ninja */
		percent_chance 1	#const SCOUT_TYPE 1222	/* sharkatzor */
		percent_chance 1	#const SCOUT_TYPE 1225	/* konnik */
		percent_chance 1	#const SCOUT_TYPE 1227	/* elite konnik */
		percent_chance 1	#const SCOUT_TYPE 1228	/* keshik */
		percent_chance 1	#const SCOUT_TYPE 1230	/* elite keshik */
		percent_chance 1	#const SCOUT_TYPE 1231	/* kipchak */
		percent_chance 1	#const SCOUT_TYPE 1233	/* elite kipchak */
		percent_chance 1	#const SCOUT_TYPE 1234	/* leitis */
		percent_chance 1	#const SCOUT_TYPE 1236	/* elite leitis */
		percent_chance 1	#const SCOUT_TYPE 1252	/* konnik dismounted */
		percent_chance 1	#const SCOUT_TYPE 1253	/* elite konnik dismounted */
		percent_chance 1	#const SCOUT_TYPE 1254	/* konnik */
		percent_chance 1	#const SCOUT_TYPE 1255	/* elite konnik */
		percent_chance 1	#const SCOUT_TYPE 1258	/* battering ram */
		percent_chance 1	#const SCOUT_TYPE 1259	/* cuman placeholder kipchak */
		percent_chance 1	#const SCOUT_TYPE 1260	/* elite kipchak */
		percent_chance 1	#const SCOUT_TYPE 1261	/* cuman disabled kipchak */
		percent_chance 1	#const SCOUT_TYPE 1262	/* tokhtamysh khan */
		percent_chance 1	#const SCOUT_TYPE 1263	/* flaming camel */
		percent_chance 1	#const SCOUT_TYPE 1265	/* ivaylo */
		percent_chance 1	#const SCOUT_TYPE 1266	/* tsar konstantin */
		percent_chance 1	#const SCOUT_TYPE 1267	/* kotyan khan */
		percent_chance 1	#const SCOUT_TYPE 1268	/* cuman chief */
		percent_chance 1	#const SCOUT_TYPE 1269	/* girgen khan */
		percent_chance 1	#const SCOUT_TYPE 1271	/* ox cart */
		percent_chance 1	#const SCOUT_TYPE 1273	/* ox wagon */
		percent_chance 1	#const SCOUT_TYPE 1275	/* khan */
		percent_chance 1	#const SCOUT_TYPE 1276	/* urus khan */
		percent_chance 1	#const SCOUT_TYPE 1281	/* vytautas the great */
		percent_chance 1	#const SCOUT_TYPE 1290	/* ivaylo dismounted */
		percent_chance 1	#const SCOUT_TYPE 1292	/* queen */
		percent_chance 1	#const SCOUT_TYPE 1293	/* sanyogita */
		percent_chance 1	#const SCOUT_TYPE 1294	/* prithvi */
		percent_chance 1	#const SCOUT_TYPE 1295	/* chand bardai */
		percent_chance 1	#const SCOUT_TYPE 1296	/* saladin */
		percent_chance 1	#const SCOUT_TYPE 1297	/* khosrau */
		percent_chance 1	#const SCOUT_TYPE 1298	/* jarl */
		percent_chance 1	#const SCOUT_TYPE 1299	/* savar */
		percent_chance 1	#const SCOUT_TYPE 1300	/* alfred the alpaca */
		percent_chance 1	#const SCOUT_TYPE 1303	/* osman */
		percent_chance 1	#const SCOUT_TYPE 1370	/* steppe lancer */
		percent_chance 1	#const SCOUT_TYPE 1372	/* elite steppe lancer */
		percent_chance 1	#const SCOUT_TYPE 1374	/* iroquois warrior */
		percent_chance 1	#const SCOUT_TYPE 1400	/* priest with relic */
		percent_chance 1	#const SCOUT_TYPE 1568	/* mounted samurai */
		percent_chance 1	#const SCOUT_TYPE 1570	/* xolotl warrior */
		percent_chance 1	#const SCOUT_TYPE 1572	/* merchant */
		percent_chance 1	#const SCOUT_TYPE 1574	/* sosso guard */
		percent_chance 1	#const SCOUT_TYPE 1577	/* photonman */
		percent_chance 100	#const SCOUT_TYPE 448	/* scout */
	end_random
elseif DLC_SCOUT_1
	start_random
		percent_chance 1	#const SCOUT_TYPE 1	/* legionary */
		percent_chance 1	#const SCOUT_TYPE 52	/* royal janissary */
		percent_chance 1	#const SCOUT_TYPE 138	/* spy - super high attack */
		percent_chance 1	#const SCOUT_TYPE 184	/* condottiero */
		percent_chance 1	#const SCOUT_TYPE 185	/* slinger */
		percent_chance 1	#const SCOUT_TYPE 188	/* flamethrower */
		percent_chance 1	#const SCOUT_TYPE 193	/* vlad dracula */
		percent_chance 1	#const SCOUT_TYPE 207	/* imperial camel rider */
		percent_chance 1	#const SCOUT_TYPE 275	/* centurion */
		percent_chance 1	#const SCOUT_TYPE 361	/* norse warrior */
		percent_chance 1	#const SCOUT_TYPE 425	/* francisco de orellana */
		percent_chance 1	#const SCOUT_TYPE 427	/* gonzalo pizarro */
		percent_chance 1	#const SCOUT_TYPE 429	/* frederick barbarossa */
		percent_chance 1	#const SCOUT_TYPE 437	/* prithviraj */
		percent_chance 1	#const SCOUT_TYPE 439	/* francesco sforza */
		percent_chance 1	#const SCOUT_TYPE 639	/* penguin */
		percent_chance 1	#const SCOUT_TYPE 753	/* eagle warrior */
		percent_chance 1	#const SCOUT_TYPE 825	/* amazon warrior */
		percent_chance 1	#const SCOUT_TYPE 850	/* amazon archer */
		percent_chance 1	#const SCOUT_TYPE 846	/* donkey trade cart */
		percent_chance 1	#const SCOUT_TYPE 866	/* genoese crossbowman */
		percent_chance 1	#const SCOUT_TYPE 868	/* elite genoese crossbowman */
		percent_chance 1	#const SCOUT_TYPE 869	/* magyar huszar */
		percent_chance 1	#const SCOUT_TYPE 871	/* elite magyar huszar */
		percent_chance 1	#const SCOUT_TYPE 873	/* elephant archer */
		percent_chance 1	#const SCOUT_TYPE 875	/* elite elephant archer */
		percent_chance 1	#const SCOUT_TYPE 876	/* boyar */
		percent_chance 1	#const SCOUT_TYPE 878	/* elite boyar */
		percent_chance 1	#const SCOUT_TYPE 879	/* kamayuk */
		percent_chance 1	#const SCOUT_TYPE 881	/* elite kamayuk */
		percent_chance 1	#const SCOUT_TYPE 882	/* condottiero */
		percent_chance 1	#const SCOUT_TYPE 885	/* siege tower with ranged attack */
		percent_chance 1	#const SCOUT_TYPE 886	/* tarkan */
		percent_chance 1	#const SCOUT_TYPE 887	/* elite tarkan */
		percent_chance 1	#const SCOUT_TYPE 892	/* heavy pikeman */
		percent_chance 1	#const SCOUT_TYPE 894	/* eastern swordsman */
		percent_chance 1	#const SCOUT_TYPE 1001	/* organ gun */
		percent_chance 1	#const SCOUT_TYPE 1003	/* elite organ gun */
		percent_chance 1	#const SCOUT_TYPE 1007	/* camel archer */
		percent_chance 1	#const SCOUT_TYPE 1009	/* elite camel archer */
		percent_chance 1	#const SCOUT_TYPE 1010	/* genitour */
		percent_chance 1	#const SCOUT_TYPE 1012	/* elite genitour */
		percent_chance 1	#const SCOUT_TYPE 1013	/* gbeto */
		percent_chance 1	#const SCOUT_TYPE 1015	/* elite gbeto */
		percent_chance 1	#const SCOUT_TYPE 1016	/* shotel warrior */
		percent_chance 1	#const SCOUT_TYPE 1018	/* elite shotel warrior */
		percent_chance 1	#const SCOUT_TYPE 1023	/* priest */
		percent_chance 1	#const SCOUT_TYPE 1025	/* priest with relic */
		percent_chance 1	#const SCOUT_TYPE 1034	/* musa ibn nusayr */
		percent_chance 1	#const SCOUT_TYPE 1035	/* sundjata */
		percent_chance 1	#const SCOUT_TYPE 1036	/* tariq ibn ziyad */
		percent_chance 100	#const SCOUT_TYPE 448	/* scout */
	end_random
elseif DLC_SCOUT_2
	start_random
		percent_chance 1	#const SCOUT_TYPE 1037	/* richard de clare */
		percent_chance 1	#const SCOUT_TYPE 1038	/* tristan */
		percent_chance 1	#const SCOUT_TYPE 1039	/* princess yodit */
		percent_chance 1	#const SCOUT_TYPE 1040	/* henry ii */
		percent_chance 1	#const SCOUT_TYPE 1064	/* ykuno amlak */
		percent_chance 1	#const SCOUT_TYPE 1066	/* warrior yodit */
		percent_chance 1	#const SCOUT_TYPE 1067	/* itzcoatl */
		percent_chance 1	#const SCOUT_TYPE 1068	/* mustafa pasha */
		percent_chance 1	#const SCOUT_TYPE 1069	/* pacal ii */
		percent_chance 1	#const SCOUT_TYPE 1070	/* babur */
		percent_chance 1	#const SCOUT_TYPE 1071	/* abraha elephant */
		percent_chance 1	#const SCOUT_TYPE 1072	/* guglielmo embriaco */
		percent_chance 1	#const SCOUT_TYPE 1073	/* su dingfang */
		percent_chance 1	#const SCOUT_TYPE 1074	/* pachacuti */
		percent_chance 1	#const SCOUT_TYPE 1075	/* huayna capac */
		percent_chance 1	#const SCOUT_TYPE 1076	/* miklos toldi */
		percent_chance 1	#const SCOUT_TYPE 1077	/* little john */
		percent_chance 1	#const SCOUT_TYPE 1078	/* zawisza the black */
		percent_chance 1	#const SCOUT_TYPE 1080	/* sumanguru */
		percent_chance 1	#const SCOUT_TYPE 1105	/* siege tower */
		percent_chance 1	#const SCOUT_TYPE 1106	/* dagnajan */
		percent_chance 1	#const SCOUT_TYPE 1109	/* gidajan */
		percent_chance 1	#const SCOUT_TYPE 1120	/* ballista elephant */
		percent_chance 1	#const SCOUT_TYPE 1122	/* elite ballista elephant */
		percent_chance 1	#const SCOUT_TYPE 1123	/* karambit */
		percent_chance 1	#const SCOUT_TYPE 1125	/* elite karambit */
		percent_chance 1	#const SCOUT_TYPE 1126	/* arambai */
		percent_chance 1	#const SCOUT_TYPE 1128	/* elite arambai */
		percent_chance 1	#const SCOUT_TYPE 1129	/* rattan archer */
		percent_chance 1	#const SCOUT_TYPE 1131	/* elite rattan archer */
		percent_chance 1	#const SCOUT_TYPE 1132	/* battle elephant */
		percent_chance 1	#const SCOUT_TYPE 1134	/* elite battle elephant */
		percent_chance 1	#const SCOUT_TYPE 1155	/* imperial skirmisher */
		percent_chance 1	#const SCOUT_TYPE 1157	/* gajah mada */
		percent_chance 1	#const SCOUT_TYPE 1158	/* jayanegara */
		percent_chance 1	#const SCOUT_TYPE 1159	/* raden wijaya */
		percent_chance 1	#const SCOUT_TYPE 1160	/* sunda royal fighter */
		percent_chance 1	#const SCOUT_TYPE 1162	/* suryavarman */
		percent_chance 1	#const SCOUT_TYPE 1163	/* udayadityavarman */
		percent_chance 1	#const SCOUT_TYPE 1164	/* jayaviravarman */
		percent_chance 1	#const SCOUT_TYPE 1165	/* bayinnaung */
		percent_chance 1	#const SCOUT_TYPE 1166	/* tabinshwehti */
		percent_chance 1	#const SCOUT_TYPE 1178	/* le loi */
		percent_chance 1	#const SCOUT_TYPE 1179	/* le lai */
		percent_chance 1	#const SCOUT_TYPE 1180	/* le lai 2 */
		percent_chance 1	#const SCOUT_TYPE 1181	/* le trien */
		percent_chance 1	#const SCOUT_TYPE 1182	/* luu nhan chu */
		percent_chance 1	#const SCOUT_TYPE 1183	/* bui bi */
		percent_chance 1	#const SCOUT_TYPE 1184	/* dinh le */
		percent_chance 1	#const SCOUT_TYPE 1185	/* wang tong */
		percent_chance 1	#const SCOUT_TYPE 1186	/* envoy */
		percent_chance 100	#const SCOUT_TYPE 448	/* scout */
	end_random
elseif AOC_SCOUT_1
	start_random
		percent_chance 1	#const SCOUT_TYPE 4	/* archer */
		percent_chance 1	#const SCOUT_TYPE 5	/* hand cannoneer */
		percent_chance 1	#const SCOUT_TYPE 7	/* skirmisher */
		percent_chance 1	#const SCOUT_TYPE 6	/* elite skirmisher */
		percent_chance 1	#const SCOUT_TYPE 8	/* longbowman */
		percent_chance 1	#const SCOUT_TYPE 11	/* mangudai */
		percent_chance 1	#const SCOUT_TYPE 24	/* crossbowman */
		percent_chance 1	#const SCOUT_TYPE 25	/* teutonic knight */
		percent_chance 1	#const SCOUT_TYPE 35	/* ram */
		percent_chance 1	#const SCOUT_TYPE 36	/* bombard cannon */
		percent_chance 1	#const SCOUT_TYPE 37	/* camel rider beta */
		percent_chance 1	#const SCOUT_TYPE 38	/* knight */
		percent_chance 1	#const SCOUT_TYPE 39	/* cav archer */
		percent_chance 1	#const SCOUT_TYPE 40	/* cataphract */
		percent_chance 1	#const SCOUT_TYPE 41	/* huskarl */
		percent_chance 1	#const SCOUT_TYPE 42	/* trebuchet */
		percent_chance 1	#const SCOUT_TYPE 46	/* janissary */
		percent_chance 1	#const SCOUT_TYPE 41	/* huskarl */
		percent_chance 1	#const SCOUT_TYPE 73	/* chu ko nu */
		percent_chance 1	#const SCOUT_TYPE 74	/* militia */
		percent_chance 1	#const SCOUT_TYPE 75	/* man at arms */
		percent_chance 1	#const SCOUT_TYPE 76	/* heavy swordsman */
		percent_chance 1	#const SCOUT_TYPE 77	/* long swordsman */
		percent_chance 1	#const SCOUT_TYPE 93	/* spearman */
		percent_chance 00	#const SCOUT_TYPE 94	/* beta berserk ## no graphics ## */
		percent_chance 1	#const SCOUT_TYPE 125	/* monk */
		percent_chance 1	#const SCOUT_TYPE 128	/* trade cart */
		percent_chance 1	#const SCOUT_TYPE 160	/* richard the lionheart */
		percent_chance 1	#const SCOUT_TYPE 161	/* the black prince */
		percent_chance 1	#const SCOUT_TYPE 163	/* friar tuck */
		percent_chance 1	#const SCOUT_TYPE 164	/* sheriff of nottingham */
		percent_chance 1	#const SCOUT_TYPE 165	/* charlemagne */
		percent_chance 1	#const SCOUT_TYPE 166	/* roland */
		percent_chance 1	#const SCOUT_TYPE 167	/* belisarius */
		percent_chance 1	#const SCOUT_TYPE 168	/* theodoric the goth */
		percent_chance 1	#const SCOUT_TYPE 169	/* aethelfirth */
		percent_chance 1	#const SCOUT_TYPE 170	/* siegfreid */
		percent_chance 1	#const SCOUT_TYPE 171	/* erik the red */
		percent_chance 1	#const SCOUT_TYPE 172	/* tamerlane */
		percent_chance 1	#const SCOUT_TYPE 173	/* king arthur */
		percent_chance 1	#const SCOUT_TYPE 174	/* lancelot */
		percent_chance 1	#const SCOUT_TYPE 175	/* gawain */
		percent_chance 1	#const SCOUT_TYPE 176	/* mordred */
		percent_chance 1	#const SCOUT_TYPE 177	/* archbishop */
		percent_chance 1	#const SCOUT_TYPE 195	/* kitabatake */
		percent_chance 1	#const SCOUT_TYPE 196	/* minamoto */
		percent_chance 1	#const SCOUT_TYPE 197	/* alexander nevski */
		percent_chance 1	#const SCOUT_TYPE 198	/* el cid */
		percent_chance 1	#const SCOUT_TYPE 200	/* robin hood */
		percent_chance 1	#const SCOUT_TYPE 204	/* full trade cart */
		percent_chance 1	#const SCOUT_TYPE 206	/* vmdl */
		percent_chance 1	#const SCOUT_TYPE 232	/* woad raider */
		percent_chance 1	#const SCOUT_TYPE 239	/* war elephant */
		percent_chance 1	#const SCOUT_TYPE 279	/* scorpion */
		percent_chance 1	#const SCOUT_TYPE 280	/* mangonel */
		percent_chance 100	#const SCOUT_TYPE 448	/* scout */
	end_random
elseif AOC_SCOUT_2
	start_random
		percent_chance 1	#const SCOUT_TYPE 281	/* throwing axeman */
		percent_chance 1	#const SCOUT_TYPE 282	/* mameluke */
		percent_chance 1	#const SCOUT_TYPE 283	/* cavalier */
		percent_chance 1	#const SCOUT_TYPE 286	/* monk with relic */
		percent_chance 1	#const SCOUT_TYPE 291	/* samurai */
		percent_chance 1	#const SCOUT_TYPE 299	/* bandit */
		percent_chance 1	#const SCOUT_TYPE 329	/* camel rider */
		percent_chance 1	#const SCOUT_TYPE 330	/* heavy camel rider */
		percent_chance 1	#const SCOUT_TYPE 331	/* packed trebuchet */
		percent_chance 1	#const SCOUT_TYPE 358	/* pikeman */
		percent_chance 1	#const SCOUT_TYPE 359	/* halberdier */
		percent_chance 1	#const SCOUT_TYPE 418	/* henry the lion */
		percent_chance 1	#const SCOUT_TYPE 422	/* capped ram */
		percent_chance 1	#const SCOUT_TYPE 424	/* charles martel */
		percent_chance 1	#const SCOUT_TYPE 426	/* harald hardraade */
		percent_chance 1	#const SCOUT_TYPE 428	/* hrolf the ganger */
		percent_chance 1	#const SCOUT_TYPE 430	/* joan the maid */
		percent_chance 1	#const SCOUT_TYPE 432	/* william wallace */
		percent_chance 1	#const SCOUT_TYPE 440	/* petard */
		percent_chance 1	#const SCOUT_TYPE 441	/* hussar */
		percent_chance 1	#const SCOUT_TYPE 473	/* two handed swordsman */
		percent_chance 1	#const SCOUT_TYPE 474	/* heavy cav archer */
		percent_chance 1	#const SCOUT_TYPE 492	/* arbalest */
		percent_chance 1	#const SCOUT_TYPE 493	/* advanced heavy crossbowman */
		percent_chance 1	#const SCOUT_TYPE 530	/* elite longbowman */
		percent_chance 1	#const SCOUT_TYPE 531	/* elite throwing axeman */
		percent_chance 1	#const SCOUT_TYPE 534	/* elite woad raider */
		percent_chance 1	#const SCOUT_TYPE 542	/* heavy scorpion */
		percent_chance 1	#const SCOUT_TYPE 546	/* light cavalry */
		percent_chance 1	#const SCOUT_TYPE 548	/* siege ram */
		percent_chance 1	#const SCOUT_TYPE 550	/* onager */
		percent_chance 1	#const SCOUT_TYPE 553	/* elite cataphract */
		percent_chance 1	#const SCOUT_TYPE 554	/* elite teutonic knight */
		percent_chance 1	#const SCOUT_TYPE 555	/* elite huskarl */
		percent_chance 1	#const SCOUT_TYPE 556	/* elite mameluke */
		percent_chance 1	#const SCOUT_TYPE 557	/* elite janissary */
		percent_chance 1	#const SCOUT_TYPE 558	/* elite war elephant */
		percent_chance 1	#const SCOUT_TYPE 559	/* elite chu ko nu */
		percent_chance 1	#const SCOUT_TYPE 560	/* elite samurai */
		percent_chance 1	#const SCOUT_TYPE 561	/* elite mangudai */
		percent_chance 1	#const SCOUT_TYPE 567	/* champion */
		percent_chance 1	#const SCOUT_TYPE 569	/* paladin */
		percent_chance 1	#const SCOUT_TYPE 571	/* raider archer */
		percent_chance 1	#const SCOUT_TYPE 573	/* raider swordsman */
		percent_chance 1	#const SCOUT_TYPE 575	/* raider cavalry */
		percent_chance 1	#const SCOUT_TYPE 577	/* raider cavalry archer */
		percent_chance 1	#const SCOUT_TYPE 583	/* genitour */
		percent_chance 1	#const SCOUT_TYPE 588	/* siege onager */
		percent_chance 1	#const SCOUT_TYPE 596	/* elite genitour */
		percent_chance 1	#const SCOUT_TYPE 629	/* joan of arc */
		percent_chance 1	#const SCOUT_TYPE 632	/* frankish paladin */
		percent_chance 1	#const SCOUT_TYPE 634	/* sieur de metz */
		percent_chance 1	#const SCOUT_TYPE 636	/* sieur bertrand */
		percent_chance 1	#const SCOUT_TYPE 638	/* duke d'alencon */
		percent_chance 100	#const SCOUT_TYPE 448	/* scout */
	end_random
elseif AOC_SCOUT_3
	start_random
		percent_chance 1	#const SCOUT_TYPE 640	/* la hire */
		percent_chance 1	#const SCOUT_TYPE 642	/* lord de graville */
		percent_chance 1	#const SCOUT_TYPE 644	/* jean de lorrain */
		percent_chance 1	#const SCOUT_TYPE 646	/* constable richemont */
		percent_chance 1	#const SCOUT_TYPE 648	/* guy josselyne */
		percent_chance 1	#const SCOUT_TYPE 650	/* jean bureau */
		percent_chance 1	#const SCOUT_TYPE 652	/* sir john fastolf */
		percent_chance 1	#const SCOUT_TYPE 678	/* reynald de chatillon */
		percent_chance 1	#const SCOUT_TYPE 680	/* master of the templar */
		percent_chance 1	#const SCOUT_TYPE 682	/* bad neighbor */
		percent_chance 1	#const SCOUT_TYPE 683	/* gods own sling */
		percent_chance 1	#const SCOUT_TYPE 686	/* archer of the eyes */
		percent_chance 1	#const SCOUT_TYPE 692	/* berserk */
		percent_chance 1	#const SCOUT_TYPE 694	/* elite berserk */
		percent_chance 1	#const SCOUT_TYPE 698	/* subotai */
		percent_chance 1	#const SCOUT_TYPE 700	/* hunting wolf */
		percent_chance 1	#const SCOUT_TYPE 702	/* kushluk */
		percent_chance 1	#const SCOUT_TYPE 704	/* shah */
		percent_chance 1	#const SCOUT_TYPE 706	/* sabateur */
		percent_chance 1	#const SCOUT_TYPE 707	/* ornlu the wolf */
		percent_chance 1	#const SCOUT_TYPE 725	/* jaguar warrior */
		percent_chance 1	#const SCOUT_TYPE 726	/* elite jaguar warrior */
		percent_chance 1	#const SCOUT_TYPE 729	/* gods own sling packed */
		percent_chance 1	#const SCOUT_TYPE 730	/* bad neighbor packed */
		percent_chance 1	#const SCOUT_TYPE 731	/* genghis khan */
		percent_chance 1	#const SCOUT_TYPE 733	/* emperor in a barrel (trade cart) */
		percent_chance 1	#const SCOUT_TYPE 748	/* cobra car */
		percent_chance 1	#const SCOUT_TYPE 751	/* eagle warrior/scout */
		percent_chance 1	#const SCOUT_TYPE 752	/* elite eagle warrior */
		percent_chance 1	#const SCOUT_TYPE 755	/* tarkan */
		percent_chance 1	#const SCOUT_TYPE 757	/* elite tarkan */
		percent_chance 1	#const SCOUT_TYPE 759	/* huskarl */
		percent_chance 1	#const SCOUT_TYPE 761	/* elite huskarl */
		percent_chance 1	#const SCOUT_TYPE 763	/* plumed archer */
		percent_chance 1	#const SCOUT_TYPE 765	/* elite plumed archer */
		percent_chance 1	#const SCOUT_TYPE 771	/* conquistador */
		percent_chance 1	#const SCOUT_TYPE 773	/* elite conquistador */
		percent_chance 1	#const SCOUT_TYPE 775	/* missionary */
		percent_chance 1	#const SCOUT_TYPE 777	/* attila the hun */
		percent_chance 1	#const SCOUT_TYPE 779	/* bleda the hun */
		percent_chance 1	#const SCOUT_TYPE 781	/* pope leo 1 */
		percent_chance 1	#const SCOUT_TYPE 783	/* scythian wild woman */
		percent_chance 1	#const SCOUT_TYPE 824	/* el cid campeador */
		percent_chance 1	#const SCOUT_TYPE 827	/* war wagon */
		percent_chance 1	#const SCOUT_TYPE 829	/* elite war wagon */
		percent_chance 1	#const SCOUT_TYPE 838	/* king sancho */
		percent_chance 1	#const SCOUT_TYPE 840	/* king alfonso */
		percent_chance 1	#const SCOUT_TYPE 842	/* imam */
		percent_chance 1	#const SCOUT_TYPE 845	/* nobunaga */
		percent_chance 1	#const SCOUT_TYPE 847	/* henry v */
		percent_chance 1	#const SCOUT_TYPE 849	/* william the conqueror */
		percent_chance 1	#const SCOUT_TYPE 852	/* scythian scout */
		percent_chance 1	#const SCOUT_TYPE 860	/* furious the monkey boy */
		percent_chance 100	#const SCOUT_TYPE 448	/* scout */
	end_random
endif





if REGICIDE
	create_object KING {
	set_place_for_every_player
	if USE_NOMAD_SETUP
		min_distance_group_placement 2
		avoid_forest_zone 3
		avoid_cliff_zone 3
		avoid_actor_area 999
		min_distance_to_players 25
	elseif DE_AVAILABLE
		min_distance_to_players 6
		find_closest
		avoid_actor_area 777
	else
		min_distance_to_players 6
		max_distance_to_players 8
	endif
	}
elseif USE_NOMAD_SETUP
/* no scout */
else
	create_object SCOUT_TYPE {
	start_random
		percent_chance 95	number_of_objects 1
		percent_chance 5	number_of_objects 2
	end_random
	set_place_for_every_player
	if DE_AVAILABLE
		min_distance_to_players 6
		find_closest
		avoid_actor_area 777
	else
		min_distance_to_players 7
		max_distance_to_players 9
	endif
	}
endif


if REGICIDE
	if USE_NOMAD_SETUP
	else
	create_object VILLAGER {
	number_of_objects 7
	set_place_for_every_player
	min_distance_to_players 6
	max_distance_to_players 7
	}

	start_random
		percent_chance 18 create_object THE_TOWER_OF_FLIES	#define NEED_MORE_HOUSING
		percent_chance 9 create_object KEEP				#define NEED_MORE_HOUSING
		percent_chance 3 create_object WATCH_TOWER		#define NEED_MORE_HOUSING
		percent_chance 3 create_object GUARD_TOWER		#define NEED_MORE_HOUSING
		percent_chance 3 create_object BOMBARD_TOWER	#define NEED_MORE_HOUSING
		percent_chance 18 create_object	FORTRESS_CASTLE  /* massive garrison capacity */
		percent_chance 16 create_object OUTPOST	#define NEED_MORE_HOUSING
		percent_chance 30 create_object CASTLE
	end_random
	{
	set_place_for_every_player
	min_distance_to_players 9
	max_distance_to_players 11
	min_distance_group_placement 2
	}
	endif
endif

/* chance double villager count */
start_random
	percent_chance 2	#define DOUBLE_VILLAGERS
end_random
if DOUBLE_VILLAGERS
	create_object VILLAGER {
		set_place_for_every_player
		if USE_NOMAD_SETUP
			avoid_forest_zone 3
			avoid_cliff_zone 3
			avoid_actor_area 999
			if LUDIKRIS_MAP	temp_min_distance_group_placement  45
			else			temp_min_distance_group_placement  15
			endif
		else
			min_distance_to_players 2
			max_distance_to_players 9
		endif
		#define NEED_MORE_HOUSING
	}
endif

/* chance to add extra villagers */
create_object VILLAGER {
set_place_for_every_player
if USE_NOMAD_SETUP
	avoid_forest_zone 3
	avoid_cliff_zone 3
	avoid_actor_area 999
	if LUDIKRIS_MAP	temp_min_distance_group_placement  45
	else			temp_min_distance_group_placement  15
	endif
else
	min_distance_to_players 2
	max_distance_to_players 9
endif
start_random
	percent_chance 90	number_of_objects 0
	percent_chance 3	number_of_objects 1
	percent_chance 3
		number_of_objects 2
		#define NEED_MORE_HOUSING
	percent_chance 2
		number_of_objects 3
		#define NEED_MORE_HOUSING
	percent_chance 2
		number_of_objects 4
		#define NEED_MORE_HOUSING
	percent_chance 1
		number_of_objects 5
		#define NEED_MORE_HOUSING
end_random
}

/* provide hosuing when you have more than one extra villager */
if NEED_MORE_HOUSING
	if USE_NOMAD_SETUP
	elseif USE_3_TCS
	elseif USE_2_TCS
	elseif REGICIDE
	else
	start_random
		percent_chance 44	create_object HOUSE
		percent_chance 7	create_object YURT
		percent_chance 7	create_object YURT2
		percent_chance 7	create_object YURT3
		percent_chance 7	create_object YURT4
		percent_chance 7	create_object YURT5
		percent_chance 7	create_object YURT6
		percent_chance 7	create_object YURT7
		percent_chance 7	create_object YURT8
	end_random
	{
	set_place_for_every_player
	min_distance_to_players 6
	max_distance_to_players 8
	min_distance_group_placement 2
	}
	endif
endif

/* free starting building ? */
if REGICIDE
elseif NEED_MORE_HOUSING
elseif CAPTURE_THE_RELIC
elseif DEFEND_WONDER
else
	start_random
		percent_chance 90 /* no extra starting building */
		percent_chance 10	#define FREE_BUILDING
	end_random
endif

if FREE_BUILDING
	if DE_AVAILABLE
		start_random
			percent_chance 15 create_object	DLC_FEITORIA
			percent_chance 15 create_object	MARKET
			percent_chance 14 create_object OUTPOST
			percent_chance 14 create_object BARRACKS
			percent_chance 14 create_object STABLE   /* so mesoamerican civs can train xolotl warriors */
			percent_chance 14 create_object ARCHERY_RANGE
			percent_chance 14 create_object MONASTERY
		end_random
	elseif DLC
		start_random
			percent_chance 17 create_object	DLC_FEITORIA
			percent_chance 17 create_object	MARKET
			percent_chance 17 create_object OUTPOST
			percent_chance 17 create_object BARRACKS
			percent_chance 16 create_object ARCHERY_RANGE
			percent_chance 16 create_object MONASTERY
		end_random
	else
		start_random
			percent_chance 20 create_object	MARKET
			percent_chance 20 create_object OUTPOST
			percent_chance 20 create_object BARRACKS
			percent_chance 20 create_object ARCHERY_RANGE
			percent_chance 20 create_object MONASTERY
		end_random
	endif
	{
	set_place_for_every_player
	min_distance_to_players 9
	max_distance_to_players 11
	min_distance_group_placement 2
	}
endif


/* starting boat */
if WATER_IS_DRY
elseif FREEZE_ALL_WATER
elseif FREEZE_PRIMARY_AND_SECONDARY_WATER
elseif WATER_BASED_MAP		#define TRY_TO_PLACE_STARTING_BOAT
elseif CENTER_IS_WATER		#define TRY_TO_PLACE_STARTING_BOAT
elseif CENTER_IS_SHALLOWS	#define TRY_TO_PLACE_STARTING_BOAT
endif

if TRY_TO_PLACE_STARTING_BOAT
	start_random
		percent_chance 50 #define PLACE_STARTING_BOAT
	end_random
endif

if DLC
	start_random
		percent_chance 30	#define DLC_STARTING_BOAT
		percent_chance 70	#define AOC_STARTING_BOAT
	end_random
else	#define AOC_STARTING_BOAT	endif

if USE_NOMAD_SETUP
	#const BOAT_TYPE 545	/* transport ship */
elseif DLC_STARTING_BOAT
	start_random
		percent_chance 40	#const BOAT_TYPE 1103	/* fire galley */
		percent_chance 40	#const BOAT_TYPE 1104	/* demolition raft */
		percent_chance 20	#const BOAT_TYPE 778	/* canoe */
		percent_chance 10	#const BOAT_TYPE 938	/* dragon ship */
		percent_chance 20	#const BOAT_TYPE 1022	/* monkboat */
	end_random
elseif AOC_STARTING_BOAT
	start_random
		percent_chance 25	#const BOAT_TYPE 13		/* fishing ship */
		percent_chance 5	#const BOAT_TYPE 15		/* junk */  /* turns invisible in combat in AoC ; can trade with */
		percent_chance 15	#const BOAT_TYPE 17		/* trade cog */
		percent_chance 5	#const BOAT_TYPE 527	/* demolition ship */
		percent_chance 5	#const BOAT_TYPE 529	/* fire ship */
		percent_chance 5	#const BOAT_TYPE 536	/* abgal - advanced boarding galley */
		percent_chance 15	#const BOAT_TYPE 539	/* galley */
		percent_chance 25	#const BOAT_TYPE 545	/* transport ship */
	end_random
endif

if PLACE_STARTING_BOAT
	create_object BOAT_TYPE {
	terrain_to_place_on WATER_A
	set_place_for_every_player
	min_distance_to_players 0
	max_distance_to_players 64
	avoid_forest_zone 4
	}
endif


endif

/* end starting units and buildings */
/* =================================================================================================== */
/* relics and koTH stuff */


if USE_RELIC_RUSH
	create_object RELIC {
		number_of_objects 200
		place_on_specific_land_id 22
		max_distance_to_players 2
		terrain_to_place_on LAND_Z
	}
endif

#const NEUTRAL_MARKET 1646
if USE_NEUTRAL_MARKET
	create_object TEMPORARY_OBJECT_GRID {
		number_of_objects 1
		set_gaia_object_only
		set_gaia_unconvertible
		place_on_specific_land_id 22
		max_distance_to_players 0
		second_object NEUTRAL_MARKET
	}
endif

/* place outlaws and map revealers around the monument in koth or the relic in ctr */
if SPECIAL_CENTER
	create_object MAP_REVEALER {
		set_place_for_every_player
		number_of_objects 800
		terrain_to_place_on LAND_Z
	}
	if USE_NOMAD_SETUP
	else
		create_object OUTLAW {
			number_of_objects 200
			place_on_specific_land_id 22
			min_distance_to_players 3
			terrain_to_place_on LAND_Z
			max_distance_to_players 10
			temp_min_distance_group_placement 1
			min_distance_group_placement 1
		}
	endif
endif

/* enable resources from controlling the monument in KoTH */
#const MONUMENT_RESOURCES 1639
if DE_AVAILABLE
	if KING_OT_HILL
	create_object MONUMENT_RESOURCES {
		set_place_for_every_player
		max_distance_to_players 3
	}
	endif
endif



if USE_RELIC_RUSH
#define NO_SCATTERED_RELICS
elseif NO_CONNECTIONS	/* personal relics given on island and michi maps */
	#define USE_PERSONAL_RELIC
	if 2_PLAYER_GAME		#define SECOND_PERSONAL_RELIC
	elseif 3_PLAYER_GAME	#define SECOND_PERSONAL_RELIC
	endif
	#define NO_SCATTERED_RELICS
elseif ALLOW_PERSONAL_RELIC
	start_random
		percent_chance 10	#define USE_PERSONAL_RELIC
	end_random
endif
#define USE_PERSONAL_RELIC
/* free personal relic */
if USE_PERSONAL_RELIC
	create_object RELIC {
	set_place_for_every_player
	set_gaia_object_only
	min_distance_to_players 5
	max_distance_to_players 12
	min_distance_group_placement 1
	avoid_forest_zone 2
	avoid_cliff_zone 3
	if USE_STANDARD_RESOURCES
	else /* occasionally double up the relics */
		if DE_AVAILABLE
			start_random
				percent_chance 1	second_object RELIC
			end_random
		endif
	endif
	}
endif
/* on island and michi maps only */
if SECOND_PERSONAL_RELIC
	create_object RELIC {
	set_place_for_every_player
	set_gaia_object_only
	min_distance_to_players 15
	max_distance_to_players 21
	min_distance_group_placement 1
	avoid_forest_zone 2
	avoid_cliff_zone 3
	if USE_STANDARD_RESOURCES
	else /* occasionally double up the relics */
		if DE_AVAILABLE
			start_random
				percent_chance 1	second_object RELIC
			end_random
		endif
	endif
	}
endif

/* place relics in corners If the corners have an otherwise useless terrain (very rare) */
if CORNERS_USE_LAND_Z
	if USE_NOMAD_SETUP
	else
		create_object OUTLAW {
			number_of_objects 15
			number_of_groups 4
			place_on_specific_land_id 3
			terrain_to_place_on LAND_Z
			min_distance_to_players 2
			temp_min_distance_group_placement 80
		}
	endif
	create_object RELIC {
		start_random
			percent_chance 50	number_of_objects 0
			percent_chance 50	number_of_objects 1
		end_random
		place_on_specific_land_id 3
		min_distance_to_players 0
		max_distance_to_players 0
		if DE_AVAILABLE
			actor_area 3
			actor_area_radius 80
			min_distance_group_placement 2
		else
			min_distance_group_placement 40
		endif
		temp_min_distance_group_placement 80
	if USE_STANDARD_RESOURCES
	else /* occasionally double up the relics */
		if DE_AVAILABLE
			start_random
				percent_chance 1	second_object RELIC
			end_random
		endif
	endif
	}
endif

/* standard relics */
if NO_SCATTERED_RELICS
elseif USE_5_RELICS
	create_object RELIC {
		max_distance_to_other_zones 2
		avoid_forest_zone 2
		avoid_cliff_zone 3
		number_of_objects 5
		min_distance_to_players 25
		min_distance_group_placement 1
		avoid_actor_area 3
		avoid_actor_area 999
		if TINY_MAP			temp_min_distance_group_placement 25
		elseif SMALL_MAP	temp_min_distance_group_placement 35
		elseif MEDIUM_MAP	temp_min_distance_group_placement 45
		elseif LARGE_MAP	temp_min_distance_group_placement 55
		elseif HUGE_MAP		temp_min_distance_group_placement 65
		elseif GIGANTIC_MAP	temp_min_distance_group_placement 80
		elseif LUDIKRIS_MAP	temp_min_distance_group_placement 110
		endif
	}
elseif USE_EVENLY_SPACED_RELICS
	create_object RELIC {
		max_distance_to_other_zones 2
		avoid_forest_zone 2
		avoid_cliff_zone 3
		number_of_objects 1000
		min_distance_to_players 25
		min_distance_group_placement 1
		avoid_actor_area 3
		avoid_actor_area 999
		if RND_AVAILABLE
			if TINY_MAP			temp_min_distance_group_placement rnd(25,45)
			elseif SMALL_MAP	temp_min_distance_group_placement rnd(30,45)
			elseif MEDIUM_MAP	temp_min_distance_group_placement rnd(35,55)
			elseif LARGE_MAP	temp_min_distance_group_placement rnd(40,65)
			elseif HUGE_MAP		temp_min_distance_group_placement rnd(45,75)
			elseif GIGANTIC_MAP	temp_min_distance_group_placement rnd(50,90)
			elseif LUDIKRIS_MAP	temp_min_distance_group_placement rnd(70,120)
		endif
		else
			if TINY_MAP			temp_min_distance_group_placement 35
			elseif SMALL_MAP	temp_min_distance_group_placement 45
			elseif MEDIUM_MAP	temp_min_distance_group_placement 55
			elseif LARGE_MAP	temp_min_distance_group_placement 65
			elseif HUGE_MAP		temp_min_distance_group_placement 75
			elseif GIGANTIC_MAP	temp_min_distance_group_placement 90
			elseif LUDIKRIS_MAP	temp_min_distance_group_placement 120
			endif
		endif
	if USE_STANDARD_RESOURCES
	else /* occasionally double up the relics */
		if DE_AVAILABLE
			start_random
				percent_chance 1	second_object RELIC
			end_random
		endif
	endif
	}
elseif USE_DE_RELIC_BALANCE
	create_object RELIC {
		max_distance_to_other_zones 2
		avoid_forest_zone 2
		avoid_cliff_zone 3
		min_distance_to_players 25
		min_distance_group_placement 1
		avoid_actor_area 3
		avoid_actor_area 999
		if TINY_MAP
			number_of_objects 5
			temp_min_distance_group_placement 35
		elseif SMALL_MAP
			number_of_objects 5
			temp_min_distance_group_placement 38
		elseif MEDIUM_MAP
			number_of_objects 5
			temp_min_distance_group_placement 38
		elseif LARGE_MAP
			number_of_objects 7
			temp_min_distance_group_placement 48
		elseif HUGE_MAP
			number_of_objects 8
			temp_min_distance_group_placement 52
		else
			number_of_objects 999
			temp_min_distance_group_placement 52
		endif
	if USE_STANDARD_RESOURCES
	else /* occasionally double up the relics */
		if DE_AVAILABLE
			start_random
				percent_chance 1	second_object RELIC
			end_random
		endif
	endif
	}
elseif USE_RANDOM_RELIC_COUNT
	create_object RELIC {
		max_distance_to_other_zones 2
		avoid_forest_zone 2
		avoid_cliff_zone 3
		min_distance_to_players 25
		min_distance_group_placement 1
		avoid_actor_area 3
		avoid_actor_area 999
		start_random
			percent_chance 5
				number_of_objects 1
			percent_chance 5
				number_of_objects 1
				set_scaling_to_player_number
			percent_chance 5
				number_of_objects 1
				set_scaling_to_map_size
			percent_chance 5
				number_of_objects 2
			percent_chance 5
				number_of_objects 2
				set_scaling_to_player_number
			percent_chance 5
				number_of_objects 2
				set_scaling_to_map_size
			percent_chance 5
				number_of_objects 3
			percent_chance 5
				number_of_objects 3
				set_scaling_to_player_number
			percent_chance 5
				number_of_objects 3
				set_scaling_to_map_size
			percent_chance 25    /* default here */
				number_of_objects 5
			percent_chance 5
				number_of_objects 4
			percent_chance 5
				number_of_objects 4
				set_scaling_to_player_number
			percent_chance 5
				number_of_objects 4
				set_scaling_to_map_size
			percent_chance 5
				number_of_objects 5
			percent_chance 5
				number_of_objects 5
				set_scaling_to_player_number
			percent_chance 5
				number_of_objects 5
				set_scaling_to_map_size
		end_random
		if RND_AVAILABLE
			if TINY_MAP			temp_min_distance_group_placement rnd(25,45)
			elseif SMALL_MAP	temp_min_distance_group_placement rnd(30,45)
			elseif MEDIUM_MAP	temp_min_distance_group_placement rnd(35,55)
			elseif LARGE_MAP	temp_min_distance_group_placement rnd(40,65)
			elseif HUGE_MAP		temp_min_distance_group_placement rnd(45,75)
			elseif GIGANTIC_MAP	temp_min_distance_group_placement rnd(50,90)
			elseif LUDIKRIS_MAP	temp_min_distance_group_placement rnd(70,120)
		endif
		else
			if TINY_MAP			temp_min_distance_group_placement 35
			elseif SMALL_MAP	temp_min_distance_group_placement 45
			elseif MEDIUM_MAP	temp_min_distance_group_placement 55
			elseif LARGE_MAP	temp_min_distance_group_placement 65
			elseif HUGE_MAP		temp_min_distance_group_placement 75
			elseif GIGANTIC_MAP	temp_min_distance_group_placement 90
			elseif LUDIKRIS_MAP	temp_min_distance_group_placement 120
			endif
		endif
	if USE_STANDARD_RESOURCES
	else /* occasionally double up the relics */
		if DE_AVAILABLE
			start_random
				percent_chance 1	second_object RELIC
			end_random
		endif
	endif
	}
endif

/* relics done */
/* =================================================================================================== */

/* starting resources and map resources */

/* alternative gold and stone styles */
if USE_STANDARD_RESOURCES
	#const GOLD_TYPE 66	/* standard */
	#const STONE_TYPE 102 /* standard */
elseif DLC
	start_random
		percent_chance 96
			#const GOLD_TYPE 66	/* standard */
			#const STONE_TYPE 102 /* standard */
		percent_chance 2
			#const GOLD_TYPE 841	/* gold rock */
			#const STONE_TYPE 102 /* standard */
		percent_chance 2
			#const GOLD_TYPE 66	/* standard */
			#const STONE_TYPE 839 /* stone rock */
	end_random
else
	#const GOLD_TYPE 66	/* standard */
	#const STONE_TYPE 102 /* standard */
endif


if INFINITE_RESOURCES	/* place no resources */
elseif USE_STANDARD_RESOURCES

if EMPIRE_WARS  /* primary forage and gold have already been placed */
else
/* near forage */
create_object BERRY_TYPE {
	number_of_objects 6
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		min_distance_to_players 9
		max_distance_to_players 13
	endif
	min_distance_group_placement 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

/* near gold */
create_object GOLD_TYPE {
	number_of_objects 7
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		min_distance_to_players 12
		max_distance_to_players 16
	endif
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 3
	avoid_cliff_zone 3
}
endif

/* medium gold */
create_object GOLD_TYPE {
	number_of_objects 4
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 50
				min_distance_to_players 17
				max_distance_to_players 22
			percent_chance 50
				min_distance_to_players 20
				max_distance_to_players 25
		end_random
	endif
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
	if EMPIRE_WARS
		avoid_actor_area 8
		avoid_actor_area 9
		avoid_actor_area 10
		avoid_actor_area 12
		avoid_actor_area 14
		avoid_actor_area 40
		avoid_actor_area 71
		avoid_actor_area 72
		avoid_actor_area 73
		avoid_actor_area 80
		avoid_actor_area 94
		avoid_actor_area 51
		avoid_actor_area 171
	endif
}

/* far gold */
create_object GOLD_TYPE {
	number_of_objects 4
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 50
				min_distance_to_players 23
				max_distance_to_players 28
			percent_chance 50
				min_distance_to_players 27
				max_distance_to_players 32
		end_random
	endif
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

/* near stone */
create_object STONE_TYPE {
	number_of_objects 5
	group_placement_radius 2
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		min_distance_to_players 13
		max_distance_to_players 18
	endif
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
	if EMPIRE_WARS
		avoid_actor_area 8
		avoid_actor_area 9
		avoid_actor_area 10
		avoid_actor_area 12
		avoid_actor_area 14
		avoid_actor_area 40
		avoid_actor_area 71
		avoid_actor_area 72
		avoid_actor_area 73
		avoid_actor_area 80
		avoid_actor_area 94
		avoid_actor_area 51
		avoid_actor_area 171
	endif
}

/* far stone */
create_object STONE_TYPE {
	number_of_objects 4
	group_placement_radius 2
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 50
				min_distance_to_players 20
				max_distance_to_players 24
			percent_chance 50
				min_distance_to_players 22
				max_distance_to_players 27
		end_random
	endif
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
	if EMPIRE_WARS
		avoid_actor_area 8
		avoid_actor_area 9
		avoid_actor_area 10
		avoid_actor_area 12
		avoid_actor_area 14
		avoid_actor_area 40
		avoid_actor_area 71
		avoid_actor_area 72
		avoid_actor_area 73
		avoid_actor_area 80
		avoid_actor_area 94
		avoid_actor_area 51
		avoid_actor_area 171
	endif
}

/* also going to use the new DE balance here */
if DEATH_MATCH
elseif DEFEND_WONDER
elseif EMPIRE_WARS
else
create_object SHEEP_TYPE {
	if SHEEP_IS_COW	number_of_objects 3
	else			number_of_objects 4	endif
	set_loose_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		min_distance_to_players 7
		max_distance_to_players 8
	endif
	avoid_forest_zone 2
	avoid_cliff_zone 3
}
create_object SHEEP_TYPE {
	number_of_objects 2
	if SHEEP_IS_COW	number_of_groups 1
	else			number_of_groups 2	endif
	set_loose_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 20
				min_distance_to_players 14
				max_distance_to_players 17
			percent_chance 20
				min_distance_to_players 18
				max_distance_to_players 21
			percent_chance 20
				min_distance_to_players 20
				max_distance_to_players 23
			percent_chance 20
				min_distance_to_players 24
				max_distance_to_players 27
			percent_chance 20
				min_distance_to_players 27
				max_distance_to_players 30
		end_random
	endif
	avoid_forest_zone 2
	avoid_cliff_zone 3
}
if SHEEP_IS_COW
	create_object SHEEP_TYPE {
		number_of_objects 1
		set_gaia_object_only
		set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 20
				min_distance_to_players 14
				max_distance_to_players 17
			percent_chance 20
				min_distance_to_players 18
				max_distance_to_players 21
			percent_chance 20
				min_distance_to_players 20
				max_distance_to_players 23
			percent_chance 20
				min_distance_to_players 24
				max_distance_to_players 27
			percent_chance 20
				min_distance_to_players 27
				max_distance_to_players 30
		end_random
	endif
		avoid_forest_zone 2
		avoid_cliff_zone 3
	}
endif

create_object DEER_TYPE {
	start_random
		percent_chance 50	number_of_objects 4
		percent_chance 50	number_of_objects 3
	end_random
	number_of_groups 1
	group_placement_radius 3
	set_loose_grouping
	set_gaia_object_only
	set_place_for_every_player
	avoid_forest_zone 2
	avoid_cliff_zone 3
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 20
				min_distance_to_players 14
				max_distance_to_players 17
			percent_chance 20
				min_distance_to_players 18
				max_distance_to_players 21
			percent_chance 20
				min_distance_to_players 21
				max_distance_to_players 24
			percent_chance 20
				min_distance_to_players 24
				max_distance_to_players 27
			percent_chance 20
				min_distance_to_players 27
				max_distance_to_players 30
		end_random
	endif
}

create_object BOAR_TYPE {
	number_of_groups 2
	set_gaia_object_only
	set_place_for_every_player
	avoid_forest_zone 2
	avoid_cliff_zone 3
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	elseif USE_WALLS
		min_distance_to_players 15
		max_distance_to_players 16
	else
		min_distance_to_players 16	/* further distances removed to make boar stealing harder and reduce unlucky map generations */
		max_distance_to_players 19
	endif
}

endif
if USE_NOMAD_SETUP
elseif DEATH_MATCH
elseif DEFEND_WONDER
else
create_object PREDATOR_TYPE {
	number_of_objects 2
	set_gaia_object_only
	set_place_for_every_player
	start_random
	percent_chance 33
		min_distance_to_players 30
		max_distance_to_players 33
	percent_chance 33
		min_distance_to_players 34
		max_distance_to_players 37
	percent_chance 34
		min_distance_to_players 37
		max_distance_to_players 40
	end_random
	temp_min_distance_group_placement 15
	avoid_forest_zone 2
	avoid_cliff_zone 3
}
endif

/* =================================================================================================== */
/* scattered map resources */

/* using the modern balance from DE, rather than the classic balance here */   /* may need to adjust */


if NO_CONNECTIONS   /* on islands/michi style; extra player gold and stone as compensation for no scattered map gold and stone */

create_object GOLD_TYPE {
	number_of_objects 4
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	min_distance_to_players 30
	max_distance_to_players 40
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

create_object STONE_TYPE {
	number_of_objects 4
	group_placement_radius 2
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	min_distance_to_players 30
	max_distance_to_players 40
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

else /* scatter resources evenly across the map */
create_object BERRY_TYPE {
    number_of_groups 9320
    group_placement_radius 2
    set_tight_grouping
    set_gaia_object_only
	min_distance_group_placement 4
	if USE_LAND_NOMAD_RESOURCES
		number_of_objects 6
		temp_min_distance_group_placement 26
	else
		number_of_objects 4
		min_distance_to_players 40
		temp_min_distance_group_placement 112
	endif
	avoid_forest_zone 3
	avoid_cliff_zone 3
}
/* extra gold */
create_object GOLD_TYPE {
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 9320
		number_of_objects 6
		temp_min_distance_group_placement 24
	elseif TINY_MAP
		number_of_groups 2
		number_of_objects 3
		temp_min_distance_group_placement 52
	elseif SMALL_MAP
		number_of_groups 3
		number_of_objects 3
		temp_min_distance_group_placement 56
	elseif MEDIUM_MAP
		number_of_groups 9320
		number_of_objects 4
		temp_min_distance_group_placement 56
	elseif LARGE_MAP
		number_of_groups 9320
		number_of_objects 4
		temp_min_distance_group_placement 56
	else
		number_of_groups 9320
		number_of_objects 4
		temp_min_distance_group_placement 64
	endif
    group_placement_radius 2
    set_tight_grouping
    set_gaia_object_only
	min_distance_group_placement 4
	min_distance_to_players 36
	avoid_forest_zone 3
	avoid_cliff_zone 3
}
/* extra stone */
create_object STONE_TYPE {
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 9320
		number_of_objects 6
		temp_min_distance_group_placement 24
	elseif TINY_MAP		number_of_objects 2
	elseif SMALL_MAP	number_of_objects 2
	elseif MEDIUM_MAP
		number_of_groups 9320
		number_of_objects 3
		temp_min_distance_group_placement 56
	elseif LARGE_MAP
		number_of_groups 9320
		number_of_objects 4
		temp_min_distance_group_placement 56
	elseif HUGE_MAP
		number_of_groups 9320
		number_of_objects 4
		temp_min_distance_group_placement 60
	else
		number_of_groups 9320
		number_of_objects 4
		temp_min_distance_group_placement 64
	endif
    group_placement_radius 2
    set_tight_grouping
    set_gaia_object_only
	min_distance_group_placement 4
	min_distance_to_players 36
	avoid_forest_zone 3
	avoid_cliff_zone 3
}
endif

/* extra animals  */
create_object SHEEP_TYPE {
	number_of_groups 9320
	set_gaia_object_only
	if USE_LAND_NOMAD_RESOURCES
		temp_min_distance_group_placement 20
	else
		number_of_objects 2
		temp_min_distance_group_placement 70
		min_distance_to_players 40
	endif
	avoid_forest_zone 2
	avoid_cliff_zone 3
}
create_object DEER_TYPE {
	number_of_groups 9320
	number_of_objects 3
	set_gaia_object_only
	if USE_LAND_NOMAD_RESOURCES
		temp_min_distance_group_placement 21
	else
		temp_min_distance_group_placement 60
		min_distance_to_players 40
	endif
	avoid_forest_zone 2
	avoid_cliff_zone 3
}
create_object BOAR_TYPE {
	number_of_groups 9320
	set_gaia_object_only
	if USE_LAND_NOMAD_RESOURCES
		temp_min_distance_group_placement 24
	else
		number_of_objects 2
		temp_min_distance_group_placement 80
		min_distance_to_players 40
	endif
	avoid_forest_zone 2
	avoid_cliff_zone 3
}


/* =================================================================================================== */
/* place extra resources on center and corner lands */
/* rush type */
if ALLOW_CENTER_RUSH_RESOURCES
if CENTER_IS_LAND
	if WATER_BASED_MAP
		if NO_CONNECTIONS	#define PLACE_CENTER_RESOURCES
		else
			start_random
				percent_chance 80 #define PLACE_CENTER_RESOURCES
			end_random
		endif
	else
		start_random
			percent_chance 100 #define PLACE_CENTER_RESOURCES
		end_random
	endif
endif

if PLACE_CENTER_RESOURCES
	start_random
		percent_chance 20	create_object GOLD_TYPE
		percent_chance 20	create_object STONE_TYPE
		percent_chance 20	create_object BERRY_TYPE
		percent_chance 20	create_object DEER_TYPE
		percent_chance 20	create_object BOAR_TYPE
	end_random
	{
		terrain_to_place_on LAND_X
		number_of_objects 6
		number_of_groups 8
		place_on_specific_land_id 2
		set_scaling_to_map_size
		group_variance 2
		min_distance_group_placement 4
		temp_min_distance_group_placement 12
		avoid_forest_zone 2
		avoid_cliff_zone 3
		start_random
			percent_chance 50	set_loose_grouping
			percent_chance 50	set_tight_grouping
		end_random
	}

	/* predators in center unless nomad */
	if USE_NOMAD_SETUP
	else
		create_object PREDATOR_TYPE {
		terrain_to_place_on LAND_X
		number_of_objects 2
		number_of_groups 8
		place_on_specific_land_id 2
		set_scaling_to_map_size
		group_variance 1
		min_distance_group_placement 1
		temp_min_distance_group_placement 12
		avoid_forest_zone 2
		avoid_cliff_zone 3
		}
	endif
endif
endif

if ALLOW_CORNER_RUSH_RESOURCES
if CORNERS_USE_LAND_X
	if WATER_BASED_MAP
		if NO_CONNECTIONS	#define PLACE_CORNER_RESOURCES
		else
			start_random
				percent_chance 80 #define PLACE_CORNER_RESOURCES
			end_random
		endif
	else
		start_random
			percent_chance 50 #define PLACE_CORNER_RESOURCES
		end_random
	endif
endif

if PLACE_CORNER_RESOURCES
	start_random
		percent_chance 20	create_object GOLD_TYPE
		percent_chance 20	create_object STONE_TYPE
		percent_chance 20	create_object BERRY_TYPE
		percent_chance 20	create_object DEER_TYPE
		percent_chance 20	create_object BOAR_TYPE
	end_random
	{
		terrain_to_place_on LAND_X
		number_of_objects 4
		number_of_groups 8
		place_on_specific_land_id 3
		set_scaling_to_map_size
		group_variance 1
		min_distance_group_placement 4
		temp_min_distance_group_placement 12
		avoid_forest_zone 2
		avoid_cliff_zone 3
		start_random
			percent_chance 50	set_loose_grouping
			percent_chance 50	set_tight_grouping
		end_random
	}
endif
endif

/* ie. water center lands that have a terrain island */
if CENTRAL_ISLAND
	start_random
		percent_chance 20	create_object GOLD_TYPE
		percent_chance 20	create_object STONE_TYPE
		percent_chance 20	create_object BERRY_TYPE
		percent_chance 20	create_object DEER_TYPE
		percent_chance 20	create_object BOAR_TYPE
	end_random
	{
		terrain_to_place_on LAND_X
		number_of_objects 6
		number_of_groups 8
		place_on_specific_land_id 2
		set_scaling_to_map_size
		group_variance 2
		min_distance_group_placement 4
		temp_min_distance_group_placement 12
		avoid_forest_zone 2
		avoid_cliff_zone 3
		start_random
			percent_chance 50	set_loose_grouping
			percent_chance 50	set_tight_grouping
		end_random
	}
endif


/* =================================================================================================== */
/* other map resources */

/* default straggler trees */
if DEATH_MATCH
elseif DEFEND_WONDER
elseif EMPIRE_WARS
else
create_object STRAGGLER_A {
	number_of_objects 2
	set_gaia_object_only
	set_place_for_every_player
	min_distance_to_players 4
	max_distance_to_players 5
	min_distance_group_placement 1
}
create_object STRAGGLER_B {
	number_of_objects 3
	set_gaia_object_only
	set_place_for_every_player
	min_distance_to_players 6
	max_distance_to_players 8
	min_distance_group_placement 1
}
endif

/* birds */
create_object BIRD_TYPE {
	number_of_objects 6
	set_scaling_to_map_size
}

/* scattered wolves */
if USE_NOMAD_SETUP
elseif DEATH_MATCH
elseif DEFEND_WONDER
else
create_object PREDATOR_TYPE {
	number_of_groups 9320
	set_loose_grouping
	start_random
		percent_chance 75	number_of_objects 1
		percent_chance 25	number_of_objects 2
	end_random
	set_gaia_object_only
	min_distance_group_placement 1
	temp_min_distance_group_placement 60
	avoid_forest_zone 2
	avoid_cliff_zone 3
	min_distance_to_players 40
}
endif

if DEATH_MATCH
elseif DEFEND_WONDER
else
/* scattered stragglers */
create_object STRAGGLER_A {
	number_of_objects 10
	set_gaia_object_only
	set_scaling_to_map_size
	min_distance_to_players 8
	min_distance_group_placement 1
	temp_min_distance_group_placement 12
	avoid_forest_zone 1
	avoid_cliff_zone 2
}
create_object STRAGGLER_B {
	number_of_objects 10
	set_gaia_object_only
	set_scaling_to_map_size
	min_distance_to_players 8
	min_distance_group_placement 1
	temp_min_distance_group_placement 12
	avoid_forest_zone 1
	avoid_cliff_zone 2
}
create_object STRAGGLER_C {
	number_of_objects 10
	set_gaia_object_only
	set_scaling_to_map_size
	min_distance_to_players 8
	min_distance_group_placement 1
	temp_min_distance_group_placement 12
	avoid_forest_zone 1
	avoid_cliff_zone 2
}
endif

/* =================================================================================================== */
/* fish */
/* possibly add something to prevent fish on ice shallows If people don't like that */

create_object SHOREFISH_C {
	number_of_objects 9320
	set_gaia_object_only
	min_distance_group_placement  3
	temp_min_distance_group_placement 7
}
create_object DEEPFISH_D {
	number_of_objects 9320
	set_gaia_object_only
	min_distance_group_placement 4
	temp_min_distance_group_placement 12
	max_distance_to_other_zones 7
}
create_object FISH_A {
	number_of_objects 9320
	set_gaia_object_only
	max_distance_to_other_zones 4
	min_distance_group_placement 4
	temp_min_distance_group_placement 12
}
create_object FISH_B {
	number_of_objects 9320
	set_gaia_object_only
	max_distance_to_other_zones 4
	min_distance_group_placement 4
	temp_min_distance_group_placement 8
}

/* end standard resources */
else  /* random resources here */ /* =================================================================================================== */

if RND_AVAILABLE
	start_random
		percent_chance 5	#define GIVE_PREDATORS_FOOD
	end_random
endif

/* near forage */
create_object BERRY_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-100,400)
	endif
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 2	number_of_objects 2
		percent_chance 5	number_of_objects 3
		percent_chance 10	number_of_objects 4
		percent_chance 10	number_of_objects 5
		percent_chance 10	number_of_objects 6
		percent_chance 10	number_of_objects 7
		percent_chance 10	number_of_objects 8
		percent_chance 10	number_of_objects 9
		percent_chance 10	number_of_objects 10
		percent_chance 10	number_of_objects 11
		percent_chance 10	number_of_objects 12
	end_random
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		min_distance_to_players 9
		max_distance_to_players 13
	endif
	min_distance_group_placement 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

/* near gold */
create_object GOLD_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-600,600)
	endif
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 2	number_of_objects 2
		percent_chance 5	number_of_objects 3
		percent_chance 5	number_of_objects 4
		percent_chance 10	number_of_objects 5
		percent_chance 10	number_of_objects 6
		percent_chance 15	number_of_objects 7
		percent_chance 10	number_of_objects 8
		percent_chance 10	number_of_objects 9
		percent_chance 10	number_of_objects 10
		percent_chance 10	number_of_objects 11
		percent_chance 5	number_of_objects 12
		percent_chance 3	number_of_objects 13
		percent_chance 2	number_of_objects 14
	end_random
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		min_distance_to_players 12
		max_distance_to_players 16
	endif
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 3
	avoid_cliff_zone 3
}


/* medium gold */
create_object GOLD_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-600,600)
	endif
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 7	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 30	number_of_objects 4
		percent_chance 20	number_of_objects 5
		percent_chance 10	number_of_objects 6
		percent_chance 7	number_of_objects 7
		percent_chance 3	number_of_objects 8
	end_random
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 50
				min_distance_to_players 17
				max_distance_to_players 22
			percent_chance 50
				min_distance_to_players 22
				max_distance_to_players 25
		end_random
	endif
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

/* far gold */
create_object GOLD_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-600,600)
	endif
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 7	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 30	number_of_objects 4
		percent_chance 20	number_of_objects 5
		percent_chance 10	number_of_objects 6
		percent_chance 7	number_of_objects 7
		percent_chance 3	number_of_objects 8
	end_random
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 50
				min_distance_to_players 23
				max_distance_to_players 28
			percent_chance 50
				min_distance_to_players 27
				max_distance_to_players 32
		end_random
	endif
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

/* near stone */
create_object STONE_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-200,400)
	endif
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 2	number_of_objects 2
		percent_chance 10	number_of_objects 3
		percent_chance 15	number_of_objects 4
		percent_chance 20	number_of_objects 5
		percent_chance 15	number_of_objects 6
		percent_chance 10	number_of_objects 7
		percent_chance 10	number_of_objects 8
		percent_chance 10	number_of_objects 9
		percent_chance 5	number_of_objects 10
	end_random
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		min_distance_to_players 13
		max_distance_to_players 18
	endif
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

/* far stone */
create_object STONE_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-200,400)
	endif
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 7	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 30	number_of_objects 4
		percent_chance 20	number_of_objects 5
		percent_chance 10	number_of_objects 6
		percent_chance 7	number_of_objects 7
		percent_chance 3	number_of_objects 8
	end_random
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 50
				min_distance_to_players 20
				max_distance_to_players 24
			percent_chance 50
				min_distance_to_players 22
				max_distance_to_players 27
		end_random
	endif
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

/* also going to use the new DE balance here */
if DEATH_MATCH
elseif DEFEND_WONDER
elseif EMPIRE_WARS
else
create_object SHEEP_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-50,50)
	endif
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 7	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 30	number_of_objects 4
		percent_chance 20	number_of_objects 5
		percent_chance 10	number_of_objects 6
		percent_chance 7	number_of_objects 7
		percent_chance 3	number_of_objects 8
	end_random
	set_loose_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		min_distance_to_players 7
		max_distance_to_players 8
	endif
	avoid_forest_zone 2
	avoid_cliff_zone 3
}
create_object SHEEP_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-50,50)
	endif
	start_random
		percent_chance 25	number_of_groups 1
		percent_chance 50	number_of_groups 2
		percent_chance 25	number_of_groups 3
	end_random
	start_random
		percent_chance 5	number_of_objects 0
		percent_chance 20	number_of_objects 1
		percent_chance 50	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 5	number_of_objects 4
	end_random
	set_loose_grouping
	set_gaia_object_only
	set_place_for_every_player
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 20
				min_distance_to_players 14
				max_distance_to_players 17
			percent_chance 20
				min_distance_to_players 18
				max_distance_to_players 21
			percent_chance 20
				min_distance_to_players 20
				max_distance_to_players 23
			percent_chance 20
				min_distance_to_players 24
				max_distance_to_players 27
			percent_chance 20
				min_distance_to_players 27
				max_distance_to_players 30
		end_random
	endif
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

create_object DEER_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-50,50)
	endif
	start_random
		percent_chance 50	number_of_groups 1
		percent_chance 50	number_of_groups 2
	end_random
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 7	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 40	number_of_objects 4
		percent_chance 20	number_of_objects 5
		percent_chance 7	number_of_objects 6
		percent_chance 2	number_of_objects 7
		percent_chance 1	number_of_objects 8
	end_random
	group_placement_radius 3
	set_loose_grouping
	set_gaia_object_only
	set_place_for_every_player
	avoid_forest_zone 2
	avoid_cliff_zone 3
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	else
		start_random
			percent_chance 20
				min_distance_to_players 14
				max_distance_to_players 17
			percent_chance 20
				min_distance_to_players 18
				max_distance_to_players 21
			percent_chance 20
				min_distance_to_players 21
				max_distance_to_players 24
			percent_chance 20
				min_distance_to_players 24
				max_distance_to_players 27
			percent_chance 20
				min_distance_to_players 27
				max_distance_to_players 30
		end_random
	endif
}

create_object BOAR_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-200,200)
	endif
	start_random
		percent_chance 10	number_of_objects 0
		percent_chance 80	number_of_objects 1
		percent_chance 10	number_of_objects 2
	end_random
	set_gaia_object_only
	set_place_for_every_player
	avoid_forest_zone 2
	avoid_cliff_zone 3
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	elseif USE_WALLS
		min_distance_to_players 15
		max_distance_to_players 16
	else
		start_random
			percent_chance 50
				min_distance_to_players 16
				max_distance_to_players 19
			percent_chance 50
				min_distance_to_players 19
				max_distance_to_players 22
		end_random
	endif
}
create_object BOAR_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-200,200)
	endif
	start_random
		percent_chance 10	number_of_objects 0
		percent_chance 80	number_of_objects 1
		percent_chance 10	number_of_objects 2
	end_random
	set_gaia_object_only
	set_place_for_every_player
	avoid_forest_zone 2
	avoid_cliff_zone 3
	if USE_LAND_NOMAD_RESOURCES
		number_of_groups 0
	elseif USE_WALLS
		min_distance_to_players 18
		max_distance_to_players 22
	else
		start_random
			percent_chance 50
				min_distance_to_players 16
				max_distance_to_players 19
			percent_chance 50
				min_distance_to_players 19
				max_distance_to_players 22
		end_random
	endif
}
endif
if USE_NOMAD_SETUP
elseif DEATH_MATCH
elseif DEFEND_WONDER
else
create_object PREDATOR_TYPE {
	if GIVE_PREDATORS_FOOD	resource_delta rnd(0,200)	/* give wolves food! */	endif
	start_random
		percent_chance 5	number_of_objects 0
		percent_chance 20	number_of_objects 1
		percent_chance 50	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 5	number_of_objects 4
	end_random
	set_gaia_object_only
	set_place_for_every_player
	start_random
	percent_chance 33
		min_distance_to_players 30
		max_distance_to_players 33
	percent_chance 33
		min_distance_to_players 34
		max_distance_to_players 37
	percent_chance 34
		min_distance_to_players 37
		max_distance_to_players 40
	end_random
	temp_min_distance_group_placement 15
	avoid_forest_zone 2
	avoid_cliff_zone 3
}
endif

/* =================================================================================================== */
/* scattered map resources */

/* using the modern balance from DE, rather than the classic balance here */   /* may need to adjust */

if NO_CONNECTIONS   /* on islands/michi style; extra player gold and stone as compensation for no scattered map gold and stone */

create_object GOLD_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-600,600)
	endif
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 7	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 30	number_of_objects 4
		percent_chance 20	number_of_objects 5
		percent_chance 10	number_of_objects 6
		percent_chance 7	number_of_objects 7
		percent_chance 3	number_of_objects 8
	end_random
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	min_distance_to_players 30
	max_distance_to_players 40
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

create_object STONE_TYPE {
	if RND_AVAILABLE
		resource_delta rnd(-200,400)
	endif
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 7	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 30	number_of_objects 4
		percent_chance 20	number_of_objects 5
		percent_chance 10	number_of_objects 6
		percent_chance 7	number_of_objects 7
		percent_chance 3	number_of_objects 8
	end_random
	group_placement_radius 3
	set_tight_grouping
	set_gaia_object_only
	set_place_for_every_player
	min_distance_to_players 30
	max_distance_to_players 40
	min_distance_group_placement 4
	max_distance_to_other_zones 4
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

else /* scatter resources evenly across the map */
create_object BERRY_TYPE {
    number_of_groups 9320
    if RND_AVAILABLE
		resource_delta rnd(-100,400)
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement rnd(16,36)
		else
			temp_min_distance_group_placement rnd(56,112)
			min_distance_to_players rnd(30,40)
		endif
	else
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement 26
		else
			min_distance_to_players 40
			temp_min_distance_group_placement 112
		endif
	endif
	group_variance 3
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 2	number_of_objects 2
		percent_chance 5	number_of_objects 3
		percent_chance 10	number_of_objects 4
		percent_chance 10	number_of_objects 5
		percent_chance 10	number_of_objects 6
		percent_chance 10	number_of_objects 7
		percent_chance 10	number_of_objects 8
		percent_chance 10	number_of_objects 9
		percent_chance 10	number_of_objects 10
		percent_chance 10	number_of_objects 11
		percent_chance 10	number_of_objects 12
	end_random
    group_placement_radius 3
    set_tight_grouping
    set_gaia_object_only
	min_distance_group_placement 4
	avoid_forest_zone 3
	avoid_cliff_zone 3
}
/* extra gold */
create_object GOLD_TYPE {
    number_of_groups 9320
	if RND_AVAILABLE
		resource_delta rnd(-600,600)
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement rnd(16,36)
		else
			temp_min_distance_group_placement rnd(36,66)
			min_distance_to_players rnd(26,40)
		endif
	else
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement 24
		else
			temp_min_distance_group_placement 56
			min_distance_to_players 36
		endif
	endif
	group_variance 2
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 2	number_of_objects 2
		percent_chance 5	number_of_objects 3
		percent_chance 10	number_of_objects 4
		percent_chance 20	number_of_objects 5
		percent_chance 30	number_of_objects 6
		percent_chance 20	number_of_objects 7
		percent_chance 10	number_of_objects 8
		percent_chance 5	number_of_objects 9
		percent_chance 2	number_of_objects 10
		percent_chance 2	number_of_objects 11
		percent_chance 1	number_of_objects 12
	end_random
    group_placement_radius 3
    set_tight_grouping
    set_gaia_object_only
	min_distance_group_placement 4
	avoid_forest_zone 3
	avoid_cliff_zone 3
}
/* extra stone */
create_object STONE_TYPE {
    number_of_groups 9320
	if RND_AVAILABLE
		resource_delta rnd(-200,400)
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement rnd(20,30)
		else
			temp_min_distance_group_placement rnd(40,70)
			min_distance_to_players rnd(26,40)
		endif
	else
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement 24
		else
			temp_min_distance_group_placement 56
			min_distance_to_players 36
		endif
	endif
	group_variance 2
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 2	number_of_objects 2
		percent_chance 5	number_of_objects 3
		percent_chance 10	number_of_objects 4
		percent_chance 20	number_of_objects 5
		percent_chance 30	number_of_objects 6
		percent_chance 20	number_of_objects 7
		percent_chance 10	number_of_objects 8
		percent_chance 5	number_of_objects 9
		percent_chance 2	number_of_objects 10
		percent_chance 2	number_of_objects 11
		percent_chance 1	number_of_objects 12
	end_random
    group_placement_radius 3
    set_tight_grouping
    set_gaia_object_only
	min_distance_group_placement 4
	avoid_forest_zone 3
	avoid_cliff_zone 3
}
endif

/* extra animals  */
create_object SHEEP_TYPE {
	number_of_groups 9320
	set_gaia_object_only
	if RND_AVAILABLE
		resource_delta rnd(-50,50)
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement rnd(15,25)
		else
			temp_min_distance_group_placement rnd(40,80)
			min_distance_to_players rnd(30,40)
		endif
	else
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement 20
		else
			temp_min_distance_group_placement 70
			min_distance_to_players 40
		endif
	endif
	group_variance 1
	start_random
		percent_chance 5	number_of_objects 0
		percent_chance 20	number_of_objects 1
		percent_chance 50	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 5	number_of_objects 4
	end_random
	avoid_forest_zone 2
	avoid_cliff_zone 3
}
create_object DEER_TYPE {
	number_of_groups 9320
	set_gaia_object_only
	if RND_AVAILABLE
		resource_delta rnd(-50,50)
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement rnd(16,26)
		else
			temp_min_distance_group_placement rnd(40,80)
			min_distance_to_players rnd(30,40)
		endif
	else
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement 21
		else
			temp_min_distance_group_placement 60
			min_distance_to_players 40
		endif
	endif
	group_variance 2
	start_random
		percent_chance 1	number_of_objects 0
		percent_chance 2	number_of_objects 1
		percent_chance 7	number_of_objects 2
		percent_chance 35	number_of_objects 3
		percent_chance 35	number_of_objects 4
		percent_chance 15	number_of_objects 5
		percent_chance 5	number_of_objects 6
	end_random
	avoid_forest_zone 2
	avoid_cliff_zone 3
}
create_object BOAR_TYPE {
	number_of_groups 9320
	set_gaia_object_only
	if RND_AVAILABLE
		resource_delta rnd(-200,200)
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement rnd(20,34)
		else
			temp_min_distance_group_placement rnd(40,80)
			min_distance_to_players rnd(30,40)
		endif
	else
		if USE_LAND_NOMAD_RESOURCES
			temp_min_distance_group_placement 24
		else
			temp_min_distance_group_placement 80
			min_distance_to_players 40
		endif
	endif
	group_variance 1
	start_random
		percent_chance 5	number_of_objects 0
		percent_chance 20	number_of_objects 1
		percent_chance 50	number_of_objects 2
		percent_chance 20	number_of_objects 3
		percent_chance 5	number_of_objects 4
	end_random
	avoid_forest_zone 2
	avoid_cliff_zone 3
}

/* =================================================================================================== */
/* place extra resources on center and corner lands */
/* rush type */

if ALLOW_CENTER_RUSH_RESOURCES
if CENTER_IS_LAND
	if WATER_BASED_MAP
		if NO_CONNECTIONS	#define PLACE_CENTER_RESOURCES
		else
			start_random
				percent_chance 80	#define PLACE_CENTER_RESOURCES
			end_random
		endif
	else
		start_random
			percent_chance 100	#define PLACE_CENTER_RESOURCES
		end_random
	endif
endif

if PLACE_CENTER_RESOURCES
	start_random
		percent_chance 20	create_object GOLD_TYPE
		percent_chance 20	create_object STONE_TYPE
		percent_chance 20	create_object BERRY_TYPE
		percent_chance 20	create_object DEER_TYPE
		percent_chance 20	create_object BOAR_TYPE
	end_random
	{
		terrain_to_place_on LAND_X
		if RND_AVAILABLE
			number_of_objects rnd(4,8)
			number_of_groups rnd(4,12)
			resource_delta rnd(-100,200)
		else
			number_of_objects 6
			number_of_groups 8
		endif
		group_variance 3
		place_on_specific_land_id 2
		set_scaling_to_map_size
		min_distance_group_placement 4
		temp_min_distance_group_placement 12
		avoid_forest_zone 2
		avoid_cliff_zone 3
		start_random
			percent_chance 50	set_loose_grouping
			percent_chance 50	set_tight_grouping
		end_random
	}

	/* predators in center unless nomad */
	if USE_NOMAD_SETUP
	else
		create_object PREDATOR_TYPE {
		terrain_to_place_on LAND_X
		if RND_AVAILABLE
			number_of_objects rnd(2,6)
			number_of_groups rnd(6,10)
			if GIVE_PREDATORS_FOOD	resource_delta rnd(0,200)	/* give wolves food! */	endif
		else
			number_of_objects 2
			number_of_groups 8
		endif
		group_variance 1
		place_on_specific_land_id 2
		set_scaling_to_map_size
		min_distance_group_placement 1
		temp_min_distance_group_placement 12
		avoid_forest_zone 2
		avoid_cliff_zone 3
		}
	endif
endif
endif

if ALLOW_CORNER_RUSH_RESOURCES
if CORNERS_USE_LAND_X
	if WATER_BASED_MAP
		if NO_CONNECTIONS	#define PLACE_CORNER_RESOURCES
		else
			start_random
				percent_chance 80	#define PLACE_CORNER_RESOURCES
			end_random
		endif
	else
		start_random
			percent_chance 50	#define PLACE_CORNER_RESOURCES
		end_random
	endif
endif

if PLACE_CORNER_RESOURCES
	start_random
		percent_chance 20	create_object GOLD_TYPE
		percent_chance 20	create_object STONE_TYPE
		percent_chance 20	create_object BERRY_TYPE
		percent_chance 20	create_object DEER_TYPE
		percent_chance 20	create_object BOAR_TYPE
	end_random
	{
		terrain_to_place_on LAND_X
		if RND_AVAILABLE
			number_of_objects rnd(4,8)
			number_of_groups rnd(4,12)
			resource_delta rnd(-100,200)
		else
			number_of_objects 4
			number_of_groups 8
		endif
		group_variance 3
		place_on_specific_land_id 3
		set_scaling_to_map_size
		min_distance_group_placement 4
		temp_min_distance_group_placement 12
		avoid_forest_zone 2
		avoid_cliff_zone 3
		start_random
			percent_chance 50	set_loose_grouping
			percent_chance 50	set_tight_grouping
		end_random
	}
endif
endif

/* ie. water center lands that have a terrain island */
if CENTRAL_ISLAND
	start_random
		percent_chance 20	create_object GOLD_TYPE
		percent_chance 20	create_object STONE_TYPE
		percent_chance 20	create_object BERRY_TYPE
		percent_chance 20	create_object DEER_TYPE
		percent_chance 20	create_object BOAR_TYPE
	end_random
	{
		terrain_to_place_on LAND_X
		if RND_AVAILABLE
			number_of_objects rnd(4,8)
			number_of_groups rnd(4,12)
			resource_delta rnd(-100,200)
		else
			number_of_objects 6
			number_of_groups 8
		endif
		group_variance 3
		place_on_specific_land_id 2
		set_scaling_to_map_size
		min_distance_group_placement 4
		temp_min_distance_group_placement 12
		avoid_forest_zone 2
		avoid_cliff_zone 3
		start_random
			percent_chance 50	set_loose_grouping
			percent_chance 50	set_tight_grouping
		end_random
	}
endif


/* =================================================================================================== */
/* other map resources */

/* default straggler trees */
if DEATH_MATCH
elseif DEFEND_WONDER
elseif EMPIRE_WARS
else
create_object STRAGGLER_A {
	if RND_AVAILABLE	resource_delta rnd(-50,200)	endif
	number_of_objects 2
	set_gaia_object_only
	set_place_for_every_player
	min_distance_to_players 4
	max_distance_to_players 5
	min_distance_group_placement 1
}
create_object STRAGGLER_B {
	if RND_AVAILABLE	resource_delta rnd(-50,200)	endif
	number_of_objects 3
	set_gaia_object_only
	set_place_for_every_player
	min_distance_to_players 6
	max_distance_to_players 8
	min_distance_group_placement 1
}
endif

/* birds */
create_object BIRD_TYPE {
	number_of_objects 6
	set_scaling_to_map_size
}

/* scattered wolves */
if USE_NOMAD_SETUP
elseif DEATH_MATCH
elseif DEFEND_WONDER
else
create_object PREDATOR_TYPE {
	number_of_groups 9320
	if RND_AVAILABLE
		if GIVE_PREDATORS_FOOD	resource_delta rnd(0,200)	/* give wolves food! */	endif
		temp_min_distance_group_placement rnd(40,80)
	else
		temp_min_distance_group_placement 60
	endif
	start_random
		percent_chance 50	number_of_objects 2
		percent_chance 30	number_of_objects 3
		percent_chance 20	number_of_objects 4
	end_random
	group_variance 1
	set_gaia_object_only
	min_distance_group_placement 1
	avoid_forest_zone 2
	avoid_cliff_zone 3
	min_distance_to_players 40
}
endif

if DEATH_MATCH
elseif DEFEND_WONDER
else
/* scattered stragglers */
create_object STRAGGLER_A {
	if RND_AVAILABLE
		number_of_groups rnd(5,15)
		resource_delta rnd(-75,75)
	else
		number_of_groups 10
	endif
	number_of_objects 2
	group_variance 1
	set_gaia_object_only
	set_scaling_to_map_size
	min_distance_to_players 8
	min_distance_group_placement 1
	temp_min_distance_group_placement 12
	avoid_forest_zone 1
	avoid_cliff_zone 2
}
create_object STRAGGLER_B {
	if RND_AVAILABLE
		number_of_groups rnd(5,15)
		resource_delta rnd(-75,75)
	else
		number_of_groups 10
	endif
	number_of_objects 2
	group_variance 1
	set_gaia_object_only
	set_scaling_to_map_size
	min_distance_to_players 8
	min_distance_group_placement 1
	temp_min_distance_group_placement 12
	avoid_forest_zone 1
	avoid_cliff_zone 2
}
create_object STRAGGLER_C {
	if RND_AVAILABLE
		number_of_groups rnd(5,15)
		resource_delta rnd(-75,75)
	else
		number_of_groups 10
	endif
	number_of_objects 2
	group_variance 1
	set_gaia_object_only
	set_scaling_to_map_size
	min_distance_to_players 8
	min_distance_group_placement 1
	temp_min_distance_group_placement 12
	avoid_forest_zone 1
	avoid_cliff_zone 2
}
endif

/* =================================================================================================== */
/* fish */
/* possibly add something to prevent fish on ice shallows If people don't like that */

create_object SHOREFISH_C {
	if RND_AVAILABLE
		min_distance_group_placement rnd(2,4)
		temp_min_distance_group_placement rnd(4,10)
		resource_delta rnd(-150,150)
	else
		min_distance_group_placement 3
		temp_min_distance_group_placement 7
	endif
	number_of_objects 9320
	set_gaia_object_only
}
create_object DEEPFISH_D {
	if RND_AVAILABLE
		min_distance_group_placement rnd(3,5)
		temp_min_distance_group_placement rnd(10,20)
		resource_delta rnd(-200,200)
	else
		min_distance_group_placement 4
		temp_min_distance_group_placement 12
	endif
	number_of_objects 9320
	set_gaia_object_only
	max_distance_to_other_zones 7
}

create_object FISH_A {
	if RND_AVAILABLE
		min_distance_group_placement rnd(3,5)
		temp_min_distance_group_placement rnd(8,16)
		resource_delta rnd(-150,150)
	else
		min_distance_group_placement 4
		temp_min_distance_group_placement 12
	endif
	number_of_objects 9320
	set_gaia_object_only
	max_distance_to_other_zones 4
}
create_object FISH_B {
	if RND_AVAILABLE
		min_distance_group_placement rnd(3,5)
		temp_min_distance_group_placement rnd(4,12)
		resource_delta rnd(-150,150)
	else
		min_distance_group_placement 4
		temp_min_distance_group_placement 8
	endif
	number_of_objects 9320
	set_gaia_object_only
	max_distance_to_other_zones 4
}


endif
/* end of random resources */



/* maybe replace wolves with horse/camel/dromedary on nomad? */



/* done */


